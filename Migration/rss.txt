<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>PrimordialCode</title><link>http://www.primordialcode.com/</link><description>Where Mammoths runs wild on your mind!</description><copyright>Giorgetti Alessandro</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>http://dexterblogengine.codeplex.com</generator><language>it-IT</language><lastBuildDate>Tue, 06 Nov 2012 14:44:33 GMT</lastBuildDate><webMaster>guardian</webMaster><category>.Net NHibernate Wpf Silverlight Windows Phone</category><item><title>WebNet European Conference, Slides and Samples</title><description>&lt;p&gt;I know that some time has passed since the conference, but I forgot to upload the slides and the samples of my session.&lt;/p&gt;  &lt;p&gt;So, here are the slides (courtesy of Slideshare):&lt;/p&gt; &lt;iframe style="border-bottom: #ccc 0px solid; border-left: #ccc 1px solid; margin-bottom: 5px; border-top: #ccc 1px solid; border-right: #ccc 1px solid" height="356" marginheight="0" src="http://www.slideshare.net/slideshow/embed_code/15047813" frameborder="0" width="427" marginwidth="0" scrolling="no" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen" allowfullscreen="allowfullscreen"&gt; &lt;/iframe&gt;  &lt;div style="margin-bottom: 5px"&gt;&lt;strong&gt;&lt;a title="«Real Time» Web Applications with SignalR in ASP.NET" href="http://www.slideshare.net/giorgettialessandro/real-time-web-applications-with-signalr-in-aspnet" target="_blank"&gt;«Real Time» Web Applications with SignalR in ASP.NET&lt;/a&gt; &lt;/strong&gt;from &lt;strong&gt;&lt;a href="http://www.slideshare.net/giorgettialessandro" target="_blank"&gt;Alessandro Giorgetti&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;  &lt;div style="margin-bottom: 5px"&gt;&amp;#160;&lt;/div&gt;  &lt;div style="margin-bottom: 5px"&gt;And this is the solution containing all the projects files, the dll packages to compile them and all the binaries and powershell scripts that I used to run the preconfigured demos (like a compiled version of Redis that runs on Windows to launch the backplane demos). The file is pretty big (over 10Mb), so it will take some time to download.&lt;/div&gt;  &lt;div style="margin-bottom: 5px"&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/webnetconf_signalr.zip" target="_self"&gt;Sample Project: WebNetConf_SignalR.zip&lt;/a&gt;&lt;/div&gt;  &lt;p&gt;Cya Next.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-web.net-european-conference-an-amazing-experience"&gt;The Web.Net European Conference: an amazing experience&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/css-and-javascript-file-minification"&gt;Css and JavaScript file minification&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/aspnet-tagging-hiding-columns-gridview"&gt;ASP.NET - Tagging and Hiding the columns of a GridView&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/working-on-dexter"&gt;Working on Dexter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error"&gt;Tale of an ‘asp:Content control that do not correspond with asp:ContentPlaceHolder’ Master Page Error&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/webnet-european-conference-slides-and-samples"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples</link><author>guardian</author><comments>http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples</guid><pubDate>Tue, 06 Nov 2012 21:44:33 GMT</pubDate><category>SignalR</category><category>Asp net</category><category>Web.Net</category></item><item><title>The Web.Net European Conference: an amazing experience</title><description>&lt;p&gt;A couple of days ago I had the pleasure to take part in the &lt;a href="http://www.webnetconf.eu/"&gt;First Web.Net European Conference&lt;/a&gt;: lots of speakers from all around Europe, 4 different Tracks, 4 rooms always crowded by hungry Developers (I think from 7 different nationalities), and loads of information for us to take advantage of (what a shame that two of the sessions I would have liked to follow were scheduled at the same time of mine, I hope to see some videos &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="A bocca aperta" src="http://www.primordialcode.com/UserFiles/guardian/wlEmoticon-openmouthedsmile_2_13.png" /&gt;).&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.tostring.it/"&gt;Ugo Lattanzi&lt;/a&gt; and &lt;a href="http://codeclimber.net.nz/"&gt;Simone Chiaretta&lt;/a&gt; really did an impressive job organizing this conference and setting up the stage. It surely wasn’t easy to get in touch with everyone, find the sponsors and the rooms to host this event.&lt;/p&gt;  &lt;p&gt;I have to admit that when Ugo get in touch with me ‘kindly’ asking (ok, ‘forcing’ maybe it’s the correct word) if I would have liked to host a session, I was a bit scared to not be able to do a good job due to my very tight schedule of these months (which also forced me to stop blogging for a while). But he insisted so much and promised that ‘bad things’ would happen to me in case of rejecting his offer, that I had no choice but to accept.&lt;/p&gt;  &lt;p&gt;Looking at it now I really have to thank him twice: this conference was an amazing experience and gave me the change to meet old friends and make new ones, as I’ve also ‘twitted’: having the change to meet personally some of the guys you follow on twitter is priceless.&lt;/p&gt;  &lt;p&gt;Seeing so many people really, really, really passionate for what they do to the point of sacrificing a Saturday to take an airplane, a train or whatever they used and move from all Europe to gather here in Italy is a thing that make me proud of being a “Dev”: it’s Saturday, you don’t get paid, you have to travel probably a lot, nonetheless you move your a## and head to the conference to learn new things and meet people like you.&lt;/p&gt;  &lt;p&gt;Some Developers are really ‘one of a kind’, and all that were there Saturday, to me, are well suited into that category.&lt;/p&gt;  &lt;p&gt;In the end of this ‘emotional’ post I would like to thank again all the Speakers (too many to mention them all, go check the agenda to see of how many names I’m talking about), the Audience and the Organization.&lt;/p&gt;  &lt;p&gt;The slides and the samples of my talk: &lt;strong&gt;&amp;quot;Real Time&amp;quot; Web Applications with SignalR in ASP.NET&lt;/strong&gt;, will be made available shortly on this blog or on the conference website.&lt;/p&gt;  &lt;p&gt;Cya Next.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples"&gt;WebNet European Conference, Slides and Samples&lt;/a&gt; (11/06/2012)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/the-web.net-european-conference-an-amazing-experience"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/the-web.net-european-conference-an-amazing-experience</link><author>guardian</author><comments>http://www.primordialcode.com/blog/post/the-web.net-european-conference-an-amazing-experience#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/the-web.net-european-conference-an-amazing-experience</guid><pubDate>Tue, 23 Oct 2012 19:37:23 GMT</pubDate><category>SignalR</category><category>Web.Net</category></item><item><title>WP7 - Test if your ViewModel is serializable</title><description>&lt;p&gt;Writing WP7 applications (and the new Metro UI Apps in Windows 8) you will have to deal with concepts like ‘Tombstoning’ or ‘Suspension’; if you follow the MVVM pattern, there’s a very good chance that the status of your application page is represented by the ViewModel itself. So a quick and dirty way to handle those suspended states is to ‘persist’ the ViewModel (or the part of it that have actual meaning) to the application state or to a file storage and retrieve it at a later time when the application is reactivated.&lt;/p&gt;  &lt;p&gt;if you put something that is not a primitive type inside the Application State or the Page State dictionaries, it will be serialized using the standard DataContractSerializer (on the subject of serialization and deserialization in WP7 you can read these previous posts of mine: &lt;a href="http://www.primordialcode.com/blog/post/wp7-understanding-serialization"&gt;WP7 Understanding Serialization&lt;/a&gt; and &lt;a href="http://www.primordialcode.com/blog/post/wp7-datacontractserializer-bug"&gt;http://www.primordialcode.com/blog/post/wp7-datacontractserializer-bug&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;A good way to avoid headaches when using this approach to handle tombstoning/suspension is the to test not only the behavior of your ViewModels, but also if your ViewModels are serializable; you can do this by using an helper class similar to this one:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:16fb496c-f3cc-41a4-bf93-079c84f2d5aa" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true;  width: 600px; height: 400px;" style=" width: 600px; height: 400px;overflow: auto;"&gt;public static class DataContractSerializerHelpers
{
    public static string ToXml(object obj)
    {
        return ToXml(obj, null);
    }

    public static string ToXml(object obj, IEnumerable&amp;lt;Type&amp;gt; knownTypes)
    {
        Type objType = obj.GetType();
        DataContractSerializer ser = new DataContractSerializer(objType, knownTypes);
        {
            using (StringWriter sw = new StringWriter())
            {
                XmlWriterSettings settings = new XmlWriterSettings();
                settings.OmitXmlDeclaration = true;
                settings.Indent = true;
                //settings.NewLineOnAttributes = true;
                using (XmlWriter writer = XmlWriter.Create(sw, settings))
                {
                    ser.WriteObject(writer, obj);
                }
                return sw.ToString();
            }
        }
    }

    public static object FromXml(string data, Type type)
    {
        return FromXml(data, type, null);
    }

    public static object FromXml(string data, Type type, IEnumerable&amp;lt;Type&amp;gt; knownTypes)
    {
        using (StringReader sr = new StringReader(data))
        {
            XmlReaderSettings settings = new XmlReaderSettings();
            using (XmlReader reader = XmlReader.Create(sr, settings))
            {
                DataContractSerializer ser = new DataContractSerializer(type, knownTypes);
                return ser.ReadObject(reader);
            }
        }
    }

    public static T FromXml&amp;lt;T&amp;gt;(string data) where T : class
    {
        return FromXml(data, typeof(T), null) as T;
    }

    public static T FromXml&amp;lt;T&amp;gt;(string data, IEnumerable&amp;lt;Type&amp;gt; extraTypes) where T : class
    {
        return FromXml(data, typeof(T), extraTypes) as T;
    }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;It’s basically a simple wrapper around the DataContractSerializer function to call it in a convenient way that mimic what the infrastructure does.&lt;/p&gt;

&lt;p&gt;Using the standard DataContractAttribute and DataMemberAttribute on the ViewModels you can fine tune what will be persisted (obviously you should limit this to the properties that have some meaning for your application state, you will also have to design the ViewModels to provide lazy initialization for everything that depends on those data). Your tests will then look similar to this one:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:67edae9b-bcd9-421a-b831-bf66c9b3353d" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true;  width: 600px; height: 400px;" style=" width: 600px; height: 400px;overflow: auto;"&gt;[TestClass]
public class SerializableTypes : SilverlightTest
{
    // Test if we can save the VM to the state dictionaries
	[TestMethod]
    public void ViewModel_Serialize()
    {
		// todo: add proper members initialization
	    MainViewModel vm = new MainViewModel();
        DataContractSerializerHelpers.ToXml(vm);
    }

	// Test if we can retrieve the VM from the state dictionaries
    [TestMethod]
    public void ViewModel_DeSerialize()
    {
		// todo: add proper members initialization
	    MainViewModel vm = new MainViewModel();
        var data = DataContractSerializerHelpers.ToXml(vm);

        // test
        var loaded = DataContractSerializerHelpers.FromXml&amp;lt;MainViewModel&amp;gt;(data);
        Assert.IsNotNull(loaded);
		// todo: add proper testing on members values
    }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;With this approach the code that you have to write on the views to handle tombstoning will become trivial; in your views you will have something similar to this:&lt;/p&gt;

&lt;p&gt;
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:e465136c-396b-4fe6-a4db-ecdf6936b9bf" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true;  width: 600px; height: 400px;" style=" width: 600px; height: 400px;overflow: auto;"&gt;...

private SingleFeedViewModel Vm
{
    get { return (SingleFeedViewModel)DataContext; }
    set { DataContext = value; }
}

protected override void OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)
{
    base.OnNavigatedTo(e);

    // if we came up after a dormant state we do not need to do anything at this stage
    // I also have to check if the Vm is unassigned (we can come here from a normal navigation, after a resume)
    if (ApplicationHelper.IsApplicationInstancePreserved &amp;amp;&amp;amp; Vm != null)
        return;

    // recover from tombstoning
    if (State.ContainsKey(StateKeys.SingleFeedVm))
	{
		//clear prev value
		SingleFeedViewModel itm = State[StateKeys.SingleFeedVm] as SingleFeedViewModel;
		if (itm != null)
		    Vm = itm;
	}
    // nothing was retrieved from the state dictionary, create an instance
	// of the ViewModel
    if (Vm == null)
    {
        Vm = new SingleFeedViewModel();
        Vm.LoadData();
    }
}

protected override void OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs e)
{
    base.OnNavigatedFrom(e);
    // save state to handle tombstoning
    if (State.ContainsKey(StateKeys.SingleFeedVm))
    {
        //clear previous value
        State.Remove(StateKeys.SingleFeedVm);
    }
    State.Add(StateKeys.SingleFeedVm, Vm);
}

...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;WARNING! I was about to forget an important point: &lt;strong&gt;events cannot be serialized&lt;/strong&gt; (once again a reference to another old post of mine: &lt;a href="http://www.primordialcode.com/blog/post/serialization-exception-propertychangedeventmanager-serializable"&gt;Serialization Exception: PropertyChangedEventManager is not serializable&lt;/a&gt;, it’s related to binary serialization or objects, but the concept is the same), so remember to not mark the events with the DataMemberAttribute or, if your ViewModel has everything public, and you didn’t used the DataContractAttribute to opt-in what you want to be serialized, it’s better to mark the events with [field: IgnoreDataMember] to exclude them from the serialization process.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wp7-unit-testing-getting-started"&gt;WP7 Unit Testing - getting started&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wp7-test-if-your-viewmodel-is-serializable"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wp7-test-if-your-viewmodel-is-serializable</link><author>guardian</author><comments>http://www.primordialcode.com/blog/post/wp7-test-if-your-viewmodel-is-serializable#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wp7-test-if-your-viewmodel-is-serializable</guid><pubDate>Fri, 24 Feb 2012 21:47:24 GMT</pubDate><category>WP7</category><category>Unit Test</category></item><item><title>WP7 Unit Testing - getting started</title><description>&lt;p&gt;Testing is important and it can save you lots of time, to successfully setup a WP7 Unit Test project I recommend you to first obtain the ‘NuGet Package Manager’ Visual Studio 2010 extension, it will make it a breeze to retrieve the latest version of libraries and packages and add a reference to them.&lt;/p&gt;  &lt;p&gt;Here is a step by step guide on how to create your test project using the testing framework kindly provided to us by &lt;a href="http://www.jeff.wilcox.name/"&gt;Jeff Wilcox&lt;/a&gt;:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Open up Visual Studio and install NuGet if you do not have it: Tools –&amp;gt; Extension Manager, look for NuGet Package Manager in the Online Gallery. &lt;/li&gt;    &lt;li&gt;Create a new Windows Phone Application project, do not modify it right now. &lt;/li&gt;    &lt;li&gt;Use NuGet to get the latest version of the Unit Test framework for WP7, you can do it in two ways:&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; - for the ‘Tools’ menu chose ‘Library Package Manager’ and then ‘Manage NuGet Packages for Solution’      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; - right click on the project you wish the package to be added to and select ‘Manage NuGet Packages’&lt;/li&gt;    &lt;li&gt;In the dialog that will open go to the Online section and look for ‘silverlight.unittest.wp7’     &lt;br /&gt;&lt;a href="http://www.primordialcode.com/UserFiles/guardian/NuGetSlUnitTestWP7.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="NuGetSlUnitTestWP7" border="0" alt="NuGetSlUnitTestWP7" src="http://www.primordialcode.com/UserFiles/guardian/NuGetSlUnitTestWP7_thumb.png" width="554" height="311" /&gt;&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;click on ‘install’ to download and add the package to the selected project.&lt;/li&gt;    &lt;li&gt;it’s time to modify the test project following what’s written in the Test_Readme.txt file:     &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; - open up the MainPage.xaml and handle the ‘Loaded’ event      &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; - add the following line to the event to activate the test infrastructure: this.StartTestRunner();&lt;/li&gt;    &lt;li&gt;Done. Running the project you should see something like this:     &lt;br /&gt;&lt;a href="http://www.primordialcode.com/UserFiles/guardian/WP7ut1_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="WP7ut1" border="0" alt="WP7ut1" src="http://www.primordialcode.com/UserFiles/guardian/WP7ut1_thumb.png" width="204" height="337" /&gt;&lt;/a&gt;&lt;a href="http://www.primordialcode.com/UserFiles/guardian/WP7ut2_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="WP7ut2" border="0" alt="WP7ut2" src="http://www.primordialcode.com/UserFiles/guardian/WP7ut2_thumb.png" width="204" height="337" /&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;You are now ready to write you own custom tests using a syntax and rules very similar the ones used by the MSTest suite that is already integrated in Visual Studio.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wp7-test-if-your-viewmodel-is-serializable"&gt;WP7 - Test if your ViewModel is serializable&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wp7-unit-testing-getting-started"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wp7-unit-testing-getting-started</link><author>guardian</author><comments>http://www.primordialcode.com/blog/post/wp7-unit-testing-getting-started#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wp7-unit-testing-getting-started</guid><pubDate>Wed, 22 Feb 2012 19:26:26 GMT</pubDate><category>WP7</category><category>Unit Test</category></item><item><title>Configure WebMatrix/IIS Express to work with WP7 on Windows 7</title><description>&lt;p&gt;Long time is passed after my last ‘notable’ blog post, I was just too busy and lazy in the past months, lots of things happened and I couldn’t follow everything, but it’s not that I want to talk about, let’s talk about some more WP7 development.&lt;/p&gt;  &lt;p&gt;Actually I am ‘playing’ with WP7, jQuery Mobile, WCF services and some various mobile stuff these days, honestly I was tired of having my WP7 device connected to the USB cable in order to be able to surf websites and use services that are hosted on my development machine. So I started to scouting around looking for a solution.&lt;/p&gt;  &lt;p&gt;My goal is to be able to host websites and WCF services using WebMatrix ad IIS Express at first and a custom made WCF self hosting solution at a later time for my developing everyday life (and for demo purposes).&lt;/p&gt;  &lt;p&gt;So here’s my current setup:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;IIS Express/WebMatrix &lt;/li&gt;    &lt;li&gt;Zune &lt;/li&gt;    &lt;li&gt;WP7 + USB cable connected &lt;/li&gt;    &lt;li&gt;a fantastic website hosted on IIS Express &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Everything is working correctly here, I can browse the website from WP7 and test it, but I have to keep the cable connected, which is a no go if I want to make a demo of something to someone with a ‘floating’ device. I do not want to create new DNS entries, nor touch the network infrastructure nor do any other complicated IT or network related stuff, that’s not for me.&lt;/p&gt;  &lt;p&gt;I want to be able to switch to this setup (both for testing and demo environment):&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;IIS Express/WebMatrix &lt;/li&gt;    &lt;li&gt;WP7 &lt;/li&gt;    &lt;li&gt;still my fantastic website hosted on IIS Express &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;you see: no Zune, no cable, just me and my device (and Visual Studio of course). To obtain this we need to make IIS Express able to accept connections from the outside, you can do that following this guide:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.iis.net/vaidyg/archive/2010/07/29/serving-external-traffic-with-webmatrix-beta.aspx"&gt;http://blogs.iis.net/vaidyg/archive/2010/07/29/serving-external-traffic-with-webmatrix-beta.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Here’s what I had to do in order to make things work:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Get your computer IP, mine was: 192.168.1.10. &lt;/li&gt;    &lt;li&gt;Pickup a port you will use to host your service (using port 80 is bad idea on a development machine), I choose: 24778. &lt;/li&gt;    &lt;li&gt;Configure HTTP.SYS (the component that is used to handle http requests) to accept external connection when running as standard user (you can bypass this if you launch WebMatrix and IIS Express with admin privileges, but that’s not good for security reasons), open a shell prompt with admin rights and type:      &lt;br /&gt;      &lt;br /&gt;      &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:1c12b135-8b7d-43fe-ac13-09d3ebe28a86" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: plain; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;netsh http add urlacl url=http://192.168.1.10:24778/ user=everyone
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

    &lt;br /&gt;&lt;/li&gt;

  &lt;li&gt;Configure the binding in WebMatrix: doing it by manually editing the &lt;strong&gt;applicationhost.config&lt;/strong&gt; file is the best way. The file is located is your user profile at the following folder: “%USERPROFILE%\documents\IISExpress\config”. Another way to find it is: right click on the IIS Express icon in the system Tray, choose “show all applications”, highlight your website and then look at the configuration setting (it’s the last voice on the window), you can even click on it to open the file in notepad. 

    &lt;br /&gt;

    &lt;br /&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/WebMatrixWp7_1.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="WebMatrixWp7_1" border="0" alt="WebMatrixWp7_1" src="http://www.primordialcode.com/UserFiles/Guardian/WebMatrixWp7_1_thumb.png" width="687" height="278" /&gt;&lt;/a&gt; 

    &lt;br /&gt;The image is in Italian, I know &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_12.png" /&gt;; now that you have your file open you need to locate the your website configuration and change the binding settings to allow connection the pre-defined IP address and port. Here’s how I modified my configuration: 

    &lt;br /&gt;

    &lt;br /&gt;

    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d5968c44-a33d-414f-97b5-7195319b8adb" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: plain; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;site name=&amp;quot;MyWonderfulSite&amp;quot; id=&amp;quot;2&amp;quot;&amp;gt;
 &amp;lt;application path=&amp;quot;/&amp;quot;&amp;gt;
     &amp;lt;virtualDirectory path=&amp;quot;/&amp;quot; physicalPath=&amp;quot;D:\XXXXXXXXXX&amp;quot; /&amp;gt;
 &amp;lt;/application&amp;gt;
 &amp;lt;bindings&amp;gt;
     &amp;lt;binding protocol=&amp;quot;http&amp;quot; bindingInformation=&amp;quot;*:24778:localhost&amp;quot; /&amp;gt;   
     &amp;lt;binding protocol=&amp;quot;http&amp;quot; bindingInformation=&amp;quot;192.168.1.10:24778:&amp;quot; /&amp;gt;   
 &amp;lt;/bindings&amp;gt;
&amp;lt;/site&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

    &lt;br /&gt;I have added a binding that explicitly configure the IP address and port that I want to use without assigning a hostname. 

    &lt;br /&gt;&lt;/li&gt;

  &lt;li&gt;The last step is to open up the port in your Firewall, this is up to you depending on the Firewall you are using. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;If you have followed all the steps you are now able to browse your test website (using the specified address like: &lt;a href="http://192.168.1.10:24778/"&gt;http://192.168.1.10:24778/&lt;/a&gt;) from your WP7 without having the USB cable connected and Zune open, pretty cool isn’t it ?&lt;/p&gt;

&lt;p&gt;These very same steps can be used for your Android and iPhone devices, but I personally do not own any of those devices so I wasn’t able to try it.&lt;/p&gt;

&lt;p&gt;Doing this research I’ve learned a couple of things about IIS Express and how the http requests are served by the system.&lt;/p&gt;

&lt;p&gt;As last note: to undo the modifications you’ve done to the HTTP.SYS configuration you can use the following command:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4d6c501d-59eb-4e5d-8a55-b1cf587575f3" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: plain; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;netsh http delete urlacl url=http://192.168.1.10:24778/&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;See you next.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/configure-webmatrix-iis-express-wp7-windows7</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/configure-webmatrix-iis-express-wp7-windows7#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/configure-webmatrix-iis-express-wp7-windows7</guid><pubDate>Tue, 07 Feb 2012 16:15:34 GMT</pubDate><category>IIS Express</category><category>WebMatrix</category><category>WP7</category><category>Android</category><category>IPhone</category></item><item><title>Windows 7 ATIKMPAG.SYS BSOD Solved (in my case)</title><description>&lt;p&gt;After having updated the drivers for my graphic card to the latest version - Catalyst 10.12 as I write this post - taken directly from the ATI website, I started to experiment some Blue Screen Of Death (BSOD) at the startup of the OS.&lt;/p&gt;  &lt;p&gt;More specifically it all was happening when the Catalyst CCC was about to be fully loaded.&lt;/p&gt;  &lt;p&gt;The error message reported by the system was something like: “atikmpag.sys has stopped responding”, followed by the memory dump.&lt;/p&gt;  &lt;p&gt;I tried some solutions found on the internet but nothing worked: I kept having the BSOD at the startup; I tried reinstalling the drivers but neither that has worked, I even tried some old versions of the drivers with no luck.&lt;/p&gt;  &lt;p&gt;I was however able to startup the machine in recovery mode, so I started looking for some files left behind by the Uninstall manager: in my private profile directory I found a file that was storing all the drivers settings and customization that were made during the previous months. That file (called Profiles.xml) was not removed during the uninstall process, looking into that I’ve found some settings that turned to be the cause of my troubles with the new drivers.&lt;/p&gt;  &lt;p&gt;To solve this issue just delete the “Profiles.xml” you can find in the user profile directory: ‘C:\Users\YOURUSERNAME\AppData\Local\ATI\ACE’; at the next restart this file will be recreated by the system with the default settings.&lt;/p&gt;  &lt;p&gt;Maybe in the past I installed some gaming profile that caused some problems or tried some ‘experimental’ configuration to improve performances that was causing troubles, I don’t really know and, actually, I don’t really care &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_11.png" /&gt;, but resetting it to the default values solved the problem for me avoiding a complete OS installation from scratch.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/windows-7-atikmpag.sys-bsod-solved-in-my-case</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/windows-7-atikmpag.sys-bsod-solved-in-my-case#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/windows-7-atikmpag.sys-bsod-solved-in-my-case</guid><pubDate>Thu, 02 Feb 2012 16:01:09 GMT</pubDate><category>ATI</category><category>BSOD</category><category>ATIKMPAG.SYS</category></item><item><title>HP ProLiant MicroServer, Windows 7 or Vista installation issues</title><description>&lt;p&gt;Stating at what HP says installing Windows Vista or Windows 7 on an HP ProLiant MicroServer (in my case the old N36L model) is not supported. This doesn’t mean it isn’t doable.&lt;/p&gt;  &lt;p&gt;All you need are the correct drivers to start the setup properly, I had an old license of Windows Vista (32 bit...ouch!) I wasn’t using anymore, so I’ve decided to install it over this piece of hardware to do some testing at my home. &lt;/p&gt;  &lt;p&gt;First problem I faced was the missing of a driver for the RAID controller (yes I set it up to use RAID 1 through the BIOS settings); once I figured out it has an AMD SATA/RAID Controller on board I started looking around for some drivers, the following package worked for me:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/userfiles/guardian/sp48266.zip"&gt;AMD SATA/RAID AHCI Controller Driver (VERSION: 3.2.1548.37 REV: G)&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Just unzip it to a folder on your USB flash drive and extract the content of the ‘exe’ file (do not run or install it), you can do it using lots of free utilities out there (WinRar, just to name one).&lt;/p&gt;  &lt;p&gt;During the setup you will need to chose on which driver install Windows, if you don’t see any drive available (as it was in my case, having built a RAID array and a logical disk), you will need to fed the setup with the correct raid controller drivers. The drivers are located in the following path inside the previously extracted directory: \sp48266\RAID7xx. There will be x86 or x64 versions of the driver, chose the one that match your OR.&lt;/p&gt;  &lt;p&gt;At this point the setup will go on and everything will be installed correctly. &lt;/p&gt;  &lt;p&gt;Next step is to use ‘Windows Update’ to finish off the installation (protect the system, keep everything updated, install eventually missing drivers and so on...), but wait...we have no valid driver for the Network Card...sob &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_10.png" /&gt;; once again let’s look for some information and drivers.&lt;/p&gt;  &lt;p&gt;The actual network card happens to be identified like: ‘HP NC107i PCIe Gigabit Server Adapter’ and it’s made by Broadcom, looking around a bit I was able to find&amp;#160; a list of standard drivers from the Broadcom website:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.broadcom.com/support/ethernet_nic/netxtreme_server.php"&gt;NetXtreme I Server&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Pick the ones that correspond to your OS and:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Extract the content in a folder or USB drive. &lt;/li&gt;    &lt;li&gt;Open up the Control Panel and go to the device management, highlight the missing network card, right click on it and choose update drivers. &lt;/li&gt;    &lt;li&gt;Navigate to the directory where you previously extracted the drivers and install them. &lt;/li&gt;    &lt;li&gt;Reboot the system (this is required for the drivers to be able to work). &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Forcing these drivers in my case it made the things work; now I’m able to browse my network and install updates.&lt;/p&gt;  &lt;p&gt;Some information about the hardware you can find inside a ProLiant MicroServer were taken out from the HP product sheet and the ‘support and drivers’ pages at the following url:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://h20000.www2.hp.com/bizsupport/TechSupport/ProductList.jsp?lang=en&amp;amp;cc=us&amp;amp;taskId=135&amp;amp;prodTypeId=15351&amp;amp;prodSeriesId=4248009"&gt;http://h20000.www2.hp.com/bizsupport/TechSupport/ProductList.jsp?lang=en&amp;amp;cc=us&amp;amp;taskId=135&amp;amp;prodTypeId=15351&amp;amp;prodSeriesId=4248009&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Maybe this post can help someone that is having my same issues.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/build-windows-8"&gt;Build: Windows 8&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out.hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...hot to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...how to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support"&gt;Dexter is growing: Dynamic Pages and better Windows Live Writer support&lt;/a&gt; (06/02/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/hp-proliant-microserver-windows-7-or-vista-installation-issues"&gt;&lt;strong&gt;More related document (6)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/hp-proliant-microserver-windows-7-or-vista-installation-issues</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/hp-proliant-microserver-windows-7-or-vista-installation-issues#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/hp-proliant-microserver-windows-7-or-vista-installation-issues</guid><pubDate>Tue, 13 Dec 2011 19:28:36 GMT</pubDate><category>HP</category><category>ProLiant</category><category>Windows 7</category><category>Windows Vista</category></item><item><title>Creating a ‘Windows Installation’ bootable USB drive</title><description>&lt;p&gt;Recently I was in need to setup some new hardware and I’ve found myself doing this procedure over and over (because I am a cheap b*****d and I only own few USB pen drives &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_9.png" /&gt;) again. So even if there are plenty of posts out there offering more or less the same content, I’ll write it down here as a reminder to myself.&lt;/p&gt;  &lt;p&gt;Consider you can use this very same procedure to create a bootable USB flash drive to install any Microsoft Windows OS (from Vista to 2008 Server R2).&lt;/p&gt;  &lt;h3&gt;Prepare and Format the drive&lt;/h3&gt;  &lt;p&gt;You can do these first steps in several way, I prefer to use the &lt;strong&gt;diskpart&lt;/strong&gt; command line utility; BE CAREFUL HERE! If you do something wrong you may easily wipeout you disks!&amp;#160; &lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Open a command prompt as administrator (Right click on Start &amp;gt; All Programs &amp;gt; Accessories &amp;gt; Command Prompt and select “Run as administrator”)      &lt;br /&gt;&lt;/li&gt;    &lt;li&gt;type the following commands into the Command Prompt Window:      &lt;br /&gt;      &lt;br /&gt;&amp;#160; diskpart       &lt;br /&gt;      &lt;br /&gt;&amp;#160; list disk       &lt;br /&gt;      &lt;br /&gt;This will bring up a list of all your physical drives installed; look for your USB drive and take note of the number; if you have multiple USB drives attached I suggest you to disconnect them all but the one you want to use: the only way to identify the drive is looking at the drive’s size in this step, having multiple USB drives with the same capacity is not good!       &lt;br /&gt;&lt;/li&gt;    &lt;li&gt;Format the drive by typing the following commands into the same window. Replace “X” with the number of your disk.      &lt;br /&gt;      &lt;br /&gt;select disk X      &lt;br /&gt;      &lt;br /&gt;clean       &lt;br /&gt;      &lt;br /&gt;create partition primary      &lt;br /&gt;       &lt;br /&gt;select partition 1       &lt;br /&gt;      &lt;br /&gt;active       &lt;br /&gt;      &lt;br /&gt;format fs=NTFS       &lt;br /&gt;      &lt;br /&gt;assign       &lt;br /&gt;      &lt;br /&gt;exit       &lt;br /&gt;      &lt;br /&gt;At this stage we have a clean formatted USB with an active partition ready to be made bootable. Some guides will tell you to format the pen drive using FAT32, I always prefer to use NTFS especially to create bootable winpe drives to use the imagex.exe utility to clone systems, in this scenario we can easily break through the FAT32 file size limit.&lt;/li&gt; &lt;/ol&gt;  &lt;h3&gt;Make the drive bootable&lt;/h3&gt;  &lt;p&gt;To make the drive bootable we will use the &lt;strong&gt;bootsect&lt;/strong&gt; utility that comes along with any Microsoft Windows OS:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Insert your OS DVD.     &lt;br /&gt;&lt;/li&gt;    &lt;li&gt;Change directory to X:\boot (where X is your dvd drive).     &lt;br /&gt;&lt;/li&gt;    &lt;li&gt;Type the following instruction to make the drive bootable (now ‘X’ is your pen drive).     &lt;br /&gt;      &lt;br /&gt;bootsect /nt60 X:      &lt;br /&gt;&lt;/li&gt;    &lt;li&gt;Close the Command Prompt Window.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;The last step is copy all your installation files from the DVD (or ISO) to your newly created bootable USB flash drive.&lt;/p&gt;  &lt;p&gt;If you do not want to do everything by hand, there’s a tool from Microsoft you can use to do the very same work: &lt;a href="http://www.microsoftstore.com/store/msstore/html/pbPage.Help_Win7_usbdvd_dwnTool"&gt;Windows 7 USB/DVD download tool&lt;/a&gt;.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/creating-a-windows-installation-bootable-usb-drive</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/creating-a-windows-installation-bootable-usb-drive#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/creating-a-windows-installation-bootable-usb-drive</guid><pubDate>Tue, 13 Dec 2011 00:19:44 GMT</pubDate><category>Usb</category><category>Boot</category></item><item><title>Build: Windows 8</title><description>&lt;p&gt;I bet almost all the developers followed the ‘build’ keynote Yesterday, we had some big news (nothing too much scary, thankfully) and we saw Windows running on a bunch of new devices (I honestly can’t wait to put my hands on them) that will hit the market sooner or later in the future.&lt;/p&gt;  &lt;p&gt;On the Dev side, I’m very excited for what we saw: new potentials, some big improvements and a potentially rewritten and optimized infrastructure over which your apps will run on. I loved the metro style UI on WP7 and this ‘bigger brother’ seems very good to me. And yes the ‘pro’ will have their usual desktop view too (with productivity improvements on that side too).&lt;/p&gt;  &lt;p&gt;On the consumer and business side, timing here is quite important: when this new beast will be released to the market ? will it be too late to compete against its ‘enemies’ ? when the new devices will be available ? and another one... pricing ? will it get a good welcome from the customers? we can go on and on and on... &lt;/p&gt;  &lt;p&gt;Windows 8 should focus its target on the new devices and new installations, because hoping that a big part of the pre-existing windows installed machine will be updated to windows 8 in the close future is just...well...chose your word here!.&lt;/p&gt;  &lt;p&gt;Here in Italy before updating any windows version to the new one the usual policy is to ‘wait for the SP1’, people is just scared of changes (and of course the ‘money factor’ plays its main role too, which will stops many businesses to early adopt it).&lt;/p&gt;  &lt;p&gt;While we wait and think about all of this, we (devs) can happily put our hands on a Developer Preview of Windows 8, head up to MSDN for more info or just follow these links:&lt;/p&gt;  &lt;p&gt;Windows Developer Preview: &lt;a href="http://msdn.microsoft.com/en-us/windows/apps/br229516"&gt;http://msdn.microsoft.com/en-us/windows/apps/br229516&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Build Keynote &amp;amp; sessions info: &lt;a href="http://www.microsoft.com/presspass/events/build/"&gt;http://www.microsoft.com/presspass/events/build/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Build sessions will be available through Channel 9: &lt;a href="http://channel9.msdn.com/Events/BUILD/BUILD2011?sort=sequential&amp;amp;direction=desc&amp;amp;term"&gt;http://channel9.msdn.com/Events/BUILD/BUILD2011?sort=sequential&amp;amp;direction=desc&amp;amp;term&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Time to have some fun (again)!&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out.hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...hot to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...how to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support"&gt;Dexter is growing: Dynamic Pages and better Windows Live Writer support&lt;/a&gt; (06/02/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hp-proliant-microserver-windows-7-or-vista-installation-issues"&gt;HP ProLiant MicroServer, Windows 7 or Vista installation issues&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/build-windows-8"&gt;&lt;strong&gt;More related document (6)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/build-windows-8</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/build-windows-8#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/build-windows-8</guid><pubDate>Wed, 14 Sep 2011 16:13:25 GMT</pubDate><category>Windows 8</category><category>Build</category></item><item><title>NHibernate.Envers - Customize the Revision Entity</title><description>&lt;p&gt;Sometimes the basic information provided by the default revision entity we have in &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt;.Envers are not enough, when we need to extend those information and provide additional data we have the option to use a customized version of the Revision Entity class.&lt;/p&gt;  &lt;p&gt;The default revision entity is defined like this:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b80f4206-297b-417c-9f8b-8bea7f86978c" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Serializable]
public class DefaultRevisionEntity
{
	[RevisionNumber]
	public virtual int Id { get; set; }

	[RevisionTimestamp]
	public virtual DateTime RevisionDate { get; set; }

	public override bool Equals(object obj)
	{
		if (this == obj) return true;
		var revisionEntity = obj as DefaultRevisionEntity;
		if (revisionEntity == null) return false;

		var that = revisionEntity;

		if (Id != that.Id) return false;
		return RevisionDate == that.RevisionDate;
	}

	public override int GetHashCode()
	{
		var result = Id;
		result = 31 * result + (int)(((ulong)RevisionDate.Ticks) ^ (((ulong)RevisionDate.Ticks) &amp;gt;&amp;gt; 32));
		return result;
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;You can notice two properties that defines the information that a Revision Entity class MUST have, they are also marked by two configuration attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[RevisionNumber] - states which property will represent the revision number of the version&lt;/li&gt;

  &lt;li&gt;[RevisionTimestamp] - states the timestamp of the version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every custom Revision Entity class MUST have these two kind of properties, once again we will use the fluent by code configuration so we will not need to decorate our classes with attributes (I’ll show how to configure NHibernate.Envers using attributes in another post).&lt;/p&gt;

&lt;p&gt;Our custom Revision Entity class for this example will be:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:45d82845-8a30-4d84-870e-d04e3a103058" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;//[RevisionEntity]
public class REVINFO
{
	//[RevisionNumber]
	public virtual long Id { get; set; }

	//[RevisionTimestamp]
	public virtual DateTime CustomTimestamp { get; set; }

	public virtual string Data { get; set; }

	public override bool Equals(object obj)
	{
		var casted = obj as REVINFO;
		if (casted == null)
			return false;
		return (Id == casted.Id &amp;amp;&amp;amp;
				CustomTimestamp.Equals(casted.CustomTimestamp) &amp;amp;&amp;amp;
				Data.Equals(casted.Data));
	}

	public override int GetHashCode()
	{
		return Id.GetHashCode() ^ CustomTimestamp.GetHashCode() ^ Data.GetHashCode();
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As you can see we have the two basic properties plus an additional Data field that will represent our custom data added to each revision tracked.&lt;/p&gt;

&lt;p&gt;To be able to fill these data we need to implement a particular type of interface: an &lt;strong&gt;IRevisionListener&lt;/strong&gt;. This interface expose only a single member function - void NewRevision(object) - and it’s called every time a new revision object is generated. The demo code is:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c30908fa-da7a-42a0-96c1-f97b5e0ade79" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class RevInfoListener : IRevisionListener
{
	public static string Data = &amp;quot;test data&amp;quot;;

	public void NewRevision(object revisionEntity)
	{
		((REVINFO)revisionEntity).Data = Data;
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The last step is to change the configuration to ‘inject’ our custom Revision Entity class and Listener; in my test project I do it with the following code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d27bdda2-ba09-4c44-8856-2b6c71a5dc9d" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class NHinitCustomRevInfo : NHibernateInitializer
{
	protected override System.Collections.Generic.IEnumerable&amp;lt;System.Type&amp;gt; GetDomainEntities()
	{
		// I am using ConfORM to emit the mappings, so we add it to the mapped classes.
		return base.GetDomainEntities().Union(new[] { typeof(REVINFO) });
	}
	
	protected override void ConfOrmMapping(ConfOrm.ObjectRelationalMapper orm, ConfOrm.NH.Mapper mapper)
	{
		// I have to provide a mapping for a custom RevInfo class...NHibernate must know how to handle these objects
		orm.TablePerClass&amp;lt;REVINFO&amp;gt;();
		
		orm.TablePerClass&amp;lt;Person&amp;gt;();
		orm.TablePerClass&amp;lt;Game&amp;gt;();
	}

	public void InitializeAudit()
	{
		// initialize the NHibernate.Envers fluent configuration object
		var enversConf = new NHibernate.Envers.Configuration.Fluent.FluentConfiguration();

		// I prefer to not use attributes to configure the custom revision entity
		enversConf.SetRevisionEntity&amp;lt;REVINFO&amp;gt;(e =&amp;gt; e.Id, e =&amp;gt; e.CustomTimestamp, typeof(RevInfoListener));
		
		// the RevInfo class must not be in the auditing list
		enversConf.Audit(GetDomainEntities().Where(e =&amp;gt; !typeof(REVINFO).IsAssignableFrom(e)));

		// to inspect the metadata
		//var mets = enversConf.CreateMetaData(Configure);

		// Configure.Properties.Add(&amp;quot;nhibernate.envers.audit_table_prefix&amp;quot;, string.Empty); // default
		Configure.Properties.Add(&amp;quot;nhibernate.envers.audit_table_suffix&amp;quot;, &amp;quot;_REV&amp;quot;); // default _AUD
		// Configure.Properties.Add(&amp;quot;nhibernate.envers.revision_field_name&amp;quot;, &amp;quot;REV&amp;quot;); // default
		// Configure.Properties.Add(&amp;quot;nhibernate.envers.revision_type_field_name&amp;quot;, &amp;quot;REVTYPE&amp;quot;); // default

		Configure.IntegrateWithEnvers(enversConf);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;I am using &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; and my mapping engine, so part of the configuration is related to how it’s used to generate the mappings, but the concepts are valid for any other mapping tools you use; Let’s go through it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line 6: we add the REVINFO class to my mapped domain, ConfORM need to be aware of it.&lt;/li&gt;

  &lt;li&gt;Line 12: we tell ConfORM how to map the class.&lt;/li&gt;

  &lt;li&gt;Line 21: we initialize the NHibernate.Envers fluent configuration engine.&lt;/li&gt;

  &lt;li&gt;Line 24: this is the crucial point, we specify our custom Revision Entity class type, we tell Envers which functions to use to fill in the Revision incremental number and the Revision Timestamp; plus we pass in the type of the IRevisionListener implementation if we want to specify additional data in the custom revision entity class.&lt;/li&gt;

  &lt;li&gt;Line 27: we tell to NHibernate.Envers which classes we want to track (be careful to exclude the REVINFO class from the tracked ones here).&lt;/li&gt;

  &lt;li&gt;Line 37: we add NHibernate.Envers to the standard NHibernate configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we create a simple test and execute it we can inspect the schema of the generated database to see the custom revision entity in place:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEnversSampleSchemaCustomRevEnt_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Database Schema with Custom Revision Entity" border="0" alt="Database Schema with Custom Revision Entity" src="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEnversSampleSchemaCustomRevEnt_thumb.jpg" width="554" height="467" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 1 - Database Schema with Custom Revision Entity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s all for this post, next time we’ll see how to query for the extended revision entity properties we just added.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-quick-introduction"&gt;NHibernate.Envers - a quick introduction&lt;/a&gt; (06/07/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-1"&gt;NHibernate.Envers - Querying - part 1&lt;/a&gt; (06/10/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-2"&gt;NHibernate.Envers - Querying - part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator"&gt;Silverlight / WCF: fixing the Custom WCF Proxy Generator&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation"&gt;Silverlight / WCF : Writing your own Custom WCF Proxy Generator to support validation&lt;/a&gt; (12/09/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-envers-customize-revision-entity"&gt;&lt;strong&gt;More related document (4)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity</guid><pubDate>Fri, 05 Aug 2011 20:10:17 GMT</pubDate><category>Nhibernate.Envers</category><category>Custom</category></item><item><title>Sql Server - Scramble / Mask database production data</title><description>&lt;p&gt;Sometimes you might need to test your product using some ‘production’ data to better simulate what users do with your software.&lt;/p&gt;  &lt;p&gt;There are situations in which having only your test database, with your own (well formed) test data is not enough: just think of a continuously growing database with frequent schema changes...you might likely have inconsistencies between the data as you upgrade it or unpredicted behaviors.&lt;/p&gt;  &lt;p&gt;If you want use a copy or a snapshot of a production database for test purposes, you should at least try to hide the sensitive data away (in a way that is really hard or impossible for your development team or anyone else that have access to the database to reconstruct them).&lt;/p&gt;  &lt;p&gt;As you can imagine the task here can be extremely difficult to accomplish and there might be some tools out there that can help you doing this job.&lt;/p&gt;  &lt;p&gt;If you do not want to invest in them a quick and dirty solution (it took me more or less 15 minutes to put it all together, and I’m not a SQL expert) can be writing some SQL scripts to modify what you consider to be your most sensitive data, leaving everything else intact. It doesn’t guarantee that all the sensitive data are hidden/changed because it relies on the code you write.&lt;/p&gt;  &lt;p&gt;The typical scenario is to modify the names and telephone numbers of some personal data records, but you can apply this technique to anything you want.&lt;/p&gt;  &lt;p&gt;Fist we need some functions to create test data, here you can use anything you want but I prefer something that generates data based on a prefix I can pass in; you can easily create functions that generate completely random data, but it will be hard to talk to your team and say something like: “ehi...check the person named ‘XWggTRDnnns’!”, a simple string concatenation does the job here.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4cec6735-6ca1-4f69-be54-3a8eb4d4db45" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;--concatenates a generic string and an incremental number
CREATE FUNCTION fn_GenerateText(@prefix varchar(255), @incr int)
RETURNS varchar(255)
AS
BEGIN
return @prefix + CONVERT(varchar(100),@incr)
END
GO&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Next we need to scan all our data tables and update the data we find there, here I decided to use a cursor (it’s not efficient but you can handle any type of key in this way, from guids to strings), so the idea is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;read each line of the table&lt;/li&gt;

  &lt;li&gt;generate some test data for each of the sensitive columns with text like: ‘name0’, ‘surname0’, etc... the number will be incremented for each line&lt;/li&gt;

  &lt;li&gt;update the data row with the given data for each of the columns you need to modify&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:7ed732a9-ab35-45e5-a545-0bcab4f9926c" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;-- a variable we use to generate incremental numbers
Declare @i int
set @i = 0

-- let's use a cursor, i don't know the data type of the key column
declare @id uniqueidentifier;
Declare id_cursor CURSOR
	FOR select AP_ID from dbo.PersonalData;
open id_cursor;
fetch next from id_cursor into @id;

WHILE @@FETCH_STATUS = 0
BEGIN

update  dbo.PersonalData
set 
AP_Note = dbo.fn_GenerateText('test', @i),
AP_FiscalCode = dbo.fn_GenerateText('fc', @i), -- or use a valid fiscal code generation routine here
AP_Surname = dbo.fn_GenerateText('surname', @i),
AP_Name = dbo.fn_GenerateText('name', @i),
AP_Phone = dbo.fn_GenerateText('t', @i),
AP_CellPhone = dbo.fn_GenerateText('c', @i)
Where AP_ID = @id 

-- increment the suffix and get the new data from the cursor
set @i = @i+1;
fetch next from id_cursor into @id;
END
CLOSE id_cursor;
DEALLOCATE id_cursor;
GO&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In the end we just cleanup the database from every support function we created:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d5de8880-8b28-4e97-a879-5d5843b2a2a3" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;DROP FUNCTION dbo.fn_GenerateText
GO&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As you can see this is a very quick solution and you will have to write some SQL code and manage the relations by yourself if needed, nonetheless once you have your scripts in place it’s a quite easy solution to use and maintain.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-prepare_sql-considerations-mapping-long-string-fields"&gt;NHibernate - prepare_sql and some considerations on mapping very long string fields&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/install-sql-server-express-with-your-application"&gt;Install SQL Server (Express) with your Application&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/sql-server-scramble-mask-database-production-data"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/sql-server-scramble-mask-database-production-data</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/sql-server-scramble-mask-database-production-data#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/sql-server-scramble-mask-database-production-data</guid><pubDate>Wed, 27 Jul 2011 17:59:49 GMT</pubDate><category>SQL</category><category>Scramble</category></item><item><title>Fetching collections with NHibernate, a mistake a I always do!</title><description>&lt;p&gt;I did it again! That’s why I’m writing this blog post...I do it almost every time and the main reason is: trying to optimize &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt; queries without thinking.&lt;/p&gt;  &lt;p&gt;As the title of the posts says the problem here is related to fetching the data of different collections attached to a single entity. To show you up the problem let’s first see the test domain, it is very simple:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:bcc9a39b-2139-4ed7-91b2-1835d47599d5" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class Post : Entity&amp;lt;int&amp;gt;
{
	protected Post()
	{
	}

	public Post(string slug)
	{
		Slug = slug;
		Categories = new List&amp;lt;Category&amp;gt;();
		Tags = new List&amp;lt;Tag&amp;gt;();
	}

	public string Slug { get; set; }

	public IList&amp;lt;Category&amp;gt; Categories { get; set; }

	public IList&amp;lt;Tag&amp;gt; Tags { get; set; }	
}

public class Category : Entity&amp;lt;int&amp;gt;
{
	public string Name { get; set; }
}

public class Tag : Entity&amp;lt;int&amp;gt;
{
	public string Name { get; set; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;I generated some test data consisting of a single post which has 2 categories and 2 tags associated to it.&lt;/p&gt;

&lt;p&gt;We want to query the Post object together with all it’s data, the first thing we can do is this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c82a353f-2fb5-4961-ac59-39fb08c75e36" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void NoFetch_Success()
{
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// look for a non existing revision
		using (var tx = s.BeginTransaction())
		{
			var p = s.CreateQuery(&amp;quot;from Post p where p.Slug = :slug&amp;quot;)
				.SetParameter(&amp;quot;slug&amp;quot;, &amp;quot;Slug&amp;quot;)
				.UniqueResult&amp;lt;Post&amp;gt;();

			tx.Commit();

			Assert.IsNotNull(p);
			Assert.AreEqual(2, p.Categories.Count);
			Assert.AreEqual(2, p.Tags.Count);
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Straightforward and simple; this thing produces 3 different queries, one for each kind of object:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:00903a7a-e0ed-4456-bcf7-862d1a5e2aa8" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;select post0_.Id as Id0_, post0_.Slug as Slug0_ from Post post0_ where post0_.Slug=@p0;@p0 = 'Slug' [Type: String (4000)]

SELECT categories0_.PostId as PostId1_, categories0_.Id as Id1_, categories0_.Id as Id1_0_, categories0_.Name as Name1_0_ FROM Category categories0_ WHERE categories0_.PostId=@p0;@p0 = 1 [Type: Int32 (0)]

SELECT tags0_.PostId as PostId1_, tags0_.Id as Id1_, tags0_.Id as Id2_0_, tags0_.Name as Name2_0_ FROM Tag tags0_ WHERE tags0_.PostId=@p0;@p0 = 1 [Type: Int32 (0)]
		&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The returned data are all correct.&lt;/p&gt;

&lt;p&gt;But we really have too many queries here and we want to optimize it a bit (in order to limit/prevent the impact of the n+1 selects problem), so in my optimization berserker fury I started using fetch joins to retrieve more data in a single pass and I wrote this query:&lt;/p&gt;

&lt;pre&gt;from Post p left join fetch p.Categories left join fetch p.Tags where p.Slug = :slug&lt;/pre&gt;

&lt;p&gt;which is an absolute mistake, because it generates duplicated data; let’s see some test code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4e780514-eac5-4df3-bc7f-2d9396983ce4" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void FetchALL_Failure()
{
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// look for a non existing revision
		using (var tx = s.BeginTransaction())
		{
			// try adding a: select distinct p 
			var p = s.CreateQuery(&amp;quot;from Post p left join fetch p.Categories left join fetch p.Tags where p.Slug = :slug&amp;quot;)
				.SetParameter(&amp;quot;slug&amp;quot;, &amp;quot;Slug&amp;quot;)
				.UniqueResult&amp;lt;Post&amp;gt;();

			tx.Commit();

			Assert.IsNotNull(p);
			Assert.AreEqual(2, p.Categories.Count); // &amp;lt;- big exception... we have 4 rows
			Assert.AreEqual(2, p.Tags.Count);
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;which produces 1 single query:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5544f78b-7878-41db-ae0e-b88ac70d189c" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;select post0_.Id as Id0_0_, categories1_.Id as Id1_1_, tags2_.Id as Id2_2_, post0_.Slug as Slug0_0_, categories1_.Name as Name1_1_, categories1_.PostId as PostId0__, categories1_.Id as Id0__, tags2_.Name as Name2_2_, tags2_.PostId as PostId1__, tags2_.Id as Id1__ from Post post0_ left outer join Category categories1_ on post0_.Id=categories1_.PostId left outer join Tag tags2_ on post0_.Id=tags2_.PostId where post0_.Slug=@p0;@p0 = 'Slug' [Type: String (4000)]&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;But the data are all wrong! In fact the Assert that should check for the correct numbers of categories are telling me that I have 4 rows inside that collection. I should have reminded earlier what the NHibernate documentation says about this situation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is possible to create a cartesian product by join fetching more than one collection in a query, so take care in this case. Join fetching multiple collection roles is also disabled for bag mappings. Note also that the &lt;tt&gt;fetch&lt;/tt&gt; construct may not be used in queries called using &lt;tt&gt;Enumerable()&lt;/tt&gt;. Finally, note that &lt;tt&gt;full join fetch&lt;/tt&gt; and &lt;tt&gt;right join fetch&lt;/tt&gt; are not meaningful. (Reference documentation, 13.3 Associations and joins)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that adding a ‘select distinct p’ will not help in this case.&lt;/p&gt;

&lt;p&gt;To fix this we need to have just one fetch join at each level of the hierarchy; we can write something like this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:44d2dc2f-c227-4384-b6f1-5de85dc58bbb" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;var p = s.CreateQuery(&amp;quot;from Post p left join fetch p.Categories where p.Slug = :slug&amp;quot;)
						.SetParameter(&amp;quot;slug&amp;quot;, &amp;quot;Slug&amp;quot;)
						.UniqueResult&amp;lt;Post&amp;gt;();&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This code will generate 2 queries (one to get the Post and the Categories and one to get the Tags) and the test will pass:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c7a5bcb3-7c8f-4d81-90ec-65e8733e52ed" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;select post0_.Id as Id12_0_, categories1_.Id as Id13_1_, post0_.Slug as Slug12_0_, categories1_.Name as Name13_1_, categories1_.PostId as PostId0__, categories1_.Id as Id0__ from Post post0_ left outer join Category categories1_ on post0_.Id=categories1_.PostId where post0_.Slug=@p0;@p0 = 'Slug' [Type: String (4000)]
		
SELECT tags0_.PostId as PostId1_, tags0_.Id as Id1_, tags0_.Id as Id14_0_, tags0_.Name as Name14_0_ FROM Tag tags0_ WHERE tags0_.PostId=@p0;@p0 = 1 [Type: Int32 (0)]&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;But...wait! .UniqueResult&amp;lt;T&amp;gt;() here is smart enough to hide us a fetch join side effect; if we use .List&amp;lt;T&amp;gt;() instead we will see it clearly: the fetch introduces ‘ghosts’ in our returned resultset; the data will be a combination of Posts and Categories fields, so for any single Post object we will have ‘n’ records (one for each Category bound to the Post) and NHibernate will output ‘n’ Post entities, all of them containing the same data.&lt;/p&gt;

&lt;p&gt;The solution here is pretty simple: just add the ‘distinct’ keyword to the select statement (or use the DistinctRootEntityTransformer), this way we are telling NHibernate to give us back all the unique instances of Post objects together with their Categories, here is the code:&lt;/p&gt;

&lt;p&gt;
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:19fe3c40-1ae7-4a6e-b379-9d5ee64a9b14" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void FetchSingleCollection_Distinct_Success()
{
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// look for a non existing revision
		using (var tx = s.BeginTransaction())
		{
			var p = s.CreateQuery(&amp;quot;select distinct p from Post p left join fetch p.Categories where p.Slug = :slug&amp;quot;)
				.SetParameter(&amp;quot;slug&amp;quot;, &amp;quot;Slug&amp;quot;)
				.UniqueResult&amp;lt;Post&amp;gt;();
			tx.Commit();

			Assert.IsNotNull(p);
			Assert.AreEqual(2, p.Categories.Count);
			Assert.AreEqual(2, p.Tags.Count);
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If I remind it well, there’s no need to use the distinct on the queries generated using Linq to NHibernate, because the provider does it for you.&lt;/p&gt;

&lt;p&gt;As usual here’s the test project for those who want to play with it:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:fbf49488-e8fb-4ef2-b02d-7491959571f0" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateTestsCollectionFetching.zip" target="_self"&gt;NHibernateTestsCollectionFetching.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;I am hoping, now that I’ve wrote it down, to not make the same mistake again &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_8.png" /&gt;...&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-order-strange-behavior-icriteria"&gt;NHibernate - Eager Fetch, Order By and a strange behavior with ICriteria&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday"&gt;The NHibernate Day is coming...this Saturday!&lt;/a&gt; (10/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/fetching-collections-nhibernate-mistake"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/fetching-collections-nhibernate-mistake</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/fetching-collections-nhibernate-mistake#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/fetching-collections-nhibernate-mistake</guid><pubDate>Tue, 19 Jul 2011 23:52:37 GMT</pubDate><category>NHibernate</category><category>Fetch</category></item><item><title>NHibernate.Envers - Querying - part 2</title><description>&lt;p&gt;In the previous articles of this series we saw how to initialize the environment to use &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt;.Envers and how to query it for getting information about the revisions it creates.&lt;/p&gt;  &lt;p&gt;It’s now time to focus on the methods that allows us to actually retrieve the different revisions details (such as the state of the whole entity at a given revision and similar) and the history of the modifications an object has been subject to.&lt;/p&gt;  &lt;p&gt;Once again our operation entry point is the &lt;strong&gt;IAuditReader&lt;/strong&gt; object, but this time we will use its &lt;strong&gt;CreateQuery&lt;/strong&gt;() method.&lt;/p&gt;  &lt;p&gt;CreateQuery() returns an &lt;strong&gt;AuditQueryCreator&lt;/strong&gt; object that exposes all the functions we need to perform search queries against the database; AuditQueryCreator provides a series of normal methods that specifies the entity we want to look for using a typeof(T) argument as their first parameter. It also exposes the generic version of those methods and we’ll focus our attention on those (because I hate to write down typeof() everywhere, if I can avoid it), the non generic functions are however very similar and their usage should be clear anyway.&lt;/p&gt;  &lt;p&gt;Each of these generic functions will return an &lt;strong&gt;IEntityAuditQuery&amp;lt;T&amp;gt;&lt;/strong&gt; object, these kind of objects work exactly like the usual NHibernate ICriteria API: we can add search criteria to filter out the results, order the results, perform pagination, add projections and so on.&lt;/p&gt;  &lt;p&gt;To get the results from an IEntityAuditQuery object we can use two methods:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;.Single() - it will return a single instance of the class representing the result, or an exception if more than one result is available. &lt;/li&gt;    &lt;li&gt;.Results() - it will return an enumeration of the class representing the result. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Actually we have tree different methods we can use to build up queries against our revision database tables, let’s see them in detail:&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;ForEntitiesAtRevision&amp;lt;T&amp;gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Method signature: IEntityAuditQuery&amp;lt;T&amp;gt; ForEntitiesAtRevision&amp;lt;T&amp;gt;(long revision)&lt;/p&gt;  &lt;p&gt;The query built using this method will ultimately return to us an IEnumerable&amp;lt;T&amp;gt; (or a single instance of T, or the result of a projection), the enumeration will contains all the instances of the specified type of entity at the requested revision; one or more filtering conditions can be added:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c76d3f58-a166-4ba8-9844-9efcb88ff6e8" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void ForEntitiesAtRevision()
{
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// look for a non existing revision
		using (var tx = s.BeginTransaction())
		{
			IAuditReader auditReader = s.Auditer();
			var rev = auditReader.CreateQuery().ForEntitiesAtRevision&amp;lt;Person&amp;gt;(1).Results();
			Assert.IsNotNull(rev);
			Assert.That(rev.Count() == 2);
			// print the data on the console
			Utils.PrintEntityList(rev);
			tx.Commit();
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;in line 10 I am asking to see all the entities of type Person at their revision number 1, given my test domain this is the result:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b85ec56d-42d6-457d-a0c9-47c2edffe836" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: plain; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;***** NHibernate.Envers.Tests.Querying.Test2.ForEntitiesAtRevision
System.Linq.Enumerable+WhereSelectListIterator`2[System.Collections.IDictionary,NHibernate.Envers.Tests.Domain.Person] , count: 2
Id: 1, Name: Jhon, Surname: Doe, Note: 
Games:
Id: 1, Name: g0, Type: , Rating: 0, Note: note0
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
---

Id: 2, Name: Jane, Surname: Doe, Note: 
Games:
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
Id: 3, Name: g2, Type: , Rating: 2, Note: note2
---
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As you can see I have two entity at that revision number; if I wanted to filter out the results I could have written something similar in line 10:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c8eb2806-820b-43ec-9919-28989a3ce901" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;var rev = auditReader.CreateQuery().ForEntitiesAtRevision&amp;lt;Person&amp;gt;(1)
.Add(AuditEntity.Property(&amp;quot;Name&amp;quot;).Eq(&amp;quot;Jhon&amp;quot;)).Results();&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ForRevisionsOf&amp;lt;T&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Method signature: IEntityAuditQuery&amp;lt;T&amp;gt; ForRevisionsOf&amp;lt;T&amp;gt;(bool includesDeleted)&lt;/p&gt;

&lt;p&gt;The query built using this method will ultimately return to us an IEnumerable&amp;lt;T&amp;gt; (or a single instance of T, or the result of a projection), the enumeration will contains all the instances of the specified type of entity; one or more filtering conditions can be added.&lt;/p&gt;

&lt;p&gt;If includesDeleted is set to true the revisions where the entities were deleted will be returned (the default value is ‘false’).&lt;/p&gt;

&lt;p&gt;The results of the query will be sorted in ascending order by the revision number, unless an order or projection is added.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:9c2bc20d-4c17-4897-b819-0fd62c97a1d7" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void ForRevisionsOf()
{
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// look for a non existing revision
		using (var tx = s.BeginTransaction())
		{
			IAuditReader auditReader = s.Auditer();
			var rev = auditReader.CreateQuery().ForRevisionsOf&amp;lt;Person&amp;gt;(true).Results();
			Assert.IsNotNull(rev);
			Utils.PrintEntityList(rev);
			tx.Commit();
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This is the ‘messy’ result:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:2ba1528a-08ed-4fbf-9544-017980d92b09" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: plain; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;***** NHibernate.Envers.Tests.Querying.Test2.ForRevisionsOf
System.Linq.Enumerable+WhereSelectListIterator`2[System.Collections.IDictionary,NHibernate.Envers.Tests.Domain.Person] , count: 4
Id: 1, Name: Jhon, Surname: Doe, Note: 
Games:
Id: 1, Name: g0, Type: , Rating: 0, Note: note0
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
---

Id: 2, Name: Jane, Surname: Doe, Note: 
Games:
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
Id: 3, Name: g2, Type: , Rating: 2, Note: note2
---

Id: 2, Name: Jane, Surname: Doe, Note: Modified
Games:
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
Id: 3, Name: g2, Type: , Rating: 2, Note: note2
---

Id: 1, Name: Jhon, Surname: Doe, Note: Modified
Games:
Id: 1, Name: g0, Type: , Rating: 0, Note: note0
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
---
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;To be honest this function is not so useful without adding some filters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ForHistoryOf&amp;lt;TEntity&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Method signature: IEntityAuditQuery&amp;lt;IRevisionEntityInfo&amp;lt;TEntity, DefaultRevisionEntity&amp;gt;&amp;gt; ForHistoryOf&amp;lt;TEntity&amp;gt;(bool includesDeleted)&lt;/p&gt;

&lt;p&gt;The query built using this method will ultimately return to us an IEnumerable&amp;lt;IRevisionEntityInfo&amp;lt;TEntity, DefaultRevisionEntity&amp;gt;&amp;gt; (or a single instance of IRevisionEntityInfo&amp;lt;TEntity, DefaultRevisionEntity&amp;gt;, or the result of a projection), the enumeration will contains all the revision information of the instances of the specified type of entity; one or more filtering conditions can be added.&lt;/p&gt;

&lt;p&gt;If includesDeleted is set to true the revisions where the entities were deleted will be returned (the default value is ‘false’).&lt;/p&gt;

&lt;p&gt;The results of the query will be sorted in ascending order by the revision number, unless an order or projection is added.&lt;/p&gt;

&lt;p&gt;This function is extremely useful because you can obtain detailed information about the revision number, the timestamp and the kind of operation (added, modified, deleted) alongside with the snapshot of the entity itself; all these information are available through an implementation of the IRevisionEntityInfo&amp;lt;TEntity, TRevisionEntity&amp;gt; interface.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:adfb57fe-5e17-434f-bc6d-1b13ff72fa44" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void ForHistoryOf()
{
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// look for a non existing revision
		using (var tx = s.BeginTransaction())
		{
			IAuditReader auditReader = s.Auditer();
			var rev = auditReader.CreateQuery().ForHistoryOf&amp;lt;Person&amp;gt;(true).Results();
			Assert.IsNotNull(rev);
			Utils.PrintRevisionInfoList(rev);
			tx.Commit();
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;And here’s the results I get with my domain:&lt;/p&gt;

&lt;p&gt;
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:fe13d9c1-e848-482b-833f-92b808254f04" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: plain; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;***** NHibernate.Envers.Tests.Querying.Test2.ForHistoryOf
System.Linq.Enumerable+&amp;lt;CastIterator&amp;gt;d__aa`1[NHibernate.Envers.Query.IRevisionEntityInfo`2[NHibernate.Envers.Tests.Domain.Person,NHibernate.Envers.DefaultRevisionEntity]] , count: 4
Rev=1 Timestamp=2011-07-13T14:19:32.1470000 Op=Added
Id: 1, Name: Jhon, Surname: Doe, Note: 
Games:
Id: 1, Name: g0, Type: , Rating: 0, Note: note0
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
---

Rev=1 Timestamp=2011-07-13T14:19:32.1470000 Op=Added
Id: 2, Name: Jane, Surname: Doe, Note: 
Games:
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
Id: 3, Name: g2, Type: , Rating: 2, Note: note2
---

Rev=2 Timestamp=2011-07-13T14:19:32.1630000 Op=Modified
Id: 2, Name: Jane, Surname: Doe, Note: Modified
Games:
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
Id: 3, Name: g2, Type: , Rating: 2, Note: note2
---

Rev=2 Timestamp=2011-07-13T14:19:32.1630000 Op=Modified
Id: 1, Name: Jhon, Surname: Doe, Note: Modified
Games:
Id: 1, Name: g0, Type: , Rating: 0, Note: note0
Id: 2, Name: g1, Type: , Rating: 1, Note: note1
---
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;With this post we have covered pretty much all the basic functionalities that NHibernate.Envers offers us to query the revision database tables, take a look at the new examples in the test solution if you want to see it in action live:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:d335d5e2-b3b7-46ad-b3e0-1ede4bec1403" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateTestsEnvers3.zip" target="_self"&gt;NHibernateTestsEnvers3.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Cya next.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-quick-introduction"&gt;NHibernate.Envers - a quick introduction&lt;/a&gt; (06/07/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-1"&gt;NHibernate.Envers - Querying - part 1&lt;/a&gt; (06/10/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity"&gt;NHibernate.Envers - Customize the Revision Entity&lt;/a&gt; (08/05/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-envers-querying-part-2"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-2</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-2#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-2</guid><pubDate>Wed, 13 Jul 2011 21:08:30 GMT</pubDate><category>Nhibernate.Envers</category><category>Query</category></item><item><title>Linq to NHibernate - String.Equals with StringComparison option</title><description>&lt;p&gt;
	A couple of days ago &lt;a href="http://blogs.ugidotnet.org/matteomigliore/Default.aspx"&gt;Matteo Migliore&lt;/a&gt; asked me a question about why String.Equals(string, StringComparison) was not supported in Linq to &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt; while it was in Entity Framework.&lt;/p&gt;
&lt;p&gt;
	My first answer was that the Linq to NHibernate implementation might have some missing and, if it was not supported, we can extend the provider to add support for missing functions if we know how to translate them in SQL (I even wrote a couple of blog posts in the past about how to extend the provider to add functions to it: &lt;a href="http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception"&gt;NHibernate 3 - Extending the Linq Provider to fix some System.NotSupportedException&lt;/a&gt; and &lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
	With those things in mind we have all the tools to cover the gaps and implement what we need; basically we want to &amp;lsquo;force&amp;rsquo; a case insensitive string comparison at database level using something like this:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:670923b9-b965-42ac-9f25-49a656c4dbec" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;var res = Session.Query&lt;table1&gt;().Where(t =&amp;gt; t.T1.Equals(&amp;quot;test&amp;quot;, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();&lt;/table1&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	I&amp;rsquo;m not a true SQL expert, but when it comes to string comparison a lot of database stuff kicks in (like collations and such) and every database can have a different default behavior to compare strings (by default it should be case insensitive, but I&amp;rsquo;m not really sure of this...so DBA experts can say their own here); aside of that, I think that the default behavior ORMs have is to rely on what the database does.&lt;/p&gt;
&lt;p&gt;
	Matteo confirmed this last statement looking at the SQL expression that Entity Framework 4 generated for his test domain when calling Equals passing in an xxxIgnoreCase StringComparison, in both case (with and without the parameter) EF4 generated this SQL statement:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:cecbed6a-d196-42f5-afe1-e391a0ad819b" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;SELECT 
[Extent1].[Id] AS [Id], 
[Extent1].[FirstName] AS [FirstName], 
[Extent1].[LastName] AS [LastName]
FROM [dbo].[Customers] AS [Extent1]
WHERE N&amp;#39;temp&amp;#39; = [Extent1].[FirstName]&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	As you can see this is totally dependent on the database and it can ignore our will to perform a case insensitive equals (due to the database collation for example)...so it&amp;rsquo;s not a &amp;lsquo;perfect&amp;rsquo; translation of what the user wanted to do and it may introduce subtle bugs in your code.&lt;/p&gt;
&lt;p&gt;
	Linq to NHibernate raises us a &amp;lsquo;warning&amp;rsquo; saying that this kind of operation is not supported (intentionally or not...we&amp;rsquo;ll never know...), so the first step is to extend the provider to support this kinds of equals:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b6cd5a70-2101-4a9b-8204-75a23e01b286" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class EqualsStringGenerator : BaseHqlGeneratorForMethod
{
	public EqualsStringGenerator()
	{
		SupportedMethods = new[]
		                   	{
		                   		ReflectionHelper.GetMethodDefinition&lt;string&gt;(x =&amp;gt; x.Equals(null, StringComparison.CurrentCulture))
		                   	};
	}

	public override HqlTreeNode BuildHql(MethodInfo method, Expression targetObject, ReadOnlyCollection&lt;expression&gt; arguments, HqlTreeBuilder treeBuilder, IHqlExpressionVisitor visitor)
	{
		return treeBuilder.Equality(
			visitor.Visit(targetObject).AsExpression(),
			visitor.Visit(arguments[0]).AsExpression());
	}
}

public class ExtendedLinqtoHqlGeneratorsRegistry : DefaultLinqToHqlGeneratorsRegistry
{
	public ExtendedLinqtoHqlGeneratorsRegistry()
	{
		this.Merge(new EqualsStringGenerator());
	}
}&lt;/expression&gt;&lt;/string&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	You can read my previous articles for the details, however the important thing here is that we are adding a new supported method (the overloaded version of String.Equals) and how we translate it to SQL in the BuildHql() function: we are basically ignoring the second parameter - the StringComparison - and we are constructing a normal Equality between two operands.&lt;/p&gt;
&lt;p&gt;
	This extension makes Linq to NHibernate operate exactly as EF4 does and will generate a similar kind of SQL query (it completely relies on the database for the case sensitivity or not of the operation).&lt;/p&gt;
&lt;p&gt;
	But we can do the things a little bit better and add support for forcing a case insensitive equals even if case sensitive collations are used for your database, making Linq-To-NHibenrate a little bit smarter. The trick is simple: add a SQL LOWER() call to both the sides of the equality operator:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b28e7886-024b-4361-bdad-a0b4c0b6c16f" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class EqualsStringGenerator : BaseHqlGeneratorForMethod
{
	public EqualsStringGenerator()
	{
		SupportedMethods = new[]
		                   	{
		                   		ReflectionHelper.GetMethodDefinition&lt;string&gt;(x =&amp;gt; x.Equals(null, StringComparison.CurrentCulture))
		                   	};
	}

	public override HqlTreeNode BuildHql(MethodInfo method, Expression targetObject, ReadOnlyCollection&lt;expression&gt; arguments, HqlTreeBuilder treeBuilder, IHqlExpressionVisitor visitor)
	{
		StringComparison comparison = (StringComparison)(arguments[1].As&lt;constantexpression&gt;().Value);
		if (comparison == StringComparison.CurrentCultureIgnoreCase ||
		    comparison == StringComparison.InvariantCultureIgnoreCase ||
		    comparison == StringComparison.OrdinalIgnoreCase)
		{
			return treeBuilder.Equality(
				treeBuilder.MethodCall(&amp;quot;lower&amp;quot;, new[] { visitor.Visit(targetObject).AsExpression() }),
				treeBuilder.MethodCall(&amp;quot;lower&amp;quot;, new[] { visitor.Visit(arguments[0]).AsExpression() }));
		}
		return treeBuilder.Equality(
			visitor.Visit(targetObject).AsExpression(),
			visitor.Visit(arguments[0]).AsExpression());
	}
}&lt;/constantexpression&gt;&lt;/expression&gt;&lt;/string&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	Using the treeBuilder.MethodCall(&amp;ldquo;lower&amp;rdquo;, ...) we are adding the desired call, the good thing is that this will be database independent (as long as your database support this function, otherwise you can extend the NHibernate dialect for your database and add support for it); this is what NHibernate now generates for my test domain:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:65cd6aa9-e31c-412b-a37f-c43642fc2326" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;NHibernate: select TOP (@p0)  table1x0_.ID as ID7_, table1x0_.T1 as T2_7_, table1x0_.T2 as T3_7_, table1x0_.GuidTest as GuidTest7_, table1x0_.Tb2 as Tb5_7_, table1x0_.Tb3 as Tb6_7_ from TABLE1 table1x0_ where lower(table1x0_.T1)=lower(@p1);@p0 = 1 [Type: Int32 (0)], @p1 = &amp;#39;test&amp;#39; [Type: String (4000)]&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	This is far from being an optimized solution and we are not translating correctly all the behaviors of this overloaded version of the string comparison, nonetheless is a good starting point for it.&lt;/p&gt;
&lt;p&gt;
	How to force then a case sensitive string comparison ? One thing that comes into my mind is to extend the provider once again and to cast both the operands to a binary type, in this way the comparison will be over array of bytes and it will be &amp;lsquo;sensitive&amp;rsquo; by default...but I&amp;rsquo;ll leave this to you &lt;img alt="Open-mouthed smile" class="wlEmoticon wlEmoticon-openmouthedsmile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_7.png" style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" /&gt;.&lt;/p&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-linq-dynamic-filtering-lambda-expressions"&gt;NHibernate Linq provider: dynamic filtering using lambda expressions&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception"&gt;NHibernate 3 - Extending the Linq Provider to fix some System.NotSupportedException&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter"&gt;Linq to NHibernate: how to query on a property without setter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/linq-to-nhibernate-string.equals-with-stringcomparison-option"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/linq-to-nhibernate-string.equals-with-stringcomparison-option</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/linq-to-nhibernate-string.equals-with-stringcomparison-option#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/linq-to-nhibernate-string.equals-with-stringcomparison-option</guid><pubDate>Tue, 14 Jun 2011 16:55:17 GMT</pubDate><category>Nhibernate</category><category>Linq</category><category>Equals</category></item><item><title>NHibernate.Envers - Querying - part 1</title><description>&lt;p&gt;We’ve already saw how to setup NHibernate.Envers, how to configure and how to create the schema for it (&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-quick-introduction"&gt;NHibernate.Envers - a quick introduction&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;To query for our revision entities we need to use the &lt;strong&gt;IAuditReader&lt;/strong&gt; interface, we have two ways to obtain it:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Using the AuditReaderFactory.Get(ISession) method.  &lt;li&gt;Using the ISession.Auditer() extension method. &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Once we have the object in place we can start querying for data. There isn’t many documentation around (here’s the only link I was able to find and it’s from the original Java project: &lt;a href="http://docs.jboss.org/envers/docs/index.html"&gt;Hibernate Envers - Easy Entity Auditing&lt;/a&gt;); so your best bet is to build the documentation file from the source project or to download the source code itself and look at the comments there.&lt;/p&gt; &lt;p&gt;As you saw in the previous article NHibernate.Envers approaches the entity version problem defining a unique master table to hold a global revision number to which attach the history of the entities that are part of a single revision.&lt;/p&gt; &lt;p&gt;It creates a REVINFO table and maps it over a DefaultRevisionEntity class.&lt;/p&gt; &lt;p&gt;In this article we’ll focus on getting information about the Revision object, this is the class that actually identifies the current revision number and revision timestamp (it can be customized as we’ll see in a next article of this series).&lt;/p&gt; &lt;p&gt;Let’s see each function in detail (I’ll just look at the generic version, because I hate to write typeof() everywhere):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;T GetCurrentRevision&amp;lt;T&amp;gt;(bool persist)&lt;/strong&gt; &lt;/p&gt; &lt;p&gt;“Gets an instance of the current revision entity, to which any entries in the audit tables will be bound. Please note the if persist is false, and no audited entities are modified in this session, then the obtained revision entity instance won't be persisted. If persist is true, the revision entity instance will always be persisted, regardless of whether audited entities are changed or not”.&lt;/p&gt; &lt;p&gt;This very simple test (assuming we have an empty database) will give you an idea of how it work:&lt;/p&gt; &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a9bf3ee6-2c1c-4b3f-839f-3c1a4ec4c974" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;// assuming an empty database
using (ISession s = _nh.SessionFactory.OpenSession())
{
	using (var tx = s.BeginTransaction())
	{
		IAuditReader auditReader = s.Auditer();
		DefaultRevisionEntity o = auditReader.GetCurrentRevision&amp;lt;DefaultRevisionEntity&amp;gt;(false);
		tx.Commit();
		Assert.IsNotNull(o);
		// it's transient
		Assert.AreEqual(0, o.Id);
	}
	using (var tx = s.BeginTransaction())
	{
		IAuditReader auditReader = s.Auditer();
		DefaultRevisionEntity o = auditReader.GetCurrentRevision&amp;lt;DefaultRevisionEntity&amp;gt;(true);
		tx.Commit();
		Assert.IsNotNull(o);
		// it's persisted
		Assert.AreEqual(1, o.Id);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;Looking at the returned class you can have information about the Revision to which your (current or next) changes will be attached to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;T FindRevision&amp;lt;T&amp;gt;(long revision)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gets the RevisionEntity at the given revision number, if the revision doesn’t exist a ‘RevisionDoesNotExistException’ will be raised.&lt;/p&gt;
&lt;p&gt;The following tests will shot its usage:&lt;/p&gt;
&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:efc1ac60-69e2-435b-b883-36f15aa5cb83" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void FindRevision_DoesNotExists()
{
	// assuming an empty database
	Assert.Throws&amp;lt;RevisionDoesNotExistException&amp;gt;(() =&amp;gt;
	{
		using (ISession s = _nh.SessionFactory.OpenSession())
		{
			// look for a non existing revision
			using (var tx = s.BeginTransaction())
			{
				IAuditReader auditReader = s.Auditer();
				var rev = auditReader.FindRevision&amp;lt;DefaultRevisionEntity&amp;gt;(1);
				Assert.IsNotNull(rev);
				tx.Commit();
			}
		}
	});
}

[Test]
public void FindRevision_Success()
{
	// assuming an empty database
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// create a revision
		using (var tx = s.BeginTransaction())
		{
			// create a person
			Person p = new Person(&amp;quot;Jhon&amp;quot;, &amp;quot;Doe&amp;quot;);
			s.SaveOrUpdate(p);
			tx.Commit();
		}
		using (var tx = s.BeginTransaction())
		{
			IAuditReader auditReader = s.Auditer();
			var rev = auditReader.FindRevision&amp;lt;DefaultRevisionEntity&amp;gt;(1);
			Assert.IsNotNull(rev);
			tx.Commit();
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;In the first one you will get an exception when asking for a revision that does not exists, in the second you will properly get the information you requested in the form of the default revision entity class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDictionary&amp;lt;long, T&amp;gt; FindRevisions&amp;lt;T&amp;gt;(IEnumerable&amp;lt;long&amp;gt; revisions)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“Find a map of revisions using the revision numbers specified”. If the revisions do not exist an empty dictionary will be returned. If you ask for a revision number that does not exist, it will just not be returned in the resulting dictionary (no exception will be thrown).&lt;/p&gt;
&lt;p&gt;The following test cover the case of requesting a non existent revision:&lt;/p&gt;
&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4bd7d502-ce77-4945-88e5-97e468c9adcd" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[Test]
public void FindRevisions_NonExistentRevision()
{
	using (ISession s = _nh.SessionFactory.OpenSession())
	{
		// create a revision
		using (var tx = s.BeginTransaction())
		{
			// create a person
			Person p = new Person(&amp;quot;Jhon&amp;quot;, &amp;quot;Doe&amp;quot;);
			s.SaveOrUpdate(p);
			tx.Commit();
		}
		// look for a non existent revision
		using (var tx = s.BeginTransaction())
		{
			IAuditReader auditReader = s.Auditer();
			var rev = auditReader.FindRevisions&amp;lt;DefaultRevisionEntity&amp;gt;(new long[] { 1, 2 });
			Assert.IsNotNull(rev);
			Assert.AreEqual(1, rev.Count);
			Assert.AreEqual(1, rev[1].Id);
			tx.Commit();
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DateTime GetRevisionDate(long revision)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“Get the date, at which a revision was created”. The precision is database and mapping specific; the default mapping uses ‘timestamp’ as its &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt; type (this will include the milliseconds in the date and we all know the problems with the milliseconds rounding in some database engines). If you want another behavior you will need to customize the default revision entity class (more in a next post).&lt;/p&gt;
&lt;p&gt;If the revision doesn’t exist a ‘RevisionDoesNotExistException’ will be raised.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;long GetRevisionNumberForDate(DateTime date)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gets the revision number of the highest revision which was created on or before the given date. As you can imagine this function is pretty useless if you do not know the exact date (up to the milliseconds).&lt;/p&gt;
&lt;p&gt;If the revision doesn’t exist a ‘RevisionDoesNotExistException’ will be raised.&lt;/p&gt;
&lt;p&gt;Enough for today, the next time we’ll take a look at more specific queries that will involve our tracked entities too.&lt;/p&gt;
&lt;p&gt;You can get the actual same source code here, it will contain one or more tests for each of the functions reported before:&lt;/p&gt;
&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:c93b7eb7-420c-4108-b773-d559a4b985a9" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateTestsEnvers2.zip" target="_self"&gt;NHibernateTestsEnvers2.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-quick-introduction"&gt;NHibernate.Envers - a quick introduction&lt;/a&gt; (06/07/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-2"&gt;NHibernate.Envers - Querying - part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity"&gt;NHibernate.Envers - Customize the Revision Entity&lt;/a&gt; (08/05/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-envers-querying-part-1"&gt;&lt;strong&gt;More related document (23)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-1</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-1#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-1</guid><pubDate>Fri, 10 Jun 2011 19:41:58 GMT</pubDate><category>Nhibernate</category><category>Nhibernate.Envers</category></item><item><title>NHibernate.Envers - a quick introduction</title><description>&lt;p&gt;Recently I had the need to introduce a sort of ‘Entity Versioning’ in a portion of my applications, the whole data access strategy was realized using &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt; + XML / &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; mappings. &lt;/p&gt;  &lt;p&gt;I started the thing introducing an poor auditing system using a listener and the pre-insert and pre-update events. This will allow me to track who created a record and the last one that modified it (and when) in an easy way (you can find some examples on this technique in a lot of blog posts around, just look for NHibernate + auditing in any web search engine).&lt;/p&gt;  &lt;p&gt;The afore mentioned strategy is enough for the great part of my domain, but then I had to move a step forward and not only log who make the action, but also I needed to store the state of the entity at the time it was modified (being it updated or deleted), in short I need the whole history of the changes on that entity. My first thought was to extend my original approach and save the entity in another version of the previous listener...huge work to do!&lt;/p&gt;  &lt;p&gt;Then I reminded &lt;a href="http://fabiomaulo.blogspot.com/"&gt;Fabio Maulo&lt;/a&gt; talking about the release of NHibernate.Envers at one of the last UgiAlt workshops I attended to...Gotcha! Let’s take a look at it and see if it fits my needs.&lt;/p&gt;  &lt;p&gt;Download the whole source code at &lt;a href="https://bitbucket.org/RogerKratz/nhibernate.envers"&gt;https://bitbucket.org/RogerKratz/nhibernate.envers&lt;/a&gt;, you need to if you use the latest bits of NHibernate 3.2 because you will need to update the referenced libraries and recompile the project.&lt;/p&gt;  &lt;p&gt;Let’s start considering this very simple domain:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4519711c-7422-4877-aa46-1c74158990bd" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: vb; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class Person : Entity&amp;lt;int&amp;gt;
{
	protected Person()
	{
	}

	public Person(string name, string surname)
	{
		Games = new List&amp;lt;Game&amp;gt;();
		Name = name;
		Surname = surname;
	}

	public string Name { get; set; }

	public string Surname { get; set; }

	public string Note { get; set; }
	
	public IList&amp;lt;Game&amp;gt; Games { get; set; }

	public override string ToString()
	{
		StringBuilder sb = new StringBuilder();
		sb.AppendFormat(&amp;quot;Id: {2}, Name: {0}, Surname: {1}, Note: {3}\n&amp;quot;, Name, Surname, Id, Note);
		sb.AppendLine(&amp;quot;Games:&amp;quot;);
		foreach (var g in Games)
			sb.AppendLine(g.ToString());
		sb.AppendLine(&amp;quot;---&amp;quot;);
		return sb.ToString();
	}
}

public class Game : Entity&amp;lt;int&amp;gt;
{
	public string Name { get; set; }

	public string Type { get; set; }

	public int Rating { get; set; }

	public string Note { get; set; }

	public override string ToString()
	{
		return string.Format(&amp;quot;Id: {3}, Name: {0}, Type: {1}, Rating: {2}, Note: {4}&amp;quot;, Name, Type, Rating, Id, Note);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;here we have a person and the games he plays; both the classes are mapped as individual entities using ConfORM.&lt;/p&gt;

&lt;p&gt;To keep the post short I’ll skip the mapping initialization, so we can move to the interesting bits: how to setup NHibernate.Envers. You have several ways to set it up, the easiest (and more flexible) one is configuring it by code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Declare FluentConfiguration object (which is nothing more than an IMetaDataProvider). &lt;/li&gt;

  &lt;li&gt;Call its Audit() or Audit&amp;lt;&amp;gt;() methods to decide which entities you want to track. &lt;/li&gt;

  &lt;li&gt;Attach it to the NHibernate Configuration object calling its IntegrateWithEnvers extension method. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s how it looks like:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d6e2a299-7e17-411d-8a6e-d2084179823d" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: vb; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;var enversConf = new NHibernate.Envers.Configuration.Fluent.FluentConfiguration();

// audit the whole domain
// enversConf.Audit(GetDomainEntities());

enversConf.Audit&amp;lt;Person&amp;gt;();
enversConf.Audit&amp;lt;Game&amp;gt;();

Configure.IntegrateWithEnvers(enversConf);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;If we ask NHibernate to generate the schema for us this is a picture of what we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEnversSampleSchema_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="NHibernateEnversSampleSchema" border="0" alt="NHibernateEnversSampleSchema" src="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEnversSampleSchema_thumb.png" width="544" height="446" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt; - domain model + auditing tables database schema&lt;/p&gt;

&lt;p&gt;As you can see the one-to-many relation between Person and Games has been correctly transformed in a many-to-many when it comes to track objects history.&lt;/p&gt;

&lt;p&gt;By default we’ll have a main table named REVINFO that will assign a unique revision number to every version of the object we track, we’ll have an history table for every entity and for every relation between objects (these tables use the suffix _AUD). all those tables maintain a relation with the main REVINFO that provide the timestamp of the operation; moreover another column is added to every history table (named REVTYPE) that states the type of operation performed on the object (update, delete, etc...).&lt;/p&gt;

&lt;p&gt;NHibernate.Envers allows you to change the default naming of tables and suffixes with a series of new properties you can specify in the NHibernate configuration section, here are some:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nhibernate.envers.audit_table_prefix - defaults to String.Empty&lt;/li&gt;

  &lt;li&gt;nhibernate.envers.audit_table_suffix - defaults to “_AUD”&lt;/li&gt;

  &lt;li&gt;nhibernate.envers.revision_field_name - defaults to “REV”&lt;/li&gt;

  &lt;li&gt;nhibernate.envers.revision_type_field_name - default to “REVTYPE”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other interesting options are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nhibernate.envers.default_catalog - defaults to String.Empty, allows you to set a specific catalog for the auditing tables.&lt;/li&gt;

  &lt;li&gt;nhibernate.envers.default_schema - defaults to String.Empty, allows you to set a specific schema for the auditing tables.&lt;/li&gt;

  &lt;li&gt;nhibernate.envers.store_data_at_delete - defaults to false, if set to true all the data of the removed entity will be saved when you remove it (instead of having just a marker with all null values).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enough for today, the next time we’ll see some methods to retrieve the history of the changes related to the tracked entities.&lt;/p&gt;

&lt;p&gt;You can grab the actual sample code here: 
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:5aa3ebfb-f8b1-4e84-ac43-e88a996229c2" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateTestsEnvers1.zip" target="_self"&gt;NHibernateTestsEnvers1.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I’m always amazed to see that every time I have a problem related to the data access strategy and what’s around it, NHibernate always seems to something that, if not fully solve your problems, can point you in right direction to customize it and have your job done.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-1"&gt;NHibernate.Envers - Querying - part 1&lt;/a&gt; (06/10/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-querying-part-2"&gt;NHibernate.Envers - Querying - part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity"&gt;NHibernate.Envers - Customize the Revision Entity&lt;/a&gt; (08/05/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-envers-quick-introduction"&gt;&lt;strong&gt;More related document (23)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-envers-quick-introduction</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-envers-quick-introduction#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-envers-quick-introduction</guid><pubDate>Tue, 07 Jun 2011 19:29:10 GMT</pubDate><category>Nhibernate</category><category>Nhibernate.Envers</category></item><item><title>Save time stopping the build process (in case of errors)</title><description>&lt;p&gt;I don’t remind where I originally got this Tip, but it’s proven to be very useful to save lots of time when you have very big solution and your projects are failing to build.&lt;/p&gt;  &lt;p&gt;I am reporting it here as a note to myself because I really missed it when I had to install fresh copies of Visual Studio on new machines.&lt;/p&gt;  &lt;p&gt;It’s basically a simple piece of macro you can add to the Visual Studio ‘EnvironmentEvents’ module:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Go to Tools -&amp;gt; Macro -&amp;gt; Macros IDE...&lt;/li&gt;    &lt;li&gt;Look for MyMacros \ EnvironmentEvents in the project explorer tree.&lt;/li&gt;    &lt;li&gt;Add this piece of code inside the module:     &lt;br /&gt;      &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:04be996d-b28a-4206-a1a5-9f9fac8081ef" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: vb; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;' A project failed to compile, so cancel the build and beep
Private Sub BuildEvents_OnBuildProjConfigDone(ByVal Project As String, ByVal ProjectConfig As String, ByVal Platform As String, ByVal SolutionConfig As String, ByVal Success As Boolean) Handles BuildEvents.OnBuildProjConfigDone
   If Success = False Then
       DTE.ExecuteCommand(&amp;quot;Build.Cancel&amp;quot;)
       Beep()
       Threading.Thread.Sleep(250)
       Beep()
       Threading.Thread.Sleep(250)
       Beep()
       Threading.Thread.Sleep(250)
       Beep()
   End If
End Sub&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;Enjoy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m sad I cannot provide the original author with the right credits for it, if any have that info please let me know and I’ll update this post.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/save-time-stopping-build-process-case-errors"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/save-time-stopping-build-process-case-errors</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/save-time-stopping-build-process-case-errors#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/save-time-stopping-build-process-case-errors</guid><pubDate>Fri, 03 Jun 2011 17:05:28 GMT</pubDate><category>Visual studio</category><category>Tip</category><category>Stop</category><category>Build</category></item><item><title>Report &amp; Slides from “Community Tour 2011 - CMS Edition”</title><description>&lt;p&gt;
	Some days ago the .Net User Group I belong to (&lt;a href="http://www.dotnetmarche.org/"&gt;DotNetMarche&lt;/a&gt;, for those who do not know) organized an event that was part of the &amp;ldquo;Microsoft &amp;amp; Community Tour 2011&amp;rdquo;. We had a multi-track workshop event that was entirely devoted to the web development using some of the major CMS application frameworks we have around today.&lt;/p&gt;
&lt;p&gt;
	In the main track we had the occasion to talk about one the lasted addition to the landscape: Orchard.&lt;/p&gt;
&lt;p&gt;
	Due to work issues &lt;a href="http://www.tostring.it/"&gt;Ugo Lattanzi&lt;/a&gt;, that was scheduled to host a session about developing a module in Orchard couldn&amp;rsquo;t be with us, so &lt;a href="http://dotnetcampania.org/blogs/michele/default.aspx"&gt;Michele Aponte&lt;/a&gt; and I step up and covered his session too.&lt;/p&gt;
&lt;p&gt;
	The result was a good workshop with a nice attendance that seemed to be very interested by the potentiality of this &amp;lsquo;new&amp;rsquo; application framework.&lt;/p&gt;
&lt;p&gt;
	Here are the slides of my &amp;ldquo;1 session and a half&amp;rdquo;, the event was in Italian language and the same is for the slides (sorry for my English readers):&lt;/p&gt;
&lt;div id="__ss_8157802" style="width: 425px"&gt;
	&lt;strong style="margin: 12px 0px 4px; display: block"&gt;&lt;a href="http://www.slideshare.net/giorgettialessandro/dnm19-sessione1-orchard-primo-impatto" title="DNM19 Sessione1 Orchard Primo Impatto (ita)"&gt;DNM19 Sessione1 Orchard Primo Impatto (ita)&lt;/a&gt;&lt;/strong&gt; &lt;iframe frameborder="0" height="355" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/8157802" width="425"&gt;&lt;/iframe&gt;
	&lt;div style="padding-bottom: 12px; padding-left: 0px; padding-right: 0px; padding-top: 5px"&gt;
		View more &lt;a href="http://www.slideshare.net/"&gt;presentations&lt;/a&gt; from &lt;a href="http://www.slideshare.net/giorgettialessandro"&gt;Alessandro Giorgetti&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="__ss_8157799" style="width: 425px"&gt;
	&lt;strong style="margin: 12px 0px 4px; display: block"&gt;&lt;a href="http://www.slideshare.net/giorgettialessandro/dnm19-sessione2-orchard-temi-e-layout-ita" title="DNM19 Sessione2 Orchard Temi e Layout (Ita)"&gt;DNM19 Sessione2 Orchard Temi e Layout (Ita)&lt;/a&gt;&lt;/strong&gt; &lt;iframe frameborder="0" height="355" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/8157799" width="425"&gt;&lt;/iframe&gt;
	&lt;div style="padding-bottom: 12px; padding-left: 0px; padding-right: 0px; padding-top: 5px"&gt;
		View more &lt;a href="http://www.slideshare.net/"&gt;presentations&lt;/a&gt; from &lt;a href="http://www.slideshare.net/giorgettialessandro"&gt;Alessandro Giorgetti&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	Sadly I don&amp;rsquo; have any photo about the &amp;ldquo;Fish based&amp;rdquo; Community Dinner we had after the event...it was funny as usual with a lot of crazy guys (looking at the face of the waiter when he asked us if we wanted to end the dinner with a coffee and we ordered another first dish instead was priceless!).&lt;/p&gt;
&lt;p&gt;
	See you - live - at the next event.&lt;/p&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/19th-dotnetmarche-workshop-community-tour-2011-cms-edition"&gt;19th DotNetMarche Workshop “Community Tour 2011 - CMS Edition”&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET&lt;/a&gt; (03/09/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/report-slides-from-community-tour-2011-cms-edition"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/report-slides-from-community-tour-2011-cms-edition</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/report-slides-from-community-tour-2011-cms-edition#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/report-slides-from-community-tour-2011-cms-edition</guid><pubDate>Wed, 01 Jun 2011 16:25:41 GMT</pubDate><category>Orchard</category><category>DotNetMarche</category><category>Workshop</category></item><item><title>19th DotNetMarche Workshop “Community Tour 2011 - CMS Edition”</title><description>&lt;p&gt;In a few days the 19th &lt;a href="http://www.dotnetmarche.org/"&gt;DotNetMarche&lt;/a&gt; workshop will take place, this time we will have a sort of multi-track event and we will try to show you some of the features that the major .NET CMS Platforms have to offer: we will tracks on Orchard, Microsoft SharePoint, DotNetNuke and Open Web Studio. &lt;/p&gt;  &lt;p&gt;All the tracks will be in Italian language, you know...DotNetMarche is a local user group after all &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-smile_2_2.png" /&gt;. We will maybe have support to stream one of the track (once again thanks to the guys at Ce.S.M.I. at the Università Politecnica delle Marche; Giuliano, you rock even with a twisted ankle!), so stay tuned on our twitter accounts and the homepage of the website for any announcement in that direction.&lt;/p&gt;  &lt;p&gt;I think this will be a good occasion for all the developer that live in Marche or in the central zones of Italy to get a good overview of some CMS application frameworks, especially if you face them for the first time in your career.&lt;/p&gt;  &lt;p&gt;For detailed information about the actual Agenda, the location and all that’s around the event head up to our .Net User Group’s home page: &lt;a href="http://www.dotnetmarche.org"&gt;www.dotnetmarche.org&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Two quick notes about my sessions:&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Orchard - overview&lt;/strong&gt;: I will show you how I approached this system at first, assuming you have no knowledge at all of what Orchard is and how it work, it will follow the same path I’ve gone through when first started to learn the framework. It will cover basic concepts and usage.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Orchard - customizing layouts&lt;/strong&gt;: I’ll help Michele in his development sessions trying to explain the structure of an Orchard theme and how you can start to customize it. Again it will be an introductory session because skinning an Orchard website it’s a pro job, due to the highly flexible nature of the templating engine itself (and our time is limited); if we will receive good feedbacks we maybe can have some more advanced sessions in one of our next workshops.&lt;/p&gt;  &lt;p&gt;See you there!&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/report-slides-from-community-tour-2011-cms-edition"&gt;Report &amp; Slides from “Community Tour 2011 - CMS Edition”&lt;/a&gt; (06/01/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET&lt;/a&gt; (03/09/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/19th-dotnetmarche-workshop-community-tour-2011-cms-edition"&gt;&lt;strong&gt;More related document (19)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/19th-dotnetmarche-workshop-community-tour-2011-cms-edition</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/19th-dotnetmarche-workshop-community-tour-2011-cms-edition#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/19th-dotnetmarche-workshop-community-tour-2011-cms-edition</guid><pubDate>Mon, 23 May 2011 15:13:12 GMT</pubDate><category>.net</category><category>DotNetMarche</category><category>Orchard</category><category>Workshop</category></item><item><title>WPF, Silverlight, WP7 and the Async CTP</title><description>&lt;p&gt;In the past days I had a chance to give an eye to these future feature of the .NET framework and I have to say I really love it. It allows you to write code that have to run asynchronously or in sequence (continuations) in a very simple and intuitive way.&lt;/p&gt;  &lt;p&gt;If you know the basic principles of asynchronous programming the learning curve is quite smooth and fast (it took half a day to me to read up some documentation and start coding my first experiments)&lt;/p&gt;  &lt;p&gt;I will not go into the in-depth of the feature, because the official documentation is good and easy to read; at this link you can find all the references and the tutorials to start with: &lt;a href="http://msdn.microsoft.com/en-us/vstudio/gg316360" target="_blank"&gt;Visual Studio Asynchronous Programming&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;The CTP can be used with any .NET platform: desktop framework, Silverlight or WP7; this is good so you can experiment with your favorite environment.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;b&gt;&lt;i&gt;Asynchronous operations&lt;/i&gt;&lt;/b&gt; are methods and other function members that may have most of their execution take place &lt;i&gt;after&lt;/i&gt; they return. In .NET the recommended pattern for asynchronous operations is for them to return a &lt;b&gt;&lt;i&gt;task&lt;/i&gt;&lt;/b&gt;&lt;i&gt; &lt;/i&gt;which represents the ongoing operation and allows waiting for its eventual outcome.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Basically after you install the CTP you’ll have access to two new language keywords and some support classes:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;a&lt;strong&gt;sync&lt;/strong&gt;: marks a function as an asynchronous function, it must return void, Task, Task&amp;lt;T&amp;gt; types; inside an async function you can use await expression to wait on ongoing tasks, in other words you flow of execution for the current function stops until the Task you requested to wait for ends (the programming language is responsible for setting up and handling the continuations).&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;await&lt;/strong&gt;: causes the flow of execution to stop for the current function until the Task (or Task&amp;lt;T&amp;gt;) for which it’s called end, then the execution proceed to the previous calling point.&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt;: it represents an asynchronous operation and exposes all the needed information to check its current execution state or to await until the execution ends.&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;TaskEx&lt;/strong&gt;: exposes some utility and helpers function that allows us to execute asynchronous code in different threads or await for multiple tasks termination.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;As you’ll see in a while using these classes is easy, and the framework itself will take care of the dirty work of generating the state machine to handle your sequence of operation; however always keep in mind this: asynchronous programming doesn’t mean ‘background threads’ all the time.&lt;/p&gt;  &lt;p&gt;Enough talking let’s see some code in action in my WP7 app ‘&lt;a href="http://www.primordialcode.com/wp7-all-about-primordialcode"&gt;All About PrimordialCode&lt;/a&gt;’, I’ll start by showing you some traditional async code I had there, this was the starting RssClient class that was used to retrieve the rss feeds:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c3618720-e9bc-4cf4-b05c-1a6e4e8fa486" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class RssClient
{
	private readonly string _rssUrl;
	private readonly object _control;

	public delegate void ItemsReceivedDelegate(RssClient client, IList&amp;lt;FeedItem&amp;gt; items, Object control);
	public event ItemsReceivedDelegate ItemsReceived;

	public RssClient(string rssUrl, object control)
	{
		_rssUrl = rssUrl;
		_control = control;
	}

	public void LoadItems()
	{
		var request = (HttpWebRequest)WebRequest.Create(_rssUrl);
		request.BeginGetResponse(ResponseCallback, request);
	}

	void ResponseCallback(IAsyncResult result)
	{
		var request = (HttpWebRequest)result.AsyncState;

		WebResponse response;
		try
		{
			response = request.EndGetResponse(result);
		}
		catch (Exception)
		{
			if (ItemsReceived != null)
				ItemsReceived(this, null, _control);
			return;
		}

		var stream = response.GetResponseStream();
		var reader = XmlReader.Create(stream);
		var items = new List&amp;lt;FeedItem&amp;gt;(50);

		FeedItem item = null;
		var pointerMoved = false;

		while (!reader.EOF)
		{
		
//			...
//			boring code to read items and add them to the 'items' list
//			...

		if (ItemsReceived != null)
			ItemsReceived(this, items, _control);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;In this code you will see a callback that is scheduled to be executed when we start getting the data stream (line 18) and an event (lines 51-52) that will be raised to give the control back to the calling application to let the rest of the processing go on (continuation). You will also notice that this class will also accept on his constructor the control that will be filled with the returned data.&lt;/p&gt;

&lt;p&gt;This is how this class was used:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d400cdef-4481-45f7-ba9a-4f5ecb87282a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;//...
var rssClient = new RssClient(&amp;quot;http://twitter.com/statuses/...&amp;quot;, listctrl); 
rssClient.ItemsReceived += ItemsReceived;
rssClient.LoadItems();
ShowProgressBar(true);
//...
void ItemsReceived(RssClient client, IList&amp;lt;FeedItem&amp;gt; items, object control)
{
	Dispatcher.BeginInvoke(delegate
	{
		if (items != null)
		{
			((ItemsControl)control).ItemsSource = items;
		}
		else
		{
			if (((ItemsControl)control).Items.Count == 1)
			{
				FeedItem fi = new FeedItem();
				fi.Title = &amp;quot;No connection&amp;quot;;
				fi.Description = &amp;quot;&amp;quot;;

				List&amp;lt;FeedItem&amp;gt; lfi = new List&amp;lt;FeedItem&amp;gt;();
				lfi.Add(fi);

				((ItemsControl)control).ItemsSource = lfi;
			}
		}
		ShowProgressBar(false);
	});
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;



&lt;p&gt;We’ve added an event handler and we used a Dispatcher.BeginInvoke() to be sure to execute this function on the correct UI thread (to avoid the cross thread exception when updating a control from a background thread).&lt;/p&gt;

&lt;p&gt;This is more or less how we do these things now, let’s see now how it will change starting from the RssClass:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:bd99b1dd-3202-44a0-bff2-a5f85dc7af22" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class RssClientAsync
{
	private readonly string _rssUrl;
	
	public RssClientAsync(string rssUrl)
	{
		_rssUrl = rssUrl;
	}

	public async Task&amp;lt;IList&amp;lt;FeedItem&amp;gt;&amp;gt; LoadItemsAsync()
	{
		var client = new WebClient();

		// async call to retrieve the data (in the same thread)
		string data = await client.DownloadStringTaskAsync(_rssUrl);

		if (string.IsNullOrEmpty(data))
			return null;

		// i wanna run the rest of the processing in a background thread
		return await TaskEx.Run(delegate
		{
			var items = XDocument.Parse(data).Descendants(&amp;quot;item&amp;quot;)
				.Select(e =&amp;gt; new FeedItem()
				{
					Title = (string)e.Element(&amp;quot;title&amp;quot;),
					Description = Regex.Replace((string)e.Element(&amp;quot;description&amp;quot;), @&amp;quot;&amp;lt;(.|\n)*?&amp;gt;&amp;quot;, &amp;quot; &amp;quot;),
					Link = ParseLink(e),
					PublishDate = ParseDate((string)e.Element(&amp;quot;pubDate&amp;quot;))
				});
			return items.ToList();
		});
	}
	
	// some parsing functions...
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This is going to be interesting, first off I removed the reference to the control and the ItemsReceived event, I will not need them anymore.&lt;/p&gt;

&lt;p&gt;Line 10: I marked the function as async and I changed the return type of the function to Task&amp;lt;IList&amp;lt;FeedItems&amp;gt;&amp;gt;, which means that WHEN this function will end it will returns me the whole list of items parsed from the rss stream.&lt;/p&gt;

&lt;p&gt;Line 15: here we take advantage of some extension that the CTP adds to the WebClient class, the DownloadStringTaskAsync will return a Task&amp;lt;string&amp;gt; object we can wait on with the await keyword. The language will build a state machine to wait for this function to end, then the execution will proceed with...&lt;/p&gt;

&lt;p&gt;Line 21: we have the whole rss stream read inside our ‘data’ string, it’s time to process it and I choose to force it t execute in a background thread (TaskEx.Run() will force the execution of the delegate in a background thread and it will return a Task object we can wait on), once again we used the await keyword to let the language know that we want to wait for the task to end before going on with the original function.&lt;/p&gt;

&lt;p&gt;Awesome! we’ve wrote asynchronous code like it was synchronous without altering the ‘flow’ or jumping back and forth following events and callbacks...but wait we’ve not done, let’s see how we use this piece of beauty:&lt;/p&gt;

&lt;p&gt;
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:8cd562a3-e678-4721-a55a-7fcc048de399" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;private async void TwitterRefreshClick(object sender, RoutedEventArgs e)
{
	var twiClient = new RssClientAsync(&amp;quot;http://twitter.com/statuses/...&amp;quot;); 
	ShowProgressBar(true);
	var items = await twiClient.LoadItemsAsync();

	if (items.Count != 0)
	{
		Twitter.ItemsSource = items;
	}
	else
	{
		FeedItem fi = new FeedItem();
		fi.Title = &amp;quot;No connection&amp;quot;;
		fi.Description = &amp;quot;&amp;quot;;

		List&amp;lt;FeedItem&amp;gt; lfi = new List&amp;lt;FeedItem&amp;gt;();
		lfi.Add(fi);

		Twitter.ItemsSource = lfi;
	}

	ShowProgressBar(false);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Line 01: we need to mark the function as async, because we’ll need to use asynchronous operation inside it.&lt;/p&gt;

&lt;p&gt;Line 03-04: creates and instance of the client class and start a progress bar animation.&lt;/p&gt;

&lt;p&gt;Line 05: we call and ‘await’ for the LoadItemsAsync() function to complete &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_6.png" /&gt;, once it’s done the control returns to the rest of the function that..&lt;/p&gt;

&lt;p&gt;Line 07-23: binds the result to the list control (same code we had inside the event handler before) and stops the progress bar animation.&lt;/p&gt;

&lt;p&gt;Once again the flow of execution is perfectly clear and the code is extremely easy to read. &lt;/p&gt;

&lt;p&gt;In the end I have to admit that this CTP really impresses me, it makes writing asynchronous code a breeze in a wide range of scenarios, here I used a WP7 project as example, but it’s really the same in any other platform, so just go there and download this CTP to try it. I really can’t wait to use it in ‘real’ production code. &lt;/p&gt;

&lt;p&gt;Oh well...actually I do...in the next days I’ll push to the WP7 marketplace another version of ‘All About PrimordialCode’ that uses the Async CTP for these kind of processing.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-generic-serverside-pagination-data-provider"&gt;WPF: a generic ‘server-side’ pagination data provider&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wpf-silverlight-wp7-async-ctp"&gt;&lt;strong&gt;More related document (12)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp</guid><pubDate>Thu, 21 Apr 2011 16:33:53 GMT</pubDate><category>WPF</category><category>Silverlight</category><category>WP7</category><category>Async</category></item><item><title>WP7 - adding a ‘Fade to Black’ effect to a ListBox</title><description>&lt;p&gt;I wanted to have a small and ‘nice’ application in which to experiment things related to networking and graphic effects in WP7, so I took out the ‘&lt;a href="http://mywp7brand.codeplex.com/"&gt;My WP7 Brand&lt;/a&gt;’ project from &lt;a href="http://www.codeplex.com/"&gt;CodePlex&lt;/a&gt; and started to customize it, this is how ‘&lt;a href="http://www.primordialcode.com/wp7-all-about-primordialcode"&gt;All About PrimordialCode&lt;/a&gt;’ is born.&lt;/p&gt;  &lt;p&gt;Let’s start reminding you I’m not a designer, like many of you I’m a developer.&lt;/p&gt;  &lt;p&gt;The first thing I want to show you is how I realized a ‘fade to black’ effect for a ListBox, requisites:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Items that are scrolling out of the ListBox visible area have to fade away gently, not with an abrupt cut.&lt;/li&gt;    &lt;li&gt;The ListBox have to maintain its full and normal interactions as much as possible.&lt;/li&gt;    &lt;li&gt;It has to work with dark and light themes.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Here are the final results:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/FadingListBoxWhite_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="FadingListBoxWhite" border="0" alt="FadingListBoxWhite" src="http://www.primordialcode.com/UserFiles/Guardian/FadingListBoxWhite_thumb.jpg" width="244" height="184" /&gt;&lt;/a&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/FadingListBoxDark_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="FadingListBoxDark" border="0" alt="FadingListBoxDark" src="http://www.primordialcode.com/UserFiles/Guardian/FadingListBoxDark_thumb.jpg" width="244" height="184" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 1 and 2: &lt;/strong&gt;fading effect on a light and dark theme.&lt;/p&gt;  &lt;p&gt;The straightforward way to obtain those result is to use and ‘OpacityMask’ like in the following code:&lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:933d0591-ef85-413c-afd9-b1c5cfae5af5" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;ListBox Margin=&amp;quot;0,0,-12,0&amp;quot;&amp;gt;
	&amp;lt;ListBox.OpacityMask&amp;gt;
		&amp;lt;LinearGradientBrush StartPoint=&amp;quot;0,0&amp;quot; EndPoint=&amp;quot;0,1&amp;quot;&amp;gt;
			&amp;lt;GradientStop Offset=&amp;quot;0&amp;quot; Color=&amp;quot;Transparent&amp;quot; /&amp;gt;
			&amp;lt;GradientStop Offset=&amp;quot;0.05&amp;quot; Color=&amp;quot;Black&amp;quot; /&amp;gt;
			&amp;lt;GradientStop Offset=&amp;quot;0.95&amp;quot; Color=&amp;quot;Black&amp;quot; /&amp;gt;
			&amp;lt;GradientStop Offset=&amp;quot;1&amp;quot; Color=&amp;quot;Transparent&amp;quot; /&amp;gt;
		&amp;lt;/LinearGradientBrush&amp;gt;
	&amp;lt;/ListBox.OpacityMask&amp;gt;
	&amp;lt;ListBox.ItemTemplate&amp;gt;
		&amp;lt;DataTemplate&amp;gt;
			...your incredible item template goes here...
		&amp;lt;/DataTemplate&amp;gt;
	&amp;lt;/ListBox.ItemTemplate&amp;gt;
&amp;lt;/ListBox&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Pretty easy and straight to understand. It only has a small drawback on WP7: the horrible rendering performances when you scroll your list elements (do not trust the performances of the emulator when it comes to graphics...try it on a real device!). The user experience is that bad on a large ListBox that I decided to drop this way of doing things in favor of a small ‘hack’.&lt;/p&gt;

&lt;p&gt;The solution is simple: draw two small rectangles OVER the ListBox, anchored to the Top and Bottom borders. Set the correct OpacityMask for those rectangles. To have a ‘cleaner’ solution I extracted the ListBox template using Blend and I defined a brand new style based on the default one:&lt;/p&gt;

&lt;p&gt;
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:ce271811-9d9e-4a77-babf-24475117dca8" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;Style x:Key=&amp;quot;FadingListBox&amp;quot; TargetType=&amp;quot;ListBox&amp;quot;&amp;gt;
	&amp;lt;Setter Property=&amp;quot;Background&amp;quot; Value=&amp;quot;Transparent&amp;quot;/&amp;gt;
	&amp;lt;Setter Property=&amp;quot;Foreground&amp;quot; Value=&amp;quot;{StaticResource PhoneForegroundBrush}&amp;quot;/&amp;gt;
	&amp;lt;Setter Property=&amp;quot;ScrollViewer.HorizontalScrollBarVisibility&amp;quot; Value=&amp;quot;Disabled&amp;quot;/&amp;gt;
	&amp;lt;Setter Property=&amp;quot;ScrollViewer.VerticalScrollBarVisibility&amp;quot; Value=&amp;quot;Auto&amp;quot;/&amp;gt;
	&amp;lt;Setter Property=&amp;quot;BorderThickness&amp;quot; Value=&amp;quot;0&amp;quot;/&amp;gt;
	&amp;lt;Setter Property=&amp;quot;BorderBrush&amp;quot; Value=&amp;quot;Transparent&amp;quot;/&amp;gt;
	&amp;lt;Setter Property=&amp;quot;Padding&amp;quot; Value=&amp;quot;0&amp;quot;/&amp;gt;
	&amp;lt;Setter Property=&amp;quot;Template&amp;quot;&amp;gt;
		&amp;lt;Setter.Value&amp;gt;
			&amp;lt;ControlTemplate TargetType=&amp;quot;ListBox&amp;quot;&amp;gt;
				&amp;lt;Grid&amp;gt;
					&amp;lt;ScrollViewer x:Name=&amp;quot;ScrollViewer&amp;quot; BorderBrush=&amp;quot;{TemplateBinding BorderBrush}&amp;quot; BorderThickness=&amp;quot;{TemplateBinding BorderThickness}&amp;quot; Background=&amp;quot;{TemplateBinding Background}&amp;quot; Foreground=&amp;quot;{TemplateBinding Foreground}&amp;quot; Padding=&amp;quot;{TemplateBinding Padding}&amp;quot;&amp;gt;
						&amp;lt;ItemsPresenter/&amp;gt;
					&amp;lt;/ScrollViewer&amp;gt;
					&amp;lt;Rectangle VerticalAlignment=&amp;quot;top&amp;quot; Height=&amp;quot;15&amp;quot; Fill=&amp;quot;{StaticResource PhoneBackgroundBrush}&amp;quot;&amp;gt;
						&amp;lt;Rectangle.OpacityMask&amp;gt;
							&amp;lt;LinearGradientBrush StartPoint=&amp;quot;0,0&amp;quot; EndPoint=&amp;quot;0,1&amp;quot;&amp;gt;
								&amp;lt;GradientStop Offset=&amp;quot;0&amp;quot; Color=&amp;quot;Black&amp;quot; /&amp;gt;
								&amp;lt;GradientStop Offset=&amp;quot;1&amp;quot; Color=&amp;quot;Transparent&amp;quot; /&amp;gt;
							&amp;lt;/LinearGradientBrush&amp;gt;
						&amp;lt;/Rectangle.OpacityMask&amp;gt;
					&amp;lt;/Rectangle&amp;gt;
					&amp;lt;Rectangle VerticalAlignment=&amp;quot;bottom&amp;quot; Height=&amp;quot;15&amp;quot; Fill=&amp;quot;{StaticResource PhoneBackgroundBrush}&amp;quot;&amp;gt;
						&amp;lt;Rectangle.OpacityMask&amp;gt;
							&amp;lt;LinearGradientBrush StartPoint=&amp;quot;0,0&amp;quot; EndPoint=&amp;quot;0,1&amp;quot;&amp;gt;
								&amp;lt;GradientStop Offset=&amp;quot;0&amp;quot; Color=&amp;quot;Transparent&amp;quot; /&amp;gt;
								&amp;lt;GradientStop Offset=&amp;quot;1&amp;quot; Color=&amp;quot;Black&amp;quot; /&amp;gt;
							&amp;lt;/LinearGradientBrush&amp;gt;
						&amp;lt;/Rectangle.OpacityMask&amp;gt;
					&amp;lt;/Rectangle&amp;gt;
				&amp;lt;/Grid&amp;gt;
			&amp;lt;/ControlTemplate&amp;gt;
		&amp;lt;/Setter.Value&amp;gt;
	&amp;lt;/Setter&amp;gt;
&amp;lt;/Style&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
In this style I encapsulated the standard ListBox template inside a Grid, the important bits to realize the fading effect are the lines 16-31.&lt;/p&gt;

&lt;p&gt;Having defined the style the usage is trivial:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:224080c4-c7c1-4ed3-8b79-95844bc8a5eb" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
&amp;lt;ListBox Margin=&amp;quot;0,0,-12,0&amp;quot; Name=&amp;quot;xxx&amp;quot; Style=&amp;quot;{StaticResource FadingListBox}&amp;quot;&amp;gt;
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;and the performances while scrolling are good again, you just loose two small sensitive area (the two rectangles) in which the user is not able to interact with the ListBox.&lt;/p&gt;

&lt;p&gt;If you know a better and more clean way to achieve the same result, please show me it will be greatly appreciated.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-fix-silverlight-toolkit-templates-add-validation-states"&gt;Silverlight: how to fix the Silverlight Toolkit templates to add Validation States&lt;/a&gt; (12/12/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wp7-adding-fade-black-effect-listbox"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wp7-adding-fade-black-effect-listbox</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wp7-adding-fade-black-effect-listbox#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wp7-adding-fade-black-effect-listbox</guid><pubDate>Tue, 19 Apr 2011 16:03:42 GMT</pubDate><category>WP7</category><category>Fade</category><category>Listbox</category><category>Template</category></item><item><title>WP7 Business Cards application goes v. 1.1</title><description>&lt;p&gt;In the next few hours my first WP7 application called ‘Business Cards’ should go live with its version 1.1.&lt;/p&gt;  &lt;p&gt;‘Business Cards’ is a digital business cards and contact info classifier application: you can take snapshot, rate, add information and categorize your contacts.&lt;/p&gt;  &lt;p&gt;You can have detailed information about this application in its dedicated &lt;a href="http://www.primordialcode.com/wp7-business-cards" target="_blank"&gt;support page&lt;/a&gt; in this very same blog (under the WP7 section in he main menu).&lt;/p&gt;  &lt;p&gt;‘Business Cards’ offers a trial version which is fully featured, ads free and without any limitation nor expiration time, you are not forced to buy the application in any way: you can keep using the trial version if you want.&lt;/p&gt;  &lt;p&gt;But sadly we have a problem in the marketplace (which I discovered late) that will prevent the Trial apps to be updated in a clean way: the only way to update a trial app is to uninstall and reinstall the application, which is not good because you will end up loose your data.&lt;/p&gt;  &lt;p&gt;Luckily enough I had provided a data backup/restore mechanism in ‘Business Cards’ (which I will also use in my next products) so, before updating, remember to perform a full backup of your data (again you can have detailed information about the procedure in the support page mentioned above).&lt;/p&gt;  &lt;p&gt;If you have any problem with this procedure and/or something do not work keep a copy of your data and send me an email (at: &lt;a href="mailto:guardian@nablasoft.com"&gt;guardian@nablasoft.com&lt;/a&gt;), I’ll check the problem and will find a way to adapt the data to the new format.&lt;/p&gt;  &lt;p&gt;I will (slowly) add support pages for all my other active projects and resources over time.&lt;/p&gt;  &lt;p&gt;See you all next!&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/wp7-business-cards-application-1-1</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wp7-business-cards-application-1-1#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wp7-business-cards-application-1-1</guid><pubDate>Fri, 15 Apr 2011 15:56:15 GMT</pubDate><category>WP7</category><category>Business Cards</category></item><item><title>QuiBrowser.it powered by Dexter Blog Engine</title><description>&lt;p&gt;I’ve not been so much active on the blog lately, mainly because most of my free time was devoted once again to the &lt;a href="http://dexterblogengine.com/" target="_blank"&gt;Dexter Blog Engine&lt;/a&gt; project.&lt;/p&gt;  &lt;p&gt;My good friend and project leader &lt;a href="http://www.tostring.it/"&gt;Ugo Lattanzi&lt;/a&gt; was going through a complete rewriting of the blog engine (the guy is a damned coding machine!) and he asked for help cause we also had a deadline to finally release a build (which we ofc missed &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_5.png" /&gt;, it’s just delayed don’t worry...it will come...sooner or later).&lt;/p&gt;  &lt;p&gt;Anyway we managed to complete the porting the of the Microsoft’s &lt;a href="http://quibrowser.it/"&gt;QuiBrowser&lt;/a&gt; blog in time and we can proudly say that it is now powered by Dexter Blog Engine, it feels good when you see your work in action, so here it is a screenshot:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/QuiBrowser_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="QuiBrowser" border="0" alt="QuiBrowser" src="http://www.primordialcode.com/UserFiles/Guardian/QuiBrowser_thumb.png" width="454" height="351" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;If you take a look at the source code and compare it to the previous version you will see it’s totally different, in our opinion this new version will be much faster than before (there’s still some areas in which we can improve, but we’ll work on it). Among the news this version brings on the fields we have:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;built on ASP.NETMVC 3&lt;/li&gt;    &lt;li&gt;a newly reworked skin that takes advantage of the features that HTML5 offers&lt;/li&gt;    &lt;li&gt;support for Windows Azure around the corner&lt;/li&gt;    &lt;li&gt;persistence layer realized with &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt; + &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; (big thanks to &lt;a href="http://fabiomaulo.blogspot.com/"&gt;Fabio Maulo&lt;/a&gt; for the help)&lt;/li&gt;    &lt;li&gt;more little things I keep forgetting&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;In short if you are now curious about it, go take a look to the project and leave us some feedback.&lt;/p&gt;  &lt;p&gt;I’m really looking forward to trash the actual Dexter build I’m using on this blog to switch to the brand new shiny one &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_5.png" /&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/primordialcode-powered-open-source-dexter-blog-engine"&gt;PrimordialCode is now powered by the open source Dexter Blog Engine&lt;/a&gt; (03/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support"&gt;Dexter is growing: Dynamic Pages and better Windows Live Writer support&lt;/a&gt; (06/02/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/working-on-dexter"&gt;Working on Dexter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/quibrowserit-powered-dexter-blog-engine"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/quibrowserit-powered-dexter-blog-engine</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/quibrowserit-powered-dexter-blog-engine#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/quibrowserit-powered-dexter-blog-engine</guid><pubDate>Thu, 24 Mar 2011 17:22:00 GMT</pubDate><category>Dexter</category></item><item><title>18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET</title><description>&lt;p&gt;This post is mainly for all my Italian readers to remind them that our user group &lt;a href="http://www.dotnetmarche.org/"&gt;DotNetMarche&lt;/a&gt; is organizing its 18th workshop.&lt;/p&gt;  &lt;p&gt;We will have Raffaele Rialdi (MVP Developer Security) and Gian Maria Ricci (MVP Visual Studio ALM) talking about:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;A recap on some Linq features, Lamda expressions and Expression Trees &lt;/li&gt;    &lt;li&gt;Advanced features of the C# 4.0 programming language &lt;/li&gt;    &lt;li&gt;Parallel Libraries: take advantage of your multicore cpu. &lt;/li&gt;    &lt;li&gt;Micro framework .NET (bonus session) &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;It will take place next week, on Tuesday the 15, for more information and to register to the event head up to: &lt;a href="http://dotnetmarche.org/eventi/Default.aspx?IDevento=41"&gt;http://dotnetmarche.org/eventi/Default.aspx?IDevento=41&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;As usual after the event we’ll have our community dinner in which you can keep talking about the topics of the workshop or just have fun and enjoy some great food.&lt;/p&gt;  &lt;p&gt;I will be there, and you?&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net</guid><pubDate>Wed, 09 Mar 2011 16:29:50 GMT</pubDate><category>DotNetMarche</category><category>Workshop</category></item><item><title>WPF - skinning the ComboBox moving the DropDown Menu around</title><description>&lt;p&gt;A couple of days ago a friend of mine asked for some help in skinning a WPF ComboBox control, he had a special need in which the dropdown menu items list of the control had to be aligned to the right side of the ComboBox and had to expand in the left direction (instead of the usual visual appearance, which has the opposite behavior: it is anchored to the left side of the control and expands to the right).&lt;/p&gt;  &lt;p&gt;I asked him to build a very simple test project containing the control and its current skin and pass it to me, this is a picture of what he obtained at that time.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/SkinningComboboxDropDown1_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="SkinningComboboxDropDown1" border="0" alt="SkinningComboboxDropDown1" src="http://www.primordialcode.com/UserFiles/Guardian/SkinningComboboxDropDown1_thumb.png" width="244" height="185" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I have to admit I’m not a very good designer nor a graphic expert so I got the basic control template extracting it using Blend and I looked at it, here is a snippet of the original XAML from the template:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:10e4ee75-a18b-445b-96c8-6a76d3a5254a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;ControlTemplate TargetType=&amp;quot;{x:Type ComboBox}&amp;quot;&amp;gt;
	&amp;lt;Grid x:Name=&amp;quot;MainGrid&amp;quot; SnapsToDevicePixels=&amp;quot;true&amp;quot;&amp;gt;
		&amp;lt;Grid.ColumnDefinitions&amp;gt;
			&amp;lt;ColumnDefinition Width=&amp;quot;*&amp;quot;/&amp;gt;
			&amp;lt;ColumnDefinition MinWidth=&amp;quot;{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}&amp;quot; Width=&amp;quot;0&amp;quot;/&amp;gt;
		&amp;lt;/Grid.ColumnDefinitions&amp;gt;
		&amp;lt;Popup x:Name=&amp;quot;PART_Popup&amp;quot; AllowsTransparency=&amp;quot;true&amp;quot; Grid.ColumnSpan=&amp;quot;2&amp;quot; IsOpen=&amp;quot;{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}&amp;quot; Margin=&amp;quot;1&amp;quot; PopupAnimation=&amp;quot;{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}&amp;quot; Placement=&amp;quot;Bottom&amp;quot;&amp;gt;
			&amp;lt;Microsoft_Windows_Themes:SystemDropShadowChrome x:Name=&amp;quot;Shdw&amp;quot; Color=&amp;quot;Transparent&amp;quot; MaxHeight=&amp;quot;{TemplateBinding MaxDropDownHeight}&amp;quot; MinWidth=&amp;quot;{Binding ActualWidth, ElementName=MainGrid}&amp;quot;&amp;gt;
				&amp;lt;Border x:Name=&amp;quot;DropDownBorder&amp;quot; BorderBrush=&amp;quot;{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}&amp;quot; BorderThickness=&amp;quot;1&amp;quot; Background=&amp;quot;{DynamicResource {x:Static SystemColors.WindowBrushKey}}&amp;quot;&amp;gt;
					&amp;lt;ScrollViewer CanContentScroll=&amp;quot;true&amp;quot;&amp;gt;
						&amp;lt;ItemsPresenter KeyboardNavigation.DirectionalNavigation=&amp;quot;Contained&amp;quot; SnapsToDevicePixels=&amp;quot;{TemplateBinding SnapsToDevicePixels}&amp;quot;/&amp;gt;
					&amp;lt;/ScrollViewer&amp;gt;
				&amp;lt;/Border&amp;gt;
			&amp;lt;/Microsoft_Windows_Themes:SystemDropShadowChrome&amp;gt;
		&amp;lt;/Popup&amp;gt;
		&amp;lt;ToggleButton BorderBrush=&amp;quot;{TemplateBinding BorderBrush}&amp;quot; Background=&amp;quot;{TemplateBinding Background}&amp;quot; Grid.ColumnSpan=&amp;quot;2&amp;quot; IsChecked=&amp;quot;{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}&amp;quot; Style=&amp;quot;{StaticResource ComboBoxReadonlyToggleButton2}&amp;quot;/&amp;gt;
		&amp;lt;ContentPresenter ContentTemplate=&amp;quot;{TemplateBinding SelectionBoxItemTemplate}&amp;quot; ContentTemplateSelector=&amp;quot;{TemplateBinding ItemTemplateSelector}&amp;quot; Content=&amp;quot;{TemplateBinding SelectionBoxItem}&amp;quot; ContentStringFormat=&amp;quot;{TemplateBinding SelectionBoxItemStringFormat}&amp;quot; HorizontalAlignment=&amp;quot;{TemplateBinding HorizontalContentAlignment}&amp;quot; IsHitTestVisible=&amp;quot;false&amp;quot; Margin=&amp;quot;{TemplateBinding Padding}&amp;quot; SnapsToDevicePixels=&amp;quot;{TemplateBinding SnapsToDevicePixels}&amp;quot; VerticalAlignment=&amp;quot;{TemplateBinding VerticalContentAlignment}&amp;quot;/&amp;gt;
	&amp;lt;/Grid&amp;gt;
	&amp;lt;ControlTemplate.Triggers&amp;gt;
		&amp;lt;Trigger Property=&amp;quot;HasDropShadow&amp;quot; SourceName=&amp;quot;PART_Popup&amp;quot; Value=&amp;quot;true&amp;quot;&amp;gt;
			&amp;lt;Setter Property=&amp;quot;Margin&amp;quot; TargetName=&amp;quot;Shdw&amp;quot; Value=&amp;quot;0,0,5,5&amp;quot;/&amp;gt;
			&amp;lt;Setter Property=&amp;quot;Color&amp;quot; TargetName=&amp;quot;Shdw&amp;quot; Value=&amp;quot;#71000000&amp;quot;/&amp;gt;
		&amp;lt;/Trigger&amp;gt;
		&amp;lt;Trigger Property=&amp;quot;HasItems&amp;quot; Value=&amp;quot;false&amp;quot;&amp;gt;
			&amp;lt;Setter Property=&amp;quot;Height&amp;quot; TargetName=&amp;quot;DropDownBorder&amp;quot; Value=&amp;quot;95&amp;quot;/&amp;gt;
		&amp;lt;/Trigger&amp;gt;
		&amp;lt;Trigger Property=&amp;quot;IsEnabled&amp;quot; Value=&amp;quot;false&amp;quot;&amp;gt;
			&amp;lt;Setter Property=&amp;quot;Foreground&amp;quot; Value=&amp;quot;{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}&amp;quot;/&amp;gt;
			&amp;lt;Setter Property=&amp;quot;Background&amp;quot; Value=&amp;quot;#FFF4F4F4&amp;quot;/&amp;gt;
		&amp;lt;/Trigger&amp;gt;
		&amp;lt;Trigger Property=&amp;quot;IsGrouping&amp;quot; Value=&amp;quot;true&amp;quot;&amp;gt;
			&amp;lt;Setter Property=&amp;quot;ScrollViewer.CanContentScroll&amp;quot; Value=&amp;quot;false&amp;quot;/&amp;gt;
		&amp;lt;/Trigger&amp;gt;
	&amp;lt;/ControlTemplate.Triggers&amp;gt;
&amp;lt;/ControlTemplate&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;It comes out that the main part of the WPF ComboBox template is formed by 3 elements: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a content presenter for the control itself. &lt;/li&gt;

  &lt;li&gt;a chrome for the dropdown button. &lt;/li&gt;

  &lt;li&gt;and a popup representing the dropdown menu. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To achieve what he needed, that is align the popup to the right side of the content presenter and let it expand to the left, I thought to act on the HorizontalOffset property of the popup control. Knowing the width of both the dropdown control and the main control presenter with some basic math we can obtain the new horizontal offset at which place the dropdown. Thanks God, HorizontalOffset is a dependency property, so it does support binding (and multi binding too, which is what I actually needed). So I wrote a quick MultiValueConverter:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:148a4e32-0658-4a19-833b-ddba1c030d23" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class PopupHOffsetValueConverter : IMultiValueConverter
{
	#region IMultiValueConverter Members

	public object Convert(object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		try
		{
			double popupWidth = (double) values[0];
			double controlWidth = (double) values[1];
			return -(popupWidth - controlWidth);
		}
		catch
		{
			return 0;
		}
	}

	public object[] ConvertBack(object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture)
	{
		throw new NotImplementedException();
	}

	#endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;And modified the style to use it like this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:61ec9db1-2597-45dd-ac0a-f0f17c0c9bcc" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
&amp;lt;Grid x:Name=&amp;quot;MainGrid&amp;quot; SnapsToDevicePixels=&amp;quot;true&amp;quot;&amp;gt;
	&amp;lt;Grid.Resources&amp;gt;
		&amp;lt;WpfApplication1:PopupHOffsetValueConverter x:Key=&amp;quot;vc&amp;quot; /&amp;gt;
	&amp;lt;/Grid.Resources&amp;gt;
	&amp;lt;Grid.ColumnDefinitions&amp;gt;
		&amp;lt;ColumnDefinition Width=&amp;quot;*&amp;quot;/&amp;gt;
		&amp;lt;ColumnDefinition MinWidth=&amp;quot;{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}&amp;quot; Width=&amp;quot;0&amp;quot;/&amp;gt;
	&amp;lt;/Grid.ColumnDefinitions&amp;gt;
	&amp;lt;Popup x:Name=&amp;quot;PART_Popup&amp;quot; AllowsTransparency=&amp;quot;true&amp;quot; Grid.ColumnSpan=&amp;quot;2&amp;quot; IsOpen=&amp;quot;{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}&amp;quot; Margin=&amp;quot;1&amp;quot; PopupAnimation=&amp;quot;{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}&amp;quot; Placement=&amp;quot;Bottom&amp;quot;&amp;gt;
		&amp;lt;Popup.HorizontalOffset&amp;gt;
			&amp;lt;MultiBinding Converter=&amp;quot;{StaticResource vc}&amp;quot;&amp;gt;
				&amp;lt;Binding ElementName=&amp;quot;Shdw&amp;quot; Path=&amp;quot;ActualWidth&amp;quot; /&amp;gt;
				&amp;lt;Binding ElementName=&amp;quot;MainGrid&amp;quot; Path=&amp;quot;ActualWidth&amp;quot; /&amp;gt;
			&amp;lt;/MultiBinding&amp;gt;
		&amp;lt;/Popup.HorizontalOffset&amp;gt;
		&amp;lt;Microsoft_Windows_Themes:SystemDropShadowChrome x:Name=&amp;quot;Shdw&amp;quot; Color=&amp;quot;Transparent&amp;quot; MaxHeight=&amp;quot;{TemplateBinding MaxDropDownHeight}&amp;quot; MinWidth=&amp;quot;{Binding ActualWidth, ElementName=MainGrid}&amp;quot;&amp;gt;
			&amp;lt;Border x:Name=&amp;quot;DropDownBorder&amp;quot; BorderBrush=&amp;quot;{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}&amp;quot; BorderThickness=&amp;quot;1&amp;quot; Background=&amp;quot;{DynamicResource {x:Static SystemColors.WindowBrushKey}}&amp;quot;&amp;gt;
				&amp;lt;ScrollViewer CanContentScroll=&amp;quot;true&amp;quot;&amp;gt;
					&amp;lt;ItemsPresenter KeyboardNavigation.DirectionalNavigation=&amp;quot;Contained&amp;quot; SnapsToDevicePixels=&amp;quot;{TemplateBinding SnapsToDevicePixels}&amp;quot;/&amp;gt;
				&amp;lt;/ScrollViewer&amp;gt;
			&amp;lt;/Border&amp;gt;
		&amp;lt;/Microsoft_Windows_Themes:SystemDropShadowChrome&amp;gt;
	&amp;lt;/Popup&amp;gt;
	&amp;lt;ToggleButton BorderBrush=&amp;quot;{TemplateBinding BorderBrush}&amp;quot; Background=&amp;quot;{TemplateBinding Background}&amp;quot; Grid.ColumnSpan=&amp;quot;2&amp;quot; IsChecked=&amp;quot;{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}&amp;quot; Style=&amp;quot;{StaticResource ComboBoxReadonlyToggleButton}&amp;quot;/&amp;gt;
	&amp;lt;ContentPresenter ContentTemplate=&amp;quot;{TemplateBinding SelectionBoxItemTemplate}&amp;quot; ContentTemplateSelector=&amp;quot;{TemplateBinding ItemTemplateSelector}&amp;quot; Content=&amp;quot;{TemplateBinding SelectionBoxItem}&amp;quot; ContentStringFormat=&amp;quot;{TemplateBinding SelectionBoxItemStringFormat}&amp;quot; HorizontalAlignment=&amp;quot;{TemplateBinding HorizontalContentAlignment}&amp;quot; IsHitTestVisible=&amp;quot;false&amp;quot; Margin=&amp;quot;{TemplateBinding Padding}&amp;quot; SnapsToDevicePixels=&amp;quot;{TemplateBinding SnapsToDevicePixels}&amp;quot; VerticalAlignment=&amp;quot;{TemplateBinding VerticalContentAlignment}&amp;quot;/&amp;gt;
&amp;lt;/Grid&amp;gt;
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Interesting bits are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 3-5 - MultiBinding ValueConverter declaration. &lt;/li&gt;

  &lt;li&gt;Lines 11-16 - the binding in action. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is the actual result on his partially skinned control:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/SkinningComboboxDropDown2_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="SkinningComboboxDropDown2" border="0" alt="SkinningComboboxDropDown2" src="http://www.primordialcode.com/UserFiles/Guardian/SkinningComboboxDropDown2_thumb.png" width="244" height="195" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty easy once I figured out how to do it, WPF is indeed extremely powerful and flexible when it comes to skin controls.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp"&gt;WPF, Silverlight, WP7 and the Async CTP&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-generic-serverside-pagination-data-provider"&gt;WPF: a generic ‘server-side’ pagination data provider&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wpf-skinning-combobox-dropdown-menu"&gt;&lt;strong&gt;More related document (11)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wpf-skinning-combobox-dropdown-menu</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wpf-skinning-combobox-dropdown-menu#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wpf-skinning-combobox-dropdown-menu</guid><pubDate>Mon, 28 Feb 2011 19:30:05 GMT</pubDate><category>WPF</category><category>Skinning</category><category>ComboBox</category></item><item><title>WP7 - Backup Service</title><description>&lt;p&gt;I hate when I loose my application data and there are times when developing a Windows Phone 7 Application that your IsolatedStorage data gets simply discarded when deploy an application from Visual Studio.&lt;/p&gt;  &lt;p&gt;This usually happens when you perform a solution cleanup or a complete rebuild; when you deploy you application again on the phone all your previously saved data are simply wiped out. This happens because under these circumstances Visual Studio performs a complete uninstall of your application before installing the new version.&lt;/p&gt;  &lt;p&gt;In order to prevent (better to say...to limit) this scenario and to give the applications the ability to backup/restore their data I’ve created a solution project that you can use to create dump images of all the IsolatedStorage data that are tied with your application.&lt;/p&gt;  &lt;p&gt;The concept idea is nothing new really: have a WCF service you can use to stream your files back and forth between your WP7 and PC. It is actually the easiest way you can solve this problem; it has been suggested in various resources along the internet but I wasn’t able to find a complete working solution, so I took the weekend and put on my own project on the road.&lt;/p&gt;  &lt;p&gt;Let’s start with some project requirements:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;The backup/restore service must be generic: that is it must be suitable for any kind of applications and not built for a specific scenario in mind. &lt;/li&gt;    &lt;li&gt;The backup service should be able to handle more than a single application; we will identify the different application with an Application string tag. &lt;/li&gt;    &lt;li&gt;It should support different backup set for the same application (ideally you would be able to create multiple backup/restore points), each backup set will be identified by a given name. &lt;/li&gt;    &lt;li&gt;It should preserve the folders and file structure your application have created on the IsolatedStorage (we just want to dump all the files, so we can inspect and edit them if needed before restoring the state). &lt;/li&gt;    &lt;li&gt;The WCF service should be self hosted inside a WPF application, I do not want to force people to configure it in IIS, they just have to launch an exe on their PC (using administrative rights). &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;What I wasn’t worried about in this version:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;The backup/restore operation isn’t protected against ‘tombstoning’, if your process gets interrupted in the middle you will likely have to start it over again. It is a SAFE procedure anyway, we are reading all the files while backing up, nothing gets (or should) altered at this stage. And if the process is interrupted during the restore stage, just start it all over again (you have a working copy of your data on the disk anyway). &lt;/li&gt;    &lt;li&gt;Lack of progress notification, you will just get an event raised when the operations are completed. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I will not discuss every aspect of the project, because it isn’t really complex (and you will also have the full source code to check and use, just mention me if you do&amp;#160; &lt;img style="border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-smile_2_1.png" /&gt;), so without further ado here is the solution structure:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;WP7BackupService - this project holds the WPF application that hosts the WCF service, it defines the basic interface and classes you use to interact with the service. &lt;/li&gt;    &lt;li&gt;WP7BackupServicePhone - this is the WP7 project holds reference to the WCF service and exposes the helper class you will use to initialize the backup sets and perform the backup and restore operations. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;WP7BackupService&lt;/strong&gt; &lt;/p&gt;  &lt;p&gt;This project is quite straightforward, so I won’t dig into it too much, I’ll just report some of the interfaces and classes that are used to define the WCF service and its interactions with the outside world.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:25c93da0-acc8-405d-bf54-3945a285cf4a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// A class that defines the file to upload
/// &amp;lt;/summary&amp;gt;
[DataContract]
public class FileUploadInfo
{
	/// &amp;lt;summary&amp;gt;
	/// the specific application for which we are storing the file
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public string Application;

	/// &amp;lt;summary&amp;gt;
	/// The tag that identifies the backup set
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public string Set;

	/// &amp;lt;summary&amp;gt;
	/// The name of the file to mirror on the  server
	/// this will contain the full path as you have it inside the 
	/// IsolatedStorage
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public string Name;

	/// &amp;lt;summary&amp;gt;
	/// The content bytes to send
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public byte[] Bytes;
}

/// &amp;lt;summary&amp;gt;
/// A class to specify which file to download
/// &amp;lt;/summary&amp;gt;
[DataContract]
public class FileDownloadInfo
{
	/// &amp;lt;summary&amp;gt;
	/// The specific application for which we are retrieving the file
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public string Application;

	/// &amp;lt;summary&amp;gt;
	/// The tag that identifies the backup set
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public string Set;

	/// &amp;lt;summary&amp;gt;
	/// The name of the file to mirror on the device
	/// this will contain the full path as you'll have it inside the 
	/// IsolatedStorage
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public string Name;
}

/// &amp;lt;summary&amp;gt;
/// It carries the informations in a backup set, that is all the directoryes and files
/// to keep it simple all the path are relative to the set root
/// and both the lists are plain lists
/// &amp;lt;/summary&amp;gt;
[DataContract]
public class BackupSet
{
	[DataMember]
	public string[] Folders;

	[DataMember]
	public string[] Files;
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:840235c8-bb24-42cb-960d-b148aabe4541" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// Defines the Backup Service contract interface
/// &amp;lt;/summary&amp;gt;
[ServiceContract]
public interface IBackupService
{
	/// &amp;lt;summary&amp;gt;
	/// Initializes the backup set, creates the directory structure if it does not exists,
	/// wipe out any existing folder if it has the same path.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;application&amp;quot;&amp;gt;The application.&amp;lt;/param&amp;gt;
	/// &amp;lt;param name=&amp;quot;backupSet&amp;quot;&amp;gt;The backup set.&amp;lt;/param&amp;gt;
	[OperationContract]
	void InitBackupSet(string application, string backupSet);

	/// &amp;lt;summary&amp;gt;
	/// Gets the backup set info.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;application&amp;quot;&amp;gt;The application.&amp;lt;/param&amp;gt;
	/// &amp;lt;param name=&amp;quot;backupSet&amp;quot;&amp;gt;The backup set.&amp;lt;/param&amp;gt;
	/// &amp;lt;returns&amp;gt;A class containing the Folders and Files we can request along with their full path that
	/// will be used inside the IsolatedStorage&amp;lt;/returns&amp;gt;
	[OperationContract]
	BackupSet GetBackupSetInfo(string application, string backupSet);

	/// &amp;lt;summary&amp;gt;
	/// Uploads the file as a byte array.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;fileUploadInfoInfo&amp;quot;&amp;gt;Application,BackupSet,Filename and content bytes&amp;lt;/param&amp;gt;
	/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
	[OperationContract]
	void UploadBytes(FileUploadInfo fileUploadInfoInfo);

	/// &amp;lt;summary&amp;gt;
	/// Opens a stream for downloading data.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;fileDownloadInfoInfo&amp;quot;&amp;gt;The file download info.&amp;lt;/param&amp;gt;
	/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
	[OperationContract]
   	Stream DownloadStream(FileDownloadInfo fileDownloadInfoInfo);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;You can check the actual implementation looking at the source code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WP7BackupServicePhone&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This is a bit more interesting: the main purpose of the classes inside this project is to build a wrapper around the WCF service and expose a series of functions you can call to use the backup and restore features in a very simple way, in-fact all you’ll have to do is actually create an instance of the BackupService class, subscribe to the BackupCompleted and RestoreCompleted events and call the PerformBackup() or PerformRestore() functions.&lt;/p&gt;

&lt;p&gt;The main problem here is how to make synchronous what synchronous is not (the calls to WCF proxy functions), without blocking the responsiveness of the UI (yes, we’ll use a background thread) and preserving the order of operations; also we’ll need a way to execute event handling code inside the UI thread to be able to update the controls status (without incurring in cross thread operation exceptions).&lt;/p&gt;

&lt;p&gt;Let’s consider the backup operation (the restore stage works more or less the same): we need to simulate synchronous calls because while we are uploading a list of files we do not want to open too many connections to the server, so we’ll move just one file at a time in this first release; here’s the code that recursively explore the IsolatedStorage starting from a known location (pass in string.empty as second argument to explore the whole IsolatedStorage of the application):&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:76816220-d5e3-42ac-ac45-ed4904a37cc9" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;private void UploadFiles(IsolatedStorageFile store, string rootPath, bool resursive)
{
	var files = store.GetFileNames(rootPath + &amp;quot;\\*&amp;quot;);
	foreach (var file in files)
		UploadBytes(Path.Combine(rootPath, file));
	if (!resursive)
		return;
	// get directoryies
	var dirs = store.GetDirectoryNames(rootPath + &amp;quot;\\*&amp;quot;);
	foreach (var dir in dirs)
	{
		string path = Path.Combine(rootPath, dir);
		UploadFiles(store, path, true);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The UploadBytes() function internally makes asynchronous calls to the WCF proxy service to upload the file information and bytes to the server, to make this function appear as synchronous we can use an AutoResetEvent: we will wait on this variable just after making the asynchronous call and we will signal it when the asynchronous operation completes, here’s some code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:be6a7f0d-e275-47e6-afe5-1c72f4b12d54" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
private readonly AutoResetEvent _autoResetEvent = new AutoResetEvent(false);
...
private void UploadBytes(string filename)
{
	_isoStorTemp = new IsolatedStorageFileStream(filename, FileMode.Open, IsolatedStorageFile.GetUserStoreForApplication());
	FileUploadInfo fileUploadInfo = new FileUploadInfo();
	fileUploadInfo.Application = _configuration.Application;
	fileUploadInfo.Set = _configuration.BackupSet;
	fileUploadInfo.Name = filename;
	fileUploadInfo.Bytes = ReadAll(_isoStorTemp);
	_wcfClient.UploadBytesAsync(fileUploadInfo, filename);
	// stop our thread until we get notified by the callback 
	_autoResetEvent.WaitOne();
}

void UploadBytesCompleted(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
{
	_isoStorTemp.Close();
	_autoResetEvent.Set();
}
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Wait...I talked about executing this code in another thread..why?!? The problem here is in the ‘_autoResetEvent.WaitOne()’ statement: if executed in the same thread of the UI it will end up hanging everything! So we can take advantage of the ThreadPool and some lambda expression to invoke our backup functions in another thread:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:f63c3885-faa9-4ee0-81a6-5d464b55c2be" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// this function backs up your entire iso storage (only the sections the application can have safe access to)
/// &amp;lt;/summary&amp;gt;
public void PerformBackup()
{
	ThreadPool.QueueUserWorkItem(o =&amp;gt;
		{
			// first-off prepare the backup set and wait for the server to say ok
			_wcfClient.InitBackupSetCompleted += InitBackupSetCompleted;
			_wcfClient.InitBackupSetAsync(_configuration.Application, _configuration.BackupSet);
			_autoResetEvent.WaitOne();

			// start exploring the IsoStorage for file structures to replicate
			using (var store = IsolatedStorageFile.GetUserStoreForApplication())
			{
				string path = string.Empty; // takes the root
				// process the files
				UploadFiles(store, path, true);
			}
			OnBackupCompleted(EventArgs.Empty);
		});
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The last problem to solve is how to notify the UI from a background thread without incurring in exceptions; this is pretty easy to do in Silverlight/WP7 using the default Dispatcher you can access through Deplayment.Current.Dispatcher:&lt;/p&gt;



&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:657ecd5e-90a8-4c6c-95fe-636d700ab6ba" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public event EventHandler BackupCompleted;

private void OnBackupCompleted(EventArgs e)
{
	Deployment.Current.Dispatcher.BeginInvoke(() =&amp;gt;
       	{
       		EventHandler handler = BackupCompleted;
       		if (handler != null) handler(this, e);
       	});
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;



&lt;p&gt;There we go! Our backup solution is complete now.&lt;/p&gt;

&lt;p&gt;The last thing to see is how to use this piece of software: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a reference to WP7BackupServicePhone to your project.&lt;/li&gt;

  &lt;li&gt;Add the following information to your ServiceReference.ClientConfig file (or create one if you don’t have it)
    &lt;br /&gt;

    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a4bac981-0211-4daa-9a10-1a5e74b92e7d" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;system.serviceModel&amp;gt;
        &amp;lt;bindings&amp;gt;
            &amp;lt;basicHttpBinding&amp;gt;
                &amp;lt;binding name=&amp;quot;BasicHttpBinding_IBackupService&amp;quot; maxBufferSize=&amp;quot;2147483647&amp;quot;
                    maxReceivedMessageSize=&amp;quot;2147483647&amp;quot;&amp;gt;
                    &amp;lt;security mode=&amp;quot;None&amp;quot; /&amp;gt;
                &amp;lt;/binding&amp;gt;
            &amp;lt;/basicHttpBinding&amp;gt;
        &amp;lt;/bindings&amp;gt;
        &amp;lt;client&amp;gt;
            &amp;lt;endpoint address=&amp;quot;http://192.168.1.10:1024/WP7BackupService&amp;quot;
                binding=&amp;quot;basicHttpBinding&amp;quot; bindingConfiguration=&amp;quot;BasicHttpBinding_IBackupService&amp;quot;
                contract=&amp;quot;Service.IBackupService&amp;quot; name=&amp;quot;BasicHttpBinding_IBackupService&amp;quot; /&amp;gt;
        &amp;lt;/client&amp;gt;
    &amp;lt;/system.serviceModel&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

    &lt;br /&gt;don’t worry about the address it will be overridden at runtime.&lt;/li&gt;

  &lt;li&gt;You can now create instances of the BackupService class, wire up to the events and call the PerformBackup() and PerformRestore() functions, like this
    &lt;br /&gt;

    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:9f749252-dd99-47a6-9eb6-26ccd6fbd008" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;private void BackupClick(object sender, EventArgs e)
{
	BackupService srvc = new BackupService(
		new BackupServiceConfiguration
			{
				Application=&amp;quot;bcc&amp;quot;, BackupSet = &amp;quot;Test&amp;quot;, WcfService = &amp;quot;http://192.168.1.10:1024/WP7BackupService&amp;quot;
			});
	srvc.BackupCompleted += SrvcBackupCompleted;
	srvc.PerformBackup();
}

static void SrvcBackupCompleted(object sender, EventArgs e)
{
	MessageBox.Show(&amp;quot;Backup Completed&amp;quot;);
}

private void RestoreClick(object sender, EventArgs e)
{
	BackupService srvc = new BackupService(
		new BackupServiceConfiguration
			{
				Application = &amp;quot;bcc&amp;quot;, BackupSet = &amp;quot;Test&amp;quot;, WcfService = &amp;quot;http://192.168.1.10:1024/WP7BackupService&amp;quot;
			});
	srvc.RestoreCompleted += SrvcRestoreCompleted;
	srvc.PerformRestore();
}

static void SrvcRestoreCompleted(object sender, EventArgs e)
{
	MessageBox.Show(&amp;quot;Restore Completed, Restart the application please.&amp;quot;);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full source code for these two project is available on CodePlex at this url:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wp7backupservice.codeplex.com/"&gt;http://wp7backupservice.codeplex.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project still miss some things, like better notifications and a sample for the usage, but in the spirit of ‘deliver it early’ I decided to post it as is right now.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/wp7-backup-service</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wp7-backup-service#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wp7-backup-service</guid><pubDate>Tue, 15 Feb 2011 17:34:00 GMT</pubDate><category>WP7</category><category>WCF</category><category>IsolatedStorage</category><category>Backup</category></item><item><title>WP7 - A DataContractSerializer Bug ?</title><description>&lt;p&gt;
	As we saw in the previous article the DataContractSerializer is able to serialize and deserialize class hierarchies, let&amp;rsquo;s review the example again:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:27b43a7d-4d11-4619-ac3a-c594c5a2ccea" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[DataContract]
public class Entity
{
	public int M1;

	[DataMember]
	public string P1 { get; set; }
}

[DataContract]
public class Derived : Entity
{
	[DataMember]
	public string P2 { get; set; }
}
...
// can serialize and deserialize derived classes and class hierarchies
Derived d = new Derived();
d.P1 = &amp;quot;base&amp;quot;;
d.P2 = &amp;quot;derived&amp;quot;;
string data = DataContractSerializerHelpers.Serialize(d);
MessageBox.Show(data);
Derived deser = DataContractSerializerHelpers.Deserialize&lt;derived&gt;(data);
// deser holds the correct values
MessageBox.Show(string.Format(&amp;quot;Deserialized values, P1: {0} P2: {1}&amp;quot;, deser.P1, deser.P2));&lt;/derived&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	When you run the example you will see the the serialized stream data will look like:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4615d357-5f81-43e0-9ecf-49830eb7f7e5" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&lt;derived xmlns="http://schemas.datacontract.org/2004/07/WP7DataContractSerializerBug.Domain" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;p1&gt;base&lt;/p1&gt;
  &lt;p2&gt;derived&lt;/p2&gt;
&lt;/derived&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	And the object is also deserialized in a correct way.&lt;/p&gt;
&lt;p&gt;
	But if your derived class DO NOT expose any public or [DataMember] marked member the DataContractSerializer will fail in persisting the object: it will just ignore any of the base class properties and the object will be serialized as empty, let&amp;rsquo;s see some sample code:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:e3254687-5597-476d-be98-f5ec225ac3f7" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[DataContract]
public class Entity
{
	public int M1;

	[DataMember]
	public string P1 { get; set; }
}

[DataContract]
public class DerivedBug : Entity
{

}
...
// if the derived class has no public property or datamember the object is not serialized correctly:
// none of the base class properties are persisted
DerivedBug d = new DerivedBug();
d.P1 = &amp;quot;base&amp;quot;;
string data = DataContractSerializerHelpers.Serialize(d);
MessageBox.Show(data);
DerivedBug deser = DataContractSerializerHelpers.Deserialize&lt;derivedbug&gt;(data);
// the object is deserialized but all its properties have the default values (that is P1 is null)
MessageBox.Show(string.Format(&amp;quot;Deserialized values, P1: {0} (it should be &amp;#39;base&amp;#39;)&amp;quot;, string.IsNullOrEmpty(deser.P1) ? &amp;quot;null&amp;quot; : deser.P1));&lt;/derivedbug&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	When you serialize the &amp;lsquo;DerivedBug&amp;rsquo; class, you will obtain a data stream like the following:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:aa075ee0-19c7-4614-b21f-2c469fca9f15" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&lt;derivedbug xmlns="http://schemas.datacontract.org/2004/07/WP7DataContractSerializerBug.Domain" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/derivedbug&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	This means that the object will exists, but its deserialized properties will have their default values (also you have to remember that your parameterless constructor will not be called too). So you will get back an empty instance of the DerivedBug class.&lt;/p&gt;
&lt;p&gt;
	To workaround this issue you will have to add a &amp;lsquo;fake&amp;rsquo; property to your class and just avoid using it (add proper documentation to explain why that property is there):&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:71005082-0e64-4de2-b837-d591d8cfe37c" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;/// &lt;summary&gt;
/// This is a workaround to a bug in WP7 DataContractSerializer
/// where no data will be serialized for a class if it
/// doesn&amp;#39;t have an explicit DataMember property or field.
/// &lt;/summary&gt;
[DataMember]
public int U;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	For a complete series of examples you can download the attached project:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:d2682abd-a1fb-497e-970d-4f008054ae8f" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;div&gt;
		&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/WP7DataContractSerializerBug.zip" target="_self"&gt;WP7DataContractSerializerBug.zip&lt;/a&gt;&lt;/div&gt;
	&lt;p&gt;
		&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;</description><link>http://www.primordialcode.com/blog/post/wp7-datacontractserializer-bug</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wp7-datacontractserializer-bug#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wp7-datacontractserializer-bug</guid><pubDate>Thu, 10 Feb 2011 18:08:40 GMT</pubDate><category>WP7</category><category>Serialization</category><category>DataContract</category><category>Bug</category></item><item><title>WP7 - Understanding Serialization</title><description>&lt;p&gt;
	While I was learning and writing my first WP7 application I realized that understanding the serialization mechanism is vital if you want to write a WP7 application. You will probably end up using it when persisting data to the isolated storage and (implicitly) when you save the application state to the page state or to the global application state object.&lt;/p&gt;
&lt;p&gt;
	So I&amp;rsquo;m writing this post as a reminder to myself and to summarize some of the key points of the matter.&lt;/p&gt;
&lt;p&gt;
	WP7 actually supports two different types of serialization:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strike&gt;Binary Serialization - this is the fastest and most compact form of serialization, but it&amp;rsquo;s also the less flexible one.&amp;nbsp;&lt;br /&gt;
		&lt;/strike&gt;(as correctly pointed out by Greg Finzer there&amp;#39;s no built-in binary serialization in WP7, you need to write your own).&lt;/li&gt;
	&lt;li&gt;
		Xml Serialization.&lt;/li&gt;
	&lt;li&gt;
		DataContract Serialization - this is the default method used by the framework when it serializes and deserializes objects to the different application state dictionaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	I will not dig into every detail of them because there is already a lot of documentation around (especially in MSDN). The rest of the post will mainly deal with DataContract serialization.&lt;/p&gt;
&lt;p&gt;
	To be able to use the DataContractSerializer effectively you have to remind that:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		You can serialize public types, fields and properties; your properties must have a getter and a setter in order to be serialized (you will incur in an exception if you try to serialize a public property without a getter).&lt;/li&gt;
	&lt;li&gt;
		DataContractSerializer works with an opt-in philosophy, which means that you need to specify what you want to serialize using [DataContract] (for classes) and [DataMember] (for field and properties) attributes.&lt;/li&gt;
	&lt;li&gt;
		If you do not specify the [DataContract] and [DataMember] attributes and your type is a public type, any public property and field will be serialized.&lt;/li&gt;
	&lt;li&gt;
		You can &amp;lsquo;break the rule&amp;rsquo; and persist an internal class or internal members if you mark the assemblies containing your types with the [InternalsVisibleTo] attribute with something like: &lt;br /&gt;
		&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a099dacd-b837-4d29-b28b-f0a1c3075a07" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
			&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[assembly: InternalsVisibleTo(&amp;quot;System.Runtime.Serialization&amp;quot;)]&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
		&lt;br /&gt;
		but this isn&amp;rsquo;t recommended and the documentation explicitly says that this attribute should not be used directly in our code. If you do not specify that attribute you will get a SecurityException when trying to serialize an internal class.&lt;/li&gt;
	&lt;li&gt;
		During deserialization the object Constructor will not be called. So if you have part of you object initialization logic in the constructor do not expect it to be called during deserialization. You will need to refactor it to a method and call it after the object deserialize. The following code snippet shows an example: &lt;br /&gt;
		&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b6f710d0-85cf-4248-bdfd-d4a91aeb1f49" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
			&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[DataContract]
public class EntityWithConstructor
{
	public string M1;

	[DataMember]
	public int P1 { get; set; }

	public EntityWithConstructor()
	{
		M1 = &amp;quot;Intialized&amp;quot;;
	}
}

...
// object constructor is not called during deserialization
EntityWithConstructor obj = new EntityWithConstructor();
string data = DataContractSerializerHelpers.Serialize(obj);
MessageBox.Show(data);
EntityWithConstructor deser = DataContractSerializerHelpers.Deserialize&lt;entitywithconstructor&gt;(data);
// deser.M1 will be &amp;quot;&amp;quot;, instead of the &amp;quot;Initialized&amp;quot; specified in the parameterless contructor
MessageBox.Show(&amp;quot;Constructor initialized value (it should be &amp;#39;Initialized&amp;#39;: &amp;quot; + deser.M1);
&lt;/entitywithconstructor&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
	&lt;/li&gt;
	&lt;li&gt;
		Object references aren&amp;rsquo;t preserved by default: if you need to preserve object identity while persisting complex hierarchies you need to set the &amp;lsquo;IsReference&amp;rsquo; parameter to true in the [DataContract] attribute declaration. This helps a lot preventing the circular references problem that may arise with cross linked objects. As an example check the following code: &lt;br /&gt;
		&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:9231899f-2ee4-433a-a2ca-107daae894b1" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
			&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[DataContract]
public class Entity
{
	public int M1;

	[DataMember]
	public string P1 { get; set; }
}

[DataContract(IsReference = true)]
public class IsReferenceEntity
{
	public int M1;

	[DataMember]
	public string P1 { get; set; }
}

public class EntityContainer
{
	public List&lt;entity&gt; Entities;

	public Entity SelectedEntity;

	public List&lt;isreferenceentity&gt; IsReferenceEntities;

	public IsReferenceEntity SelectedIsReferenceEntity;
}
...
// references are preserved if you specify the &amp;#39;IsReference = true&amp;#39; parameter of DataContract attribute
var cont = new EntityContainer();
cont.Entities = new List&lt;entity&gt; {new Entity() { P1 = &amp;quot;E1&amp;quot;}};
cont.SelectedEntity = cont.Entities[0];
cont.IsReferenceEntities = new List&lt;isreferenceentity&gt;() {new IsReferenceEntity(){ P1 = &amp;quot;Ref1&amp;quot;}};
cont.SelectedIsReferenceEntity = cont.IsReferenceEntities[0];

string data = DataContractSerializerHelpers.Serialize(cont);
MessageBox.Show(data);
EntityContainer deser = DataContractSerializerHelpers.Deserialize&lt;entitycontainer&gt;(data);

bool isEqualEntityP1Content = deser.Entities[0].P1 == deser.SelectedEntity.P1; // true
bool isSameEntityInstance = deser.Entities[0] == deser.SelectedEntity; //false

bool isEqualIsReferenceEntityP1Content = deser.IsReferenceEntities[0].P1 == deser.SelectedIsReferenceEntity.P1; //true
bool isSameIsReferenceEntityInstance = deser.IsReferenceEntities[0] == deser.SelectedIsReferenceEntity; //true

string message =
	string.Format(
		&amp;quot;Entity\n - same content: {0}\n - same reference: {1} \n\nIsReferenceEntity\n - same content: {2}\n - same reference: {3}&amp;quot;,
		isEqualEntityP1Content, isSameEntityInstance, isEqualIsReferenceEntityP1Content, isSameIsReferenceEntityInstance);
MessageBox.Show(message);&lt;/entitycontainer&gt;&lt;/isreferenceentity&gt;&lt;/entity&gt;&lt;/isreferenceentity&gt;&lt;/entity&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
	&lt;/li&gt;
	&lt;li&gt;
		The DataContractSerializer is able to persist inherited class hierarchies, but If the objects you are persisting have members that point to the base class types, you will need to mark the classes you are saving with the [KnownTypes] attribute to inform the DataContractSerializer of all the types involved in the serialization process: &lt;br /&gt;
		&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:72b5f050-9428-4a96-9464-ca58e61a183c" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
			&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[DataContract]
public class Entity
{
	public int M1;

	[DataMember]
	public string P1 { get; set; }
}

[DataContract]
public class Derived : Entity
{
	[DataMember]
	public string P2 { get; set; }
}

[DataContract]
[KnownType(typeof(Derived))]
public class DerivedContainer
{
	[DataMember]
	public Entity Entity { get; set; }
}
...
DerivedContainer cont = new DerivedContainer();
cont.Entity = new Derived() {P2 = &amp;quot;data&amp;quot;};

string data = DataContractSerializerHelpers.Serialize(cont);
MessageBox.Show(data);
DerivedContainer deser = DataContractSerializerHelpers.Deserialize&lt;derivedcontainer&gt;(data);
// deser.Entity is of type Derived.
MessageBox.Show(&amp;quot;Type inside Entity field: &amp;quot; + deser.Entity.GetType().Name);
&lt;/derivedcontainer&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	These examples should cover most of the usual usage sceneries of Data Contract Serialization. Attached to this article you can find a simple project that covers all the illustrated cases.&lt;/p&gt;
&lt;p&gt;
	There are however some more considerations I&amp;rsquo;d like to add and they are specific to WP7, it&amp;rsquo;s very important to understand WHEN the WP7 framework performs its automatic serialization and deserialization stages and where to look for serialization errors.&lt;/p&gt;
&lt;p&gt;
	When you add an object in one of the two State Dictionaries (being it the one in PhoneApplicationPage or the one in PhoneApplicationServices) it does not get immediately serialized; the actual operation is delayed until you navigate away from the page or your application gets &amp;lsquo;tombstoned&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;
	In a similar way the deserialization happens when you navigate to the page (for the Page.State dictionary) and when the application is reactivated after the &amp;lsquo;tombstoning&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;
	Due to these considerations do not expect to have immediate feedback on eventual serialization errors of your objects when you add them to the state dictionaries, you will need to navigate away from the page or switch to another application to get notified by errors.&lt;/p&gt;
&lt;p&gt;
	A place to handle these kinds of errors is the &amp;lsquo;UnhandledException&amp;rsquo; event of the application class because the serialization stage is outside your direct control (unless you use a custom serialization mechanism before adding the objects to the state dictionaries). But if this happens your application will for sure be in an unstable state.&lt;/p&gt;
&lt;p&gt;
	To avoid these errors, if you are using the state dictionaries to persist complex data structures (like some ViewModels for example), I&amp;rsquo;d suggest to create a very simple DataContractSerializer helper class (like the one you can find inside the test project) and use it to setup a project to test if your objects can be correctly serialized by the framework.&lt;/p&gt;
&lt;p&gt;
	Sample project:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:3e58afef-dddc-4464-86f5-5c3e440ea07e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;p&gt;
		&amp;nbsp;&lt;/p&gt;
	&lt;div&gt;
		&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/WP7DataContractSerializer.zip" target="_self"&gt;WP7DataContractSerializer.zip&lt;/a&gt;&lt;/div&gt;
	&lt;p&gt;
		&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;</description><link>http://www.primordialcode.com/blog/post/wp7-understanding-serialization</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wp7-understanding-serialization#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wp7-understanding-serialization</guid><pubDate>Tue, 08 Feb 2011 17:06:41 GMT</pubDate><category>WP7</category><category>Serialization</category><category>DataContract</category></item><item><title>Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType</title><description>&lt;p&gt;It’s a fact that the Visual Studio 2010 Designer has some problems when dealing with inherited windows forms with a very very deep inheritance hierarchy (inheritance level &amp;gt; 2).&lt;/p&gt;  &lt;p&gt;Working on one of my legacy project I converted from VS2008 to VS2010, I had to edit some forms and when I tried to open them in the designer I got the following error:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Value cannot be null. Parameter name: objectType      &lt;br /&gt;at System.ComponentModel.TypeDescriptor.TypeDescriptionNode.GetRuntimeType(Type objectType)       &lt;br /&gt;at System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type reflectionType)       &lt;br /&gt;at Microsoft.VisualStudio.Design.MultiTargetingContextProvider.GetRuntimeType(Type objectType)       &lt;br /&gt;at Microsoft.VisualStudio.Design.Serialization.CodeDom.HandlesClauseManager.GetFieldType(String fieldName, Type documentBaseType)       &lt;br /&gt;at Microsoft.VisualStudio.Design.Serialization.CodeDom.HandlesClauseManager.GetReferencedComponentType(String componentName, CodeTypeDeclaration codeTypeDecl, ITypeResolutionService loader, IDictionary&amp;amp; cache)       &lt;br /&gt;at Microsoft.VisualStudio.Design.Serialization.CodeDom.HandlesClauseManager.ParseHandlesClauses(CodeTypeDeclaration codeTypeDecl, Boolean updateCache)       &lt;br /&gt;at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomParser.OnMethodPopulateStatements(Object sender, EventArgs e)       &lt;br /&gt;at System.CodeDom.CodeMemberMethod.get_Statements()       &lt;br /&gt;at System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration)       &lt;br /&gt;at System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager manager)       &lt;br /&gt;at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)       &lt;br /&gt;at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32 fReload) &lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;My first reaction was: Panic! sometimes the problem was there and sometimes (very few times to be honest) I could open the forms and edit them correctly.&lt;/p&gt;  &lt;p&gt;The designer offer us the choice to ignore the error and go on editing...using that I had two possible results:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;The form opens up correctly in the designer without altering the code. &lt;/li&gt;    &lt;li&gt;A complete environment crash. &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Having these crashes is not acceptable and time loosing, I had to find the cause of this problem. So I gave an in-depth look at what Visual Studio is telling me with this error: walking the stack trace you can find that the HandlesClauseManager class is actually the source of all problems. The name of the class and the fact that the project was written in Visual Basic rang a bell, so I started to comment out all the ‘handles eventname’ clauses on every WithEvents variable on the target form, save and reopen the form in the designer designer and everything seemed to work properly.&lt;/p&gt;  &lt;p&gt;Once you find the cause of the problem, the next step is to reproduce the issue in a new empty test project; so far I’ve been able to reproduce this problem in two different ways:&lt;/p&gt;  &lt;p&gt;- Adding a control to the form, attaching some handlers with the designer and then remove the control. if some of the function event handlers remain on the code with the ‘handles eventname’ there you have your error, because the Designer is trying to attach the events to a non existing object. A build of the project will however spot the problem.&lt;/p&gt;  &lt;p&gt;- Using inherited forms: I declared a protected WithEvents variable on the base form:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:277bb25c-d060-4c01-abdb-f19ac9341176" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: vb; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;Public Class Form1
	Protected WithEvents bmb As CurrencyManager

	Private Sub bmb_CurrentChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles bmb.ListChanged
		' ...
	End Sub
End Class&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This form works correctly and opens up in the designer. Since we had a very deep hierarchy I inherited a second form and attached the event to the CurrencyManager in this form too:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:54d0aecc-1bfc-4305-9b76-22978bcf3e30" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: vb; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;Public Class Form2
	' taken from the partial class code file for illustrative purposes
	Inherits WindowsApplication1.Form1

	Private Sub bmb_CurrentChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles bmb.ListChanged

	End Sub
End Class&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This forms opens up correctly in the designer, but the interesting thing is that if you switch to the code editing view and try to open up the combobox showing all the form members the CurrencyManager is not listed there (it was on Visual Studio 2008), that’s not a big issue I just attached the event directly coding it, nonetheless this is a warning that inherited forms will have problems with events attached to protected WithEvents variables in some inherited forms.&lt;/p&gt;

&lt;p&gt;As I said before our form hierarchy inheritance tree is quite deep, so I added a third form inherited from Form2 and again I attached the event manually:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4e6e1590-2468-4f85-9955-a262521e1f00" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: vb; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;Public Class Form3
	Inherits WindowsApplication1.Form2

	Public Sub bmb_CurrentChanged2(ByVal sender As Object, ByVal e As System.EventArgs) Handles bmb.CurrentChanged

	End Sub
End Class&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Trying to open up this form in the designer finally shows the problem. it will not work, and sometimes ignoring the issue and forcing the designer to open the whole Visual Studio crashes.&lt;/p&gt;

&lt;p&gt;The workaround to the problem here is simple: attach the events using ‘addhandler’ and remove them using ‘removehandler’ rather than having the HandlesClauseManager do the dirty work for you. C# is naturally immune to this problem.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010"&gt;How to update your TFS Workspace after CodePlex upgrade to TFS2010&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;&lt;strong&gt;More related document (12)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype</guid><pubDate>Thu, 13 Jan 2011 17:45:43 GMT</pubDate><category>Visual studio 2010</category><category>Designer</category><category>Error</category></item><item><title>NHibernate Mapping Explorer Preview 2</title><description>&lt;p&gt;In the past week I had the chance to make some improvements and fixes to my NHibernate &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; Mapping Explorer utility (more info on my previous post: &lt;a href="http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer" target="_blank"&gt;http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer&lt;/a&gt;), so here are some of the ‘hot spots’ of this release:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;You can now safely use ANY version of NHibernate 3 and ConfORM when exploring your own mappings, the utility will default to the bundled ones only if it cannot find your specific copies of the DLLs in the directory under probing. &lt;/li&gt;    &lt;li&gt;You can specify any Driver and Dialect that will be used to generate the database scripts (even your custom provided ones), if nothing is specified the default values are SqlDriver and MsSql2005Dialect. &lt;/li&gt;    &lt;li&gt;The NHibernate logging interception code has been fixed to work even if you do not have the log4net.dll inside the probing directory. &lt;/li&gt;    &lt;li&gt;A new way to discover the DomainMapper has been added: for those that use MEF and .Net Framework 4 you can now export the domain mapper using the following attribute: [Export(&amp;quot;IDomainMapper&amp;quot;)] instead of declaring the IDomainMapper interface. However you still need to implement the two properties that expose the mappings to the outside world (HbmMapping and HbmMappings, see my previous article). &lt;/li&gt;    &lt;li&gt;Some minor fixes to the UI code in general. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I’m not a good designer so the UI isn’t changed much...but here’s how it looks like now:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfOrmToolBox2_2.jpg"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="ConfOrmToolBox2" border="0" alt="ConfOrmToolBox2" src="http://www.primordialcode.com/UserFiles/Guardian/ConfOrmToolBox2_thumb.jpg" width="604" height="412" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 1 &lt;/strong&gt;- The mapping explorer in action showing the ConfORM generated mappings for Dexter Blog Engine.&lt;/p&gt;  &lt;p&gt;If any of you have some ideas or some WPF theme that I can take and customize to improve the UI and the UX a bit...I’m open minded to any suggestion, so don’t hesitate to contact me directly &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_4.png" /&gt;. Any help is always appreciated!&lt;/p&gt;  &lt;p&gt;You can get the updated version here:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:2a10ceea-d997-45f7-ac56-c4c9e2515cca" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfORM%20ToolBox%20Preview2.zip" target="_self"&gt;ConfORM ToolBox Preview2.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;  &lt;p&gt;What’s for the next versions ?&amp;#160; I’d like to find time to work more on this utility and provide the need for only one function to export all the mappings, extend it to support other mapping engines (like Fluent NHibernate) and provide a better navigation experience between the mapped classes.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer"&gt;NHibernate ConfORM Mapping Explorer&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/modify-nhibernate-mappings-runtime"&gt;How to modify NHibernate mappings at Runtime&lt;/a&gt; (11/05/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-mapping-explorer-preview-2"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-mapping-explorer-preview-2</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-mapping-explorer-preview-2#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-mapping-explorer-preview-2</guid><pubDate>Mon, 06 Dec 2010 22:55:43 GMT</pubDate><category>NHibernate</category><category>ConfORM</category><category>Mapping</category></item><item><title>OMG! the ‘17th’ DotNetMarche Workshop “Community Tour 2010” is Here!</title><description>&lt;p&gt;My dear Italian readers ... our User Group reaches the fatal number too...we were tempted to skip it, but we couldn’t resist the challenge! So once again in collaboration with the Ce.S.M.I. of the University of Ancona we take part in the Microsoft Community Tour 2010.&lt;/p&gt;  &lt;p&gt;The event will take place 1st December 2010 and will be hosted at the ‘&lt;em&gt;Aula Magna &amp;quot;Guido Bossi&amp;quot; - Università Politecnica delle Marche - Facoltà di Ingegneria - Via Brecce Bianche - Ancona’.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;This time we’ll see what await us when it comes to talk about:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Developing Windows Phone 7 applications (Roberto Cavallini and Roberto Brunetti) &lt;/li&gt;    &lt;li&gt;Internet Explorer 9 and HTML 5 (Roberto Cavallini) &lt;/li&gt;    &lt;li&gt;Windows Azure (Roberto Brunetti) &lt;/li&gt;    &lt;li&gt;Reactive Framework (Diego Guidi and Andrea Nasoni) &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Plus we’ll have an interesting lab session in which you can try your custom written WP7 applications on real production devices.&lt;/p&gt;  &lt;p&gt;For more information and to register for the event head to our User Group website: &lt;a href="http://www.dotnetmarche.org/eventi/Default.aspx?IDevento=39"&gt;http://www.dotnetmarche.org/eventi/Default.aspx?IDevento=39&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;If you live in Marche you DO NOT have any excuse to miss it! &lt;/p&gt;  &lt;p&gt;See you there.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET&lt;/a&gt; (03/09/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/17th-dotnetmarche-workshop-community-tour-2010"&gt;&lt;strong&gt;More related document (7)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/17th-dotnetmarche-workshop-community-tour-2010</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/17th-dotnetmarche-workshop-community-tour-2010#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/17th-dotnetmarche-workshop-community-tour-2010</guid><pubDate>Wed, 24 Nov 2010 20:11:34 GMT</pubDate><category>DotNetMarche</category><category>Workshop</category><category>Community Tour</category></item><item><title>NHibernate ConfORM Mapping Explorer</title><description>&lt;p&gt;Since when I started using &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; to map my domain entities I felt the need to have something that showed me what type of mappings it generates; you can easily write tests and export the XML generated mappings (you have examples on how to do this in the ConfORM source code sample projects), but I wasn’t very confortable with that solution so I started writing my own mapping explorer utility.&lt;/p&gt;  &lt;p&gt;Some of the key requirements I set are:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;The ability to instantiate and configure ConfORM the same exact way it work in your project.&lt;/li&gt;    &lt;li&gt;The support for mixed mapping techniques (that is part of the domain mapped in XML, as I wrote in &lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques" target="_blank"&gt;my previous article&lt;/a&gt;).&lt;/li&gt;    &lt;li&gt;It should work without a real database connection (for the basic set of features).&lt;/li&gt;    &lt;li&gt;You should not be required to run your application, just point to the assemblies that contain the mappings.&lt;/li&gt;    &lt;li&gt;It should not lock the assemblies when executing, so you are free to change and recompile the codebase with the ToolBox still open.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Minimal set of features:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Point to a folder containing a set of assemblies to explore.&lt;/li&gt;    &lt;li&gt;Discover all the mappings available in the assemblies (even embedded XML files mappings).&lt;/li&gt;    &lt;li&gt;Show each mapped entity and its corresponding mapping.&lt;/li&gt;    &lt;li&gt;The ability to show all the mappings in a single view or navigate between them.&lt;/li&gt;    &lt;li&gt;Show the database SQL generation script.&lt;/li&gt;    &lt;li&gt;Show NHibernate logs and errors while generating the mappings.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;This is the very first drop of my ToolBox Mapping Explorer, it’s like an early development preview and many options are hardcoded (you cannot change the target database type for example, it’s actually stuck to SQL Server 2005), but nonetheless it works. Here’s how the thing looks like right now:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfOrmToolBox_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="ConfOrmToolBox" border="0" alt="ConfOrmToolBox" src="http://www.primordialcode.com/UserFiles/Guardian/ConfOrmToolBox_thumb.jpg" width="602" height="445" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Its usage is quite intuitive: point to a folder containing the set of assemblies you want to examine, hit the ‘Process’ button to discover the defined domain mappers (more on this in a minute), then hit the ‘Show Mapping’ button to start processing and show the mappings.&lt;/p&gt;  &lt;p&gt;After that you can start looking at your mappings (it will show only the automatically generated ones at the moment, any predefined XML mapping will not be displayed) and at the database generation script; if you encounter any error, detailed exception information will be reported in the log box and in the related information box.&lt;/p&gt;  &lt;p&gt;Let’s see how a domain mapper is discovered: this utility is still a bit invasive when it comes to define a domain mapper, in fact to be used it requires that your ConfORM initialization phase is wrapped in a class that implement the following interface:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:e479c6a4-0813-471f-aa5f-5a429ebe82c4" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public interface IDomainMapper
{
	HbmMapping HbmMapping { get; }

	IList&amp;lt;HbmMapping&amp;gt; HbmMappings { get; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;It’s important that you keep the name of the interface and the names of the two properties, here’s an example of usage:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:e638b4c4-9d04-4fd3-8f9f-4ded2d14b57e" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class DomainMapper : IDomainMapper
{
	private static ObjectRelationalMapper _domainInspector;
	private static Mapper _mapper;

	#region IDomainMapper Members

	public HbmMapping HbmMapping
	{
		get
		{
			// compile the mapping for the specified entities
			var types = InitConfOrm();
			return _mapper.CompileMappingFor(types);
		}
	}

	public IList&amp;lt;HbmMapping&amp;gt; HbmMappings
	{
		get
		{
			// compile the mapping for the specified entities
			var types = InitConfOrm();
			return _mapper.CompileMappingForEach(types).ToList();
		}
	}

	private static IEnumerable&amp;lt;Type&amp;gt; InitConfOrm()
	{
		_domainInspector = new ObjectRelationalMapper();

		// define your patterns, and POID stretegies
		var patternsAppliers = new SafePropertyAccessorPack();

		_mapper = new Mapper(_domainInspector, patternsAppliers);

		// define the mapping shape
		// ...		

		return mappedEntities;
	}

	#endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;



&lt;p&gt;That’s it for this post, see you next! Ah... wait... the binaries!&lt;/p&gt;

&lt;p&gt;Here are the compiled download package:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:51c9d320-2ddc-4a4e-8347-83a77076a1df" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfORM%20ToolBox%20Preview.zip" target="_self"&gt;ConfORM ToolBox Preview.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;And here is a ConfORM test project you can use to see the ToolBox in action:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:4684e2d8-c2d6-456c-85aa-f65a3ee50131" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfORM_Tests%20ToolBox.zip" target="_self"&gt;ConfORM ToolBox Preview.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-mapping-explorer-preview-2"&gt;NHibernate Mapping Explorer Preview 2&lt;/a&gt; (12/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/modify-nhibernate-mappings-runtime"&gt;How to modify NHibernate mappings at Runtime&lt;/a&gt; (11/05/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-conform-mapping-explorer"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer</guid><pubDate>Thu, 18 Nov 2010 18:50:18 GMT</pubDate><category>Nhibernate</category><category>ConfORM</category><category>Mapping</category></item><item><title>How to modify NHibernate mappings at Runtime</title><description>&lt;p&gt;When you have the need to modify or change your NHibernate mappings at runtime the obvious choice would be to go for one of a new generation mapping engine (like &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt;, Fluent NHibernate, or anything else), but what about you plain good old XML mapping files you still use?&lt;/p&gt;  &lt;p&gt;Changing them was a nightmare before NHibernate 3...I gave up on the task when I thought I had to pre-load the XML files, parse them, modify them in memory and the feed them to NHibernate; these operations seemed too long and too ‘hacky’ for a task that should have been simple.&lt;/p&gt;  &lt;p&gt;NHibernate 3 comes to the rescue and offers a nice couple of events you can use to inspect and change your mapping before and after they are accepted and bound to be used by the configuration object:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;BeforeBindMapping(object sender, BindMappingEventArgs) - this event is raised before the mapping is actually tied to the configuration object, you can inspect the mapping properties and change their values. Once the mapping is bound it becomes immutable.&lt;/li&gt;    &lt;li&gt;AfterBindMapping(object sender, BindMappingEventArgs) - this event is raised after the mapping is bound to the configuration object, you can use it to inspect the metadata and get some information.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Using these events you have a chance to alter the mapping (acting directly with the NHibernate metadata structures) at runtime, whatever is the mapping method you chosen; in fact these events will be fired when you add the mappings to the NHibernate Configuration object via configuration.AddAssembly(), configuration.AddDeserializedMapping() and so on...&lt;/p&gt;  &lt;p&gt;All the information are encapsulated in the BindMappingEventArgs class, which is something like this:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:cc0754a5-66d3-480f-acb0-582420a86f62" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class BindMappingEventArgs : EventArgs
{
	public NHibernate.Dialect.Dialect Dialect { get; private set; }

	public string FileName { get; private set; }
	
	public HbmMapping Mapping { get; private set; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Dialect: the currently used NHibernate dialect and it gives you information about the currently used database engine.&lt;/p&gt;

&lt;p&gt;FileName: if you use XML mapping files it’s the filename form which the mapping was parsed, otherwise it’s the value you specified in the ‘documentFileName’ parameter when using AddDeserializedMapping() or similar.&lt;/p&gt;

&lt;p&gt;HbmMapping: is the internal deserialized representation of the mapping that NHibernate uses, these are the structures you will interact with when inspecting and changing your mappings at runtime.&lt;/p&gt;

&lt;p&gt;Using these two events doing something like changing the schema of all the mappings at runtime to switch between a production and a test environment is a matter of few lines of code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:48d6574a-4e7a-46b6-a672-596057cd63f1" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public Configuration SetupNHibernate()
{
	var configure = new Configuration();

	// configure NHibernate here
	// ...
	
	configure.BeforeBindMapping += configure_BeforeBindMapping;
	configure.AfterBindMapping += configure_AfterBindMapping;
	
	return configure;
}

void configure_AfterBindMapping(object sender, BindMappingEventArgs e)
{
	// inspect your mapping here
}

void configure_BeforeBindMapping(object sender, BindMappingEventArgs e)
{
	// some metacode that shows you how to change the mappings
	if (production)
		e.Mapping.schema = &amp;quot;Production.dbo&amp;quot;;
	else
		e.Mapping.schema = &amp;quot;Test.dbo&amp;quot;;
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Beware that NbmMapping can contain a very complex series of nested structures, depends on how complex your mappings are...just experiment with it to see how it works.&lt;/p&gt;

&lt;p&gt;This is another cool feature you can have with NHibernate 3.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer"&gt;NHibernate ConfORM Mapping Explorer&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-mapping-explorer-preview-2"&gt;NHibernate Mapping Explorer Preview 2&lt;/a&gt; (12/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/modify-nhibernate-mappings-runtime"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/modify-nhibernate-mappings-runtime</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/modify-nhibernate-mappings-runtime#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/modify-nhibernate-mappings-runtime</guid><pubDate>Fri, 05 Nov 2010 17:30:26 GMT</pubDate><category>NHibernate</category><category>Mapping</category><category>Runtime</category></item><item><title>Hands on ConfORM: our first pattern appliers (how to customize tables and properties names)</title><description>&lt;p&gt;In the previous articles of this series we saw how to initialize the &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; engine and how we can use it in an already existing project that make use of XML files to map the domain.&lt;/p&gt;  &lt;p&gt;This time I would like to show you how you can customize some aspects of the generated mappings. One of the first things you will always need is to define your own patterns to give names to tables and fields so they can respect your conventions; I will use this scenario as a basic example to show you how flexible ConfORM is when it comes to define the shape of your mappings.&lt;/p&gt;  &lt;p&gt;ConfORM works by discovering patterns through you domain model and applying customizations to what it’s able to identify, let’s take a look at the interface involved in the process:&lt;/p&gt;  &lt;p&gt;IxxxMapper (IClassAttributesMapper, IPropertyMapper, etc...): ConfORM exposes a series of objects used to define each and every aspect of the mapping, they are used to set tables and column names, types, precision, etc...You have a mapper for almost everything from classes, id fields, types of relationships between entities...they are simply too many to be listed here, so take a look at the source code.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:17ce4ac6-4b62-4774-a585-2b0992857797" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public interface IPattern&amp;lt;TSubject&amp;gt;
{
	bool Match(TSubject subject);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;IPattern&amp;lt;TSubject&amp;gt;: this interface defines a pattern you want to implement; TSubject is the type of data (usually coming from reflection) you are analyzing to discover if the pattern you are going to implement can be applied to the type. This interface has a single method - Match() - that returns a boolean stating if the pattern can be applied to this type of object.&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:cd12aa8d-c41f-40ba-805c-ee3c9b6e924c" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public interface IPatternApplier&amp;lt;TSubject, TApplyTo&amp;gt; : IPattern&amp;lt;TSubject&amp;gt;
{
	void Apply(TSubject subject, TApplyTo applyTo);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;IPatternApplier&amp;lt;TSubject, TApplyTo&amp;gt;: this the interface your patterns have to implement in order to be usable by ConfORM. TSubject is the same as before; TApplyTo is one of the available mappers exposed by ConfORM (IClassAttributesMapper, IPropertyMapper and so on...), we talked about them before. It has a single Apply() function member you will use to invoke the methods of the mapper in order to set the mapping properties to the desired values.&lt;/p&gt;

&lt;p&gt;Understanding the usage of this interface is vital to be able to buildup our patterns: it defines a generic pattern that can be applied to elements of type TSubject and that will act on the mappings defined by TApplyTo.&lt;/p&gt;

&lt;p&gt;What we need to do to define our naming patterns is to implement IPatternApplier&amp;lt;T1,T2&amp;gt; and add the custom logic to define the tables and column names; let’s see two very simple examples:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:99510917-d283-4105-bf3e-a248e1736efd" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class ClassNamingApplier : IPatternApplier&amp;lt;Type, IClassAttributesMapper&amp;gt;
{
	#region IPattern&amp;lt;Type&amp;gt; Members

	public bool Match(Type subject)
	{
		return subject != null;
	}

	#endregion

	#region IPatternApplier&amp;lt;Type,IClassAttributesMapper&amp;gt; Members

	public void Apply(Type subject, IClassAttributesMapper applyTo)
	{
		applyTo.Table(&amp;quot;Test&amp;quot; + subject.Name);
	}

	#endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The ClassNamingApplier is used to define a custom naming strategy for our database tables. TSubject in this case is the Type that represent the domain entity we are currently mapping, TApplyTo is the mapper object (IClassAttributesMapper) used to define the attributes of a &amp;lt;class&amp;gt; mapping; so this class represents a pattern that will act on entities and that will modify the attributes of the generated &amp;lt;class&amp;gt; mappings.&lt;/p&gt;

&lt;p&gt;In line 07 we just state that this pattern can be applied to any object (you can have way more complex matching logic here).&lt;/p&gt;

&lt;p&gt;In line 16 we set the custom name of the database table that will be mapped to this entity data.&lt;/p&gt;

&lt;p&gt;To change the names of the properties we need to implement another pattern applier:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5fb641e8-98b8-4736-a5a0-c207d70bb7e3" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class PropertyNamingApplier : IPatternApplier&amp;lt;MemberInfo, IPropertyMapper&amp;gt;
{

	#region IPatternApplier&amp;lt;MemberInfo,IPropertyMapper&amp;gt; Members

	public void Apply(MemberInfo subject, IPropertyMapper applyTo)
	{
		applyTo.Column(&amp;quot;Test&amp;quot; + subject.Name);
	}

	#endregion

	#region IPattern&amp;lt;MemberInfo&amp;gt; Members

	public bool Match(MemberInfo subject)
	{
		return (subject != null);
	}

	#endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;PropertyNamingApplier defines a pattern that will act on class’ members and will modify the mapped properties: TSubject is a MemberInfo object that describes the property under examination, TApplyTo is of type IPropertyMapper; this object will then be used to define a pattern that can be applied to the properties of a domain entity.&lt;/p&gt;

&lt;p&gt;To fully define your custom naming strategy you need to implement several type of pattern appliers, in this blog post I just show you how you can define two of them, in the attached solution you can see some other examples. However to have a complete overview of the appliers you can write I encourage you to check the source code of ConfORM.&lt;/p&gt;

&lt;p&gt;The last step needed to have everything work is to inform ConfORM of the existence of these new pattern:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b9b2866b-b6f2-43a5-8485-6447d26c9574" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;var orm = new ObjectRelationalMapper();

// set the Persistence Object ID strategy
var patternsAppliers = new SafePropertyAccessorPack();
// add a custom naming strategy to alter the Table names
patternsAppliers.Merge(new ClassNamingApplier());
// add a custom naming strategy to alter the Id columns names
patternsAppliers.Merge(new IdNamingApplier());
// add a custom naming strategy to alter the Property column names
patternsAppliers.Merge(new PropertyNamingApplier());
// add a custom naming strategy for the relationships
patternsAppliers.Merge(new ManyToOneColumnNamingApplier());
patternsAppliers.Merge(new OneToManyKeyColumnNamingApplier(orm));

var mapper = new Mapper(orm, patternsAppliers);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Here I used a predefined pattern pack and added to it some of my custom pattern appliers, the resulting mapping is reported below:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4965dd18-3a3e-49c9-93c1-f06133432fbc" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;hibernate-mapping xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; namespace=&amp;quot;ConfORM_Tests.Domain&amp;quot; assembly=&amp;quot;ConfORM_Tests&amp;quot; xmlns=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&amp;gt;
  &amp;lt;class name=&amp;quot;Person&amp;quot; table=&amp;quot;TestPerson&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; column=&amp;quot;TestId&amp;quot; type=&amp;quot;Int32&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;hilo&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;discriminator /&amp;gt;
    &amp;lt;property name=&amp;quot;FirstName&amp;quot; column=&amp;quot;TestFirstName&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;LastName&amp;quot; column=&amp;quot;TestLastName&amp;quot; /&amp;gt;
    &amp;lt;bag name=&amp;quot;Pets&amp;quot;&amp;gt;
      &amp;lt;key column=&amp;quot;TestOWNER_ID&amp;quot; /&amp;gt;
      &amp;lt;one-to-many class=&amp;quot;Pet&amp;quot; /&amp;gt;
    &amp;lt;/bag&amp;gt;
    &amp;lt;property name=&amp;quot;Long&amp;quot; column=&amp;quot;TestLong&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;Guid&amp;quot; column=&amp;quot;TestGuid&amp;quot; /&amp;gt;
    &amp;lt;list name=&amp;quot;HeldItems&amp;quot;&amp;gt;
      &amp;lt;key column=&amp;quot;TestPERSON_ID&amp;quot; /&amp;gt;
      &amp;lt;list-index /&amp;gt;
      &amp;lt;one-to-many class=&amp;quot;Item&amp;quot; /&amp;gt;
    &amp;lt;/list&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;RightHand&amp;quot; column=&amp;quot;TestRightHandId&amp;quot; /&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;LeftHand&amp;quot; column=&amp;quot;TestLeftHandId&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;BirthDate&amp;quot; column=&amp;quot;TestBirthDate&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  &amp;lt;class name=&amp;quot;EntityGuid&amp;quot; table=&amp;quot;TestEntityGuid&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; column=&amp;quot;TestId&amp;quot; type=&amp;quot;Guid&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;guid.comb&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&amp;quot;Name&amp;quot; column=&amp;quot;TestName&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  &amp;lt;class name=&amp;quot;Item&amp;quot; table=&amp;quot;TestItem&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; column=&amp;quot;TestId&amp;quot; type=&amp;quot;Int32&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;hilo&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&amp;quot;Name&amp;quot; column=&amp;quot;TestName&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  ...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As you can notice we have added the “Test” prefix to every object.&lt;/p&gt;

&lt;p&gt;With some very simple classes we were able to implement out custom naming strategy that is ‘spammed’ along all our domain classes; if you need to fine tune the naming generation just consider you have full control and all the information about any object involved in the mapping process: you can, for example, give a naming convention to the classes that are in a namespace and a different one to others...and so on.&lt;/p&gt;

&lt;p&gt;Sample project:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:fd3c4c52-05a2-4c1a-965d-4b0f1f3039e3" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfORM_Pattern_Naming.zip" target="_self"&gt;ConfORM_Pattern_Naming.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://www.primordialcode.com/blog/post/conform-pattern-customize-tables-properties-names</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/conform-pattern-customize-tables-properties-names#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/conform-pattern-customize-tables-properties-names</guid><pubDate>Thu, 28 Oct 2010 18:57:18 GMT</pubDate><category>NHibernate</category><category>ConfORM</category><category>Pattern</category></item><item><title>NHibernate Linq provider: dynamic filtering using lambda expressions</title><description>&lt;p&gt;Working with the new NHibernate Linq provider I needed a simple way to dynamically buildup a ‘filtering’ lambda expression to be used as the where clause in a select operation; nothing you cannot already do with the ICriteria/QueryOver API or with HQL...but I thought it would be cool to have the same feature with the Linq provider.&lt;/p&gt;  &lt;p&gt;This way I can maybe reuse part of the filtering expression for in memory elaborations, create my &lt;a href="http://fabiomaulo.blogspot.com/2010/07/enhanced-query-object.html" target="_blank"&gt;EQO&lt;/a&gt; easier uing Linq to NHibernate or I can change it on the fly in other layers of the application (maybe not the best practice when it comes to data access strategies, but nonetheless it’s a feature you can use in some sceneries)&lt;/p&gt;  &lt;p&gt;Currently concatenating expressions using an ‘AND’ operator isn’t that difficult: all you have to do is to keep calling ‘Where(Func&amp;lt;T, TResult&amp;gt;())’ before your non deferred operators.&lt;/p&gt;  &lt;p&gt;Let’s see an example:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:612b481a-f392-46b3-8e12-f6f12a5573de" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; "&gt;Dal.List&amp;lt;PersonaleReparto&amp;gt;().Where(pr =&amp;gt; pr.Name == &amp;quot;Max&amp;quot;).Where(pr =&amp;gt; pr.Attributes.IsLike(&amp;quot;%M%&amp;quot;)).ToList();&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;which generates the following SQL:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:db40f4a7-44f6-4680-8f82-a5354591ce3a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; "&gt;select
   personaler0_.Id as Id158_,
   personaler0_.Name as Name158_,
   personaler0_.Surname as Surname158_,
   personaler0_.Title as Title158_,
   personaler0_.BuiltIn as BuiltIn158_,
   personaler0_.SortOrder as SortOrder158_,
   personaler0_.Description as Descript7_158_,
   personaler0_.Deleted as Deleted158_,
   personaler0_.Attributes as Attributes158_ 
from
   Neurologia.dbo.tbl_PersonaleReparto personaler0_ 
where
   (
       (
           personaler0_.Name is null
       ) 
       and (
           @p0 is null
       ) 
       or personaler0_.Name=@p0
   ) 
   and (
       personaler0_.Attributes like @p1
   );
@p0 = 'Max' [Type: String (4000)], @p1 = '%M%' [Type: String (4000)]
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The problem comes if we want to express some of our conditions as ‘OR’ or some other operators; we cannot do it easily! What we can do is to play around with our Expression Trees and buildup a proper function that we’ll use in the where clause. In short we want to be able to do something like this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:84110ba9-c54d-4aa7-93ef-5723be20a3c7" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; "&gt;// Create a filtering predicate
Expression&amp;lt;Func&amp;lt;PersonaleReparto, bool&amp;gt;&amp;gt; predicate = pr =&amp;gt; !pr.Deleted &amp;amp;&amp;amp; pr.Attributes.IsLike(&amp;quot;%M%&amp;quot;);

// use our PredicateBuilder function to add some more filetring expressions...your complex logic goes here!
// AND
predicate = predicate.And(pr =&amp;gt; pr.Attributes.IsLike(&amp;quot;%C%&amp;quot;));
	
// OR
predicate = predicate.Or(p =&amp;gt; p.Id == 0);

var result = Dal.List&amp;lt;PersonaleReparto&amp;gt;().Where(predicate).OrderBy(pr =&amp;gt; pr.SortOrder).ToList();&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;We define a basic predicate and we keep concatenating filtering expressions using our custom defined AND and OR extension methods.&lt;/p&gt;

&lt;p&gt;In this proof of concept we’re going to implement only the And and Or operators. &lt;/p&gt;

&lt;p&gt;The basic idea is quite simple: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Where() extension method accept a Func&amp;lt;T, TResult&amp;gt; as its argument, so we will always deal with those type of functions. &lt;/li&gt;

  &lt;li&gt;To be able to concatenate two (or more) filtering functions we need to act on the function bodies, the argument will always be the same. &lt;/li&gt;

  &lt;li&gt;Our ‘And’ and ‘Or’ operators are binary operators that taken two lambda expressions (expr1, expr2) generate a new expression which is the concatenation of the two - expr1.body AND/OR expr2.body, the argument of this new function will be the argument of the starting predicate. &lt;/li&gt;

  &lt;li&gt;Expressions are immutable! We might need to ‘adapt’ the second expression to make the arguments coherent before merging the bodies, we do this visiting the second expression (if needed) and creating a new expression replacing the argument. &lt;/li&gt;

  &lt;li&gt;The And() and Or() will be implemented as extension methods that act on Expression&amp;lt;Func&amp;lt;T, TResult&amp;gt;&amp;gt; arguments. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can write the ‘Or’ extension method like this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c83aa7ab-b92f-4496-b221-44d04634eec4" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public static Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; Or&amp;lt;T&amp;gt;(this Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr1,
													Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr2)
{
	// create a new expression tree that replace the argument of the second expression with the argument on the first one
	LambdaExpression lambdaExpression = RebuildExpressionIfNeeded(expr1.Parameters[0], expr2);

	return Expression.Lambda&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt;
		  (Expression.OrElse(expr1.Body, lambdaExpression.Body), expr1.Parameters);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;In line 5 we rebuild a new expression if needed (more on this second).&lt;/p&gt;

&lt;p&gt;In line 7 we build a new lambda function that is based on the bodies of the two function arguments and accept as its own argument the argument of the first function expression.&lt;/p&gt;

&lt;p&gt;The tricky part is the RebuildExpressionIfNeeded function:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:0041f7b6-225a-4334-bf61-4689c520dc91" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// Rebuilds the expression if we need to change the parameter of the second expression because of different names
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;p&amp;quot;&amp;gt;The parameter of the first expression.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;expr2&amp;quot;&amp;gt;The expr2.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static LambdaExpression RebuildExpressionIfNeeded&amp;lt;T&amp;gt;(ParameterExpression p, Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr2)
{
	LambdaExpression lambdaExpression;

	if (p.Name != expr2.Parameters[0].Name)
	{
		Expression expression = (new ParameterModifier()).Modify(expr2, p);
		lambdaExpression = ((LambdaExpression)expression);
	}
	else
		lambdaExpression = expr2;
	return lambdaExpression;
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;If the parameters have the same names we have nothing to do, and we can safely return expr2, otherwise we need to visit the whole expression and create a duplicate replacing the parameter with the one we got from expr1. Writing a full expression tree visitor takes a lot of time, thankfully we have a working implementation in this MSDN article: &lt;a href="http://msdn.microsoft.com/en-us/library/bb882521(VS.90).aspx" target="_blank"&gt;How to: Implement an Expression Tree Visitor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All we have to do is inherit from this class and override the VisitParameter() function to return the the parameter we passed in instead of the original one:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a45dadec-c201-452b-91d3-bdfb37022377" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;internal class ParameterModifier : ExpressionVisitor
{
	public Expression Modify(Expression expression, ParameterExpression newParam)
	{
		_newParam = newParam;
		return Visit(expression);
	}

	private ParameterExpression _newParam;

	protected override Expression VisitParameter(ParameterExpression p)
	{
		return _newParam;
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;That’s all, if now look at the SQL generated for our example we see that everything work!&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c53845b6-13ea-4d4b-b805-5b805c7276f0" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; "&gt;select
   personaler0_.Id as Id158_,
   personaler0_.Name as Name158_,
   personaler0_.Surname as Surname158_,
   personaler0_.Title as Title158_,
   personaler0_.BuiltIn as BuiltIn158_,
   personaler0_.SortOrder as SortOrder158_,
   personaler0_.Description as Descript7_158_,
   personaler0_.Deleted as Deleted158_,
   personaler0_.Attributes as Attributes158_ 
from
   Neurologia.dbo.tbl_PersonaleReparto personaler0_ 
where
   not (personaler0_.Deleted=1) 
   and (
       personaler0_.Attributes like @p0
   ) 
   and (
       personaler0_.Attributes like @p1
   ) 
   or personaler0_.Id=@p2 
order by
   personaler0_.SortOrder asc;
@p0 = '%M%' [Type: String (4000)],
@p1 = '%C%' [Type: String (4000)],
@p2 = 0 [Type: Int32 (0)]
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As a plus, this technique actually works with Linq to Objects too (as you noticed we didn’t used any NHibernate hidden magic here), so you can use it to dynamically filter you in memory structures too.&lt;/p&gt;

&lt;p&gt;Oh... I was forgetting... here’s the full source code for the PredicateBuilder class:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:84885bdd-f1da-43bc-8156-50ebaab694e7" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// a class used to dynamically build lambda functions to be used as filters for Linq providers
/// &amp;lt;/summary&amp;gt;
public static class PredicateBuilder
{
	public static Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; Or&amp;lt;T&amp;gt;(this Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr1,
														Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr2)
	{
		// create a new expression tree that replace the argument of the second expression with the argument on the first one
		LambdaExpression lambdaExpression = RebuildExpressionIfNeeded(expr1.Parameters[0], expr2);

		return Expression.Lambda&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt;
			  (Expression.OrElse(expr1.Body, lambdaExpression.Body), expr1.Parameters);
	}

	public static Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; And&amp;lt;T&amp;gt;(this Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr1,
														 Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr2)
	{
		// create a new expression tree that replace the argument of the second expression with the argument on the first one
		LambdaExpression lambdaExpression = RebuildExpressionIfNeeded(expr1.Parameters[0], expr2);
		
		return Expression.Lambda&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt;
			  (Expression.AndAlso(expr1.Body, lambdaExpression.Body), expr1.Parameters);
	}

	/// &amp;lt;summary&amp;gt;
	/// Rebuilds the expression if we need to change the parameter of the second expression because of different names
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;p&amp;quot;&amp;gt;The parameter of the first expression.&amp;lt;/param&amp;gt;
	/// &amp;lt;param name=&amp;quot;expr2&amp;quot;&amp;gt;The expr2.&amp;lt;/param&amp;gt;
	/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
	private static LambdaExpression RebuildExpressionIfNeeded&amp;lt;T&amp;gt;(ParameterExpression p, Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr2)
	{
		LambdaExpression lambdaExpression;

		if (p.Name != expr2.Parameters[0].Name)
		{
			Expression expression = (new ParameterModifier()).Modify(expr2, p);
			lambdaExpression = ((LambdaExpression)expression);
		}
		else
			lambdaExpression = expr2;
		return lambdaExpression;
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Ouch..this post ended up being quite full of code &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="A bocca aperta" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_3.png" /&gt;.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception"&gt;NHibernate 3 - Extending the Linq Provider to fix some System.NotSupportedException&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-to-nhibernate-string.equals-with-stringcomparison-option"&gt;Linq to NHibernate - String.Equals with StringComparison option&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter"&gt;Linq to NHibernate: how to query on a property without setter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-linq-dynamic-filtering-lambda-expressions"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-linq-dynamic-filtering-lambda-expressions</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-linq-dynamic-filtering-lambda-expressions#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-linq-dynamic-filtering-lambda-expressions</guid><pubDate>Wed, 20 Oct 2010 21:29:26 GMT</pubDate><category>NHibernate</category><category>Linq</category></item><item><title>Hands on ConfORM: mixed mapping techniques</title><description>&lt;p&gt;In the last post we saw how to put &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; in action, this time..before digging into what you can do with it I would like to solve a problem that you (like me) will surely have to face if you plan to use ConfORM in a pre-existing project.&lt;/p&gt;  &lt;p&gt;Let’s consider the typical scenario: you already have NHibernate up and running, but all your mappings are actually done using the standard XML mapping technique (which I still recommend to use when dealing with legacy databases). Now you need to extend the application and you have full control over the new tables that will be added, you don’t want to loose too much time rewriting all your mappings during the development stage; ConfORM is well suited to map this portion of your domain.&lt;/p&gt;  &lt;p&gt;The main problem is that you do not want to touch what’s already working too much (that is you do not want to rewrite all your mapping to use ConfORM along all your application, because you have to define too many exceptions), plus some of your new classes can have references to portions of the domain mapped as XML and vice-versa...the question is: can I use a mixed mapping technique ?&lt;/p&gt;  &lt;p&gt;The answer is: YES! Thanks to NHibernate and ConfORM great flexibility. Let’s see how modifying the example I had in my previous post.&lt;/p&gt;  &lt;p&gt;Our domain consist of the following classes mapped using ConfORM: Person, Adult and Child.&lt;/p&gt;  &lt;p&gt;We introduce a new entity called ‘Alien’ that we will map using XML file, and we’ll define some relationship between this class and the previous ones.&lt;/p&gt;  &lt;p&gt;Here’s how we change the domain:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a354e647-8f66-41f4-9c8f-034f494a2f05" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class Alien
{
	public virtual int Id { get; set; }

	public virtual string Name { get; set; }

	public virtual Person HumanFriend { get; set; }
}

public class Child : Person
{     
	public virtual Adult Father { get; set; }

	public virtual Adult Mother { get; set; }

	public virtual Alien EtFriend { get; set; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As you can see a Child can now have an Alien friend (remember ET ? ) and an Alien can have a human friend.&lt;/p&gt;

&lt;p&gt;Here’s the mapping for the Alien object:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:3b9d635d-db4e-443c-b8ab-1203b2fccdb0" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;hibernate-mapping xmlns=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;
						 namespace=&amp;quot;ConfORM_Tests.Domain&amp;quot;
						 assembly=&amp;quot;ConfORM_Tests&amp;quot;&amp;gt;
	&amp;lt;class name=&amp;quot;Alien&amp;quot; table=&amp;quot;Alien&amp;quot;&amp;gt;
		&amp;lt;id name=&amp;quot;Id&amp;quot;&amp;gt;
			&amp;lt;generator class=&amp;quot;native&amp;quot; /&amp;gt;
		&amp;lt;/id&amp;gt;
		&amp;lt;property name=&amp;quot;Name&amp;quot; /&amp;gt;
		&amp;lt;many-to-one name=&amp;quot;HumanFriend&amp;quot; /&amp;gt;
	&amp;lt;/class&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;We create and initialize the NHibernate configuration object the usual way we do when it comes to XML files:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:eb5dc94d-05da-4ecf-87ff-82ea3d7a22aa" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;Configuration nhConfig = ConfigureNHibernate();

nhConfig.AddAssembly(typeof(Alien).Assembly);
// initialize ConfORM engine
InitializeConfORM(nhConfig);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The ‘major’ changes are done in how we define the mapping shape in ConfORM:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:754cab74-3a06-48d4-abd5-319d735dfeca" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;private static void InitializeConfORM(Configuration nhConfig)
{
	var orm = new ObjectRelationalMapper();
	var mapper = new Mapper(orm);

	// define the mapping shape

	// list all the entities we want to map.
	// let's exclude the 'Alien' which will be mapped with a standard XML file 
	IEnumerable&amp;lt;Type&amp;gt; baseEntities = typeof(Person).Assembly.GetTypes()
		.Where(t =&amp;gt; t.Namespace == typeof(Person).Namespace &amp;amp;&amp;amp; t != typeof(Alien));

	// defines the whole hierarchy coming up from Person
	orm.TablePerClassHierarchy&amp;lt;Person&amp;gt;();

	// we map all the other classes as Table per class
	orm.TablePerClass(baseEntities.Where(t =&amp;gt; !typeof(Person).IsAssignableFrom(t)));

	// specify the relation we have between Child and Alien otherwise conform will generate a property by default.
	// it has no real clue of what an 'Alien' is and we have to help him!
	orm.ManyToOne&amp;lt;Child, Alien&amp;gt;();
	orm.ManyToOne&amp;lt;Alien, Person&amp;gt;();

	// compile the mapping for the specified entities
	HbmMapping mappingDocument = mapper.CompileMappingFor(baseEntities);

	// dump the mapping to the console
	Console.Write(mappingDocument.AsString());

	// inject the mapping in NHibernate
	nhConfig.AddDeserializedMapping(mappingDocument, &amp;quot;Domain&amp;quot;);
	// fix up the schema
	SchemaMetadataUpdater.QuoteTableAndColumns(nhConfig);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The key points are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line 10: we need to exclude the XML mapped entities from the list of classes we want to map with ConfORM. &lt;/li&gt;

  &lt;li&gt;Lines 21-22: we need to specify the kind of relation that will exists between the differently mapped classes, this must be done because ConfORM is not able to discover the relationship by itself. It has no clue of what an Alien is! If we do not help him he will generate a standard ‘property’ mapping for any object it does not know. &lt;/li&gt;

  &lt;li&gt;Lines 25-31: we add the ConfORM generated mapping to the NHibernate configuration. How flexible! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;p&gt;If we look at the generated mapping for the child object we can see:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:04e82eaa-a2d7-4dba-97e8-df89f3be7811" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
  &amp;lt;subclass name=&amp;quot;Child&amp;quot; extends=&amp;quot;Person&amp;quot;&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;Father&amp;quot; /&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;Mother&amp;quot; /&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;EtFriend&amp;quot; /&amp;gt;
  &amp;lt;/subclass&amp;gt;
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Without the hint on the relations we gave to ConfORM it would have generated a &amp;lt;property name=”EtFriend” /&amp;gt; entry for the mapping.&lt;/p&gt;

&lt;p&gt;We can now use NHibernate to generate our database and write a test like this and verify that it passes:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:341a71ad-51b8-472d-9e45-69a923ed1cee" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; "&gt;[Test]
public void T03_ChildAlien_TheyCanBeFriends()
{
	ISessionFactory sf = CreateDatabaseAndGetSessionFactory();

	// create the relation
	using (ISession s = sf.OpenSession())
	{
		int childId;

		using (ITransaction tx = s.BeginTransaction())
		{
			Alien alien = new Alien { Name = &amp;quot;Xfuncz&amp;quot; };
			s.SaveOrUpdate(alien);

			Child child = new Child { FirstName = &amp;quot;Teddy&amp;quot;, LastName = &amp;quot;Strange&amp;quot;, BirthDate = DateTime.Now, EtFriend = alien };
			s.SaveOrUpdate(child);
			childId = child.Id;

			tx.Commit();
		}

		s.Clear();

		using (ITransaction tx = s.BeginTransaction())
		{
			// get the data
			var loaded = s.Get&amp;lt;Child&amp;gt;(childId);

			tx.Commit();

			Assert.IsNotNull(loaded);
			Assert.IsNotNull(loaded.EtFriend);
			Assert.AreEqual(&amp;quot;Xfuncz&amp;quot;, loaded.EtFriend.Name);
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;I’m just amazed by the flexibility of NHibernate and ConfORM.&lt;/p&gt;

&lt;p&gt;I haven’t tested all the possible cases or relations and with very complex object hierarchies I think you can still have trouble and you need to convert part of the mappings, but nonetheless it’s a very good starting point to introduce ConfORM in your existing applications.&lt;/p&gt;

&lt;p&gt;The following file is a complete test project you can use as a reference for the previous example:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:d1acbafd-7c9b-4a6f-a1df-841e974d5106" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfORM_Tests%20MixedMappings_1.zip" target="_self"&gt;ConfORM_Tests MixedMappings.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer"&gt;NHibernate ConfORM Mapping Explorer&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-mapping-explorer-preview-2"&gt;NHibernate Mapping Explorer Preview 2&lt;/a&gt; (12/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/hands-conform-mixed-mapping-techniques"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques</guid><pubDate>Mon, 18 Oct 2010 21:27:54 GMT</pubDate><category>NHibernate</category><category>ConfORM</category></item><item><title>Hands on ConfORM: first steps</title><description>&lt;p&gt;Days ago in one of my &lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform" target="_blank"&gt;previous posts&lt;/a&gt; I talked about &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt;, let’s see in this very short post how you can put it in action in a very simple test project.&lt;/p&gt;  &lt;p&gt;We’ll start by creating a function to configure NHibernate:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:096dea9c-6da1-4ffc-99de-260163186740" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;private static Configuration ConfigureNHibernate()
{
	var configure = new Configuration();
	configure.SessionFactoryName(&amp;quot;Demo&amp;quot;);
	configure.Proxy(p =&amp;gt;
	{
		p.Validation = false;
		p.ProxyFactoryFactory&amp;lt;ProxyFactoryFactory&amp;gt;();
	});
	configure.DataBaseIntegration(db =&amp;gt;
	{
		db.Dialect&amp;lt;MsSql2008Dialect&amp;gt;();
		db.Driver&amp;lt;SqlClientDriver&amp;gt;();
		db.KeywordsAutoImport = Hbm2DDLKeyWords.AutoQuote;
		db.IsolationLevel = IsolationLevel.ReadCommitted;
		db.ConnectionString = ConnectionString;
		db.Timeout = 10;
		db.HqlToSqlSubstitutions = &amp;quot;true 1, false 0, yes 'Y', no 'N'&amp;quot;;

		// enabled for testing
		db.LogFormatedSql = true;
		// db.LogSqlInConsole = true;
		// db.AutoCommentSql = true;
	});
	return configure;
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Until now these are standard NHibernate configuration functions, let’s take a look at how we will map our domain using ConfORM; to keep this post short I will not show the domain classes here, you can see the full example in the attached download.&lt;/p&gt;

&lt;p&gt;When it comes to ConfORM you have to deal mainly with two distinct objects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The ObjectRelationalMapper: which will be used to inject your general mapping rules and patterns in the mapping engine and to define your domain mappings (what classes you want to map and how to map them); this object is used to define the basic shape of your mapping.&lt;/li&gt;

  &lt;li&gt;The Mapper: which will be used to define exceptions to the rules and special cases, to perform some mapping fine tuning and finally to apply the rules and generate an HbmMapping object we can feed to NHibernate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initializing and using ConfORM is simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need to create an instance of the ObjectRelationalMapper, optionally set some properties and patterns you want to use or not to use (you can skip this step if you want to keep the default configuration).&lt;/li&gt;

  &lt;li&gt;You need to create an instance of the Mapper object (which will accept your ObjectRelationalMapper as first argument and a series of optional parameters that will be used to define some pattern appliers... more on this in a next post):
    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d6804a14-88d6-4fd6-9753-d9f8b259c0a5" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;var orm = new ObjectRelationalMapper();
var mapper = new Mapper(orm);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;You can start defining your mapping using the functions exposed by the ORM object:
    &lt;br /&gt;

    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:e698d635-48fd-474a-81b3-fd2ff2aaa888" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;// list all the entities we want to map
IEnumerable&amp;lt;Type&amp;gt; baseEntities = typeof (Person).Assembly.GetTypes().Where(t =&amp;gt; t.Namespace == typeof (Person).Namespace);
// defines the whole hierarchy coming up from Person
orm.TablePerClassHierarchy&amp;lt;Person&amp;gt;();
// we map all the other classes as Table per class
orm.TablePerClass(baseEntities.Where(t =&amp;gt; !typeof(Person).IsAssignableFrom(t)));&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

    &lt;br /&gt;in the specific case I’ve mapped all the classes that inherit from Person using a table per class hierarchy strategy and all the other classes using a table per class strategy.&lt;/li&gt;

  &lt;li&gt;The last two steps are compiling the mappings - you have to specify a list of entities you want to compile the mapping for - calling the CompileMappingFor() function exposed by the mapper object, and feed the generated mapping to NHibernate using the AddDeserializedMapping() function exposed by the configuration object:
    &lt;br /&gt;

    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4a8184d6-8df7-4396-a2e5-de485a93a599" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;// compile the mapping for the specified entities
HbmMapping mappingDocument = mapper.CompileMappingFor(baseEntities);
// dump the mapping to the console
Console.Write(mappingDocument.AsString());
// inject the mapping in NHibernate
NhConfig.AddDeserializedMapping(mappingDocument, &amp;quot;Domain&amp;quot;);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;That’s it! you’re now ready to buildup your SessionFactory and start using it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To dump out the mapping ConfORM generated for us, you can use a very nice extension Fabio presented in the ConfORM.UsageExamples test project (added to the this project too), here’s what we get for our domain:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c0bd07bb-84bf-43b8-97d1-0352a869ac6f" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;hibernate-mapping xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; namespace=&amp;quot;ConfORM_Tests.Domain&amp;quot; assembly=&amp;quot;ConfORM_Tests&amp;quot; xmlns=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&amp;gt;
  &amp;lt;class name=&amp;quot;Person&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; type=&amp;quot;Int32&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;hilo&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;discriminator /&amp;gt;
    &amp;lt;property name=&amp;quot;FirstName&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;LastName&amp;quot; /&amp;gt;
    &amp;lt;bag name=&amp;quot;Pets&amp;quot; inverse=&amp;quot;true&amp;quot; cascade=&amp;quot;all,delete-orphan&amp;quot;&amp;gt;
      &amp;lt;key column=&amp;quot;Owner&amp;quot; on-delete=&amp;quot;cascade&amp;quot; /&amp;gt;
      &amp;lt;one-to-many class=&amp;quot;Pet&amp;quot; /&amp;gt;
    &amp;lt;/bag&amp;gt;
    &amp;lt;property name=&amp;quot;Long&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;Guid&amp;quot; /&amp;gt;
    &amp;lt;list name=&amp;quot;HeldItems&amp;quot;&amp;gt;
      &amp;lt;key column=&amp;quot;person_key&amp;quot; /&amp;gt;
      &amp;lt;list-index /&amp;gt;
      &amp;lt;one-to-many class=&amp;quot;Item&amp;quot; /&amp;gt;
    &amp;lt;/list&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;RightHand&amp;quot; /&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;LeftHand&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;BirthDate&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  &amp;lt;class name=&amp;quot;Pet&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; type=&amp;quot;Int32&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;hilo&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&amp;quot;Name&amp;quot; /&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;Owner&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  &amp;lt;class name=&amp;quot;EntityGuid&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; type=&amp;quot;Guid&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;guid.comb&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&amp;quot;Name&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  &amp;lt;class name=&amp;quot;EntityId&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; type=&amp;quot;Int32&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;hilo&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&amp;quot;Name&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  &amp;lt;class name=&amp;quot;Item&amp;quot;&amp;gt;
    &amp;lt;id name=&amp;quot;Id&amp;quot; type=&amp;quot;Int32&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;hilo&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&amp;quot;Name&amp;quot; /&amp;gt;
  &amp;lt;/class&amp;gt;
  &amp;lt;subclass name=&amp;quot;Adult&amp;quot; extends=&amp;quot;Person&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;Title&amp;quot; /&amp;gt;
  &amp;lt;/subclass&amp;gt;
  &amp;lt;subclass name=&amp;quot;Child&amp;quot; extends=&amp;quot;Person&amp;quot;&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;Father&amp;quot; /&amp;gt;
    &amp;lt;many-to-one name=&amp;quot;Mother&amp;quot; /&amp;gt;
  &amp;lt;/subclass&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Pretty cool, we’ve mapped a whole domain in more or less 8 lines of code and if we keep adding classes very few modifications have to be made; next time we’ll see how we can customize the generated mappings.&lt;/p&gt;

&lt;p&gt;Test Project:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:4142b92c-5cc5-40c0-88b7-12f80a5b3370" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ConfORM_Tests%20(2010-10-14%2013-00-09).zip" target="_self"&gt;ConfORM_Tests (2010-10-14 13-00-09).zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://www.primordialcode.com/blog/post/hands-conform-first-steps</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/hands-conform-first-steps#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/hands-conform-first-steps</guid><pubDate>Thu, 14 Oct 2010 19:09:34 GMT</pubDate><category>NHibernate</category><category>ConfORM</category></item><item><title>#nhday - after event thoughts</title><description>&lt;p&gt;It’s time for some sparse thanksgiving, thoughts and impressions about the event. &lt;/p&gt;  &lt;p&gt;In the first place I have to thank all the developers that stood up and took part as speakers: Oren Eini (Ayende), Rob Ashton, Gian Maria Ricci, Andrea Saltarello, Alberto Brandolini, Igor Antonacci, Luca Milan, Alberto Dallagiacoma and myself Alessandro Giorgetti (why not?!?!?).&lt;/p&gt;  &lt;p&gt;I couldn’t follow the sessions on the second track even if they were extremely appealing...we however have the videos and maybe we can ask the guys to replicate them in some other community workshop we can organize.&lt;/p&gt;  &lt;p&gt;A very special thank goes to Oren Eini and Rob Ashton, it was an honor and a privilege for me to meet you two face to face. It’s very rare to find guys so kind, friendly and passionate for their work as you two are. Seeing you working on RavenDB features during the presentations (while answering other people’s questions) and during our after dinner event with an absolutely crazy brainstorming session was something that you cannot see every day...sometimes I wondered how you could follow the whole conversation with one topic shot right after another without even finishing the previous one...jumping back and forth between different ideas &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="A bocca aperta" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_2.png" /&gt;.&lt;/p&gt;  &lt;p&gt;Also a huge thank to Fabio Maulo who couldn’t come here from Argentina, but who agreed to be available the WHOLE day, whenever we called him for the Q&amp;amp;A session.&amp;#160; &lt;/p&gt;  &lt;p&gt;Speaking of the main track..well it was mainly a ‘one man show’ by Oren, who covered different aspects of the new NHibernate 3 between hidden gems (a couple I didn’t knew really) and worst practices.&lt;/p&gt;  &lt;p&gt;We also had a session about how the new Linq to NHibernate provider is built and what you can do with it, hosted by my good fellow Gian Maria Ricci - perfect as ever - and myself (yay! I managed to survive it!).&lt;/p&gt;  &lt;p&gt;As always happens the Q&amp;amp;A session (with Fabio Maulo as special guest via skype call) started slowly in the beginning...people have to win the shyness &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Sorriso" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-smile_2.png" /&gt; , but then it skyrocketed and we had to stop the flow of questions due to the time limit. &lt;/p&gt;  &lt;p&gt;To close the event we had a bonus session on RavenDB that made me very curious to try it and see if it can fit for some of my applications.&lt;/p&gt;  &lt;p&gt;I couldn’t follow the second track session, so I do not have direct feedback from them yet, but according to what Rob wrote on his &lt;a href="http://codeofrob.com/archive/2010/10/10/nhday-a-post-mortem-debugging-session.aspx" target="_blank"&gt;post event blog-post&lt;/a&gt;, some crazy and funny things happened there too.&lt;/p&gt;  &lt;p&gt;I have to say it was a good event, I’ve learned new things, meet vey nice guys, made good laughs and I’m pleased to have took part in it. I also think we can improve the experience for maybe future editions.&lt;/p&gt;  &lt;p&gt;In the end a big thank goes to all the guys in the audience that came to see the event, I didn’t expected to have so many people.&lt;/p&gt;  &lt;p&gt;We’ll manage to publish the slides and the videos we recorded about every track on our blogs and community websites (&lt;a href="http://www.dotnetmarche.org/"&gt;DotNetMarche&lt;/a&gt;, &lt;a href="http://www.ugialt.net/" target="_blank"&gt;UGIALT.net&lt;/a&gt;) as soon as the post-production step is completed, for now you can see the steaming recorded videos at the UStream.tv channel we created to broadcast the event: &lt;a href="http://www.ustream.tv/channel/nhday-main-room"&gt;http://www.ustream.tv/channel/nhday-main-room&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;All the samples used for the Linq To NHibernate track are available at this CodePlex project: &lt;a href="http://nhday.codeplex.com/"&gt;http://nhday.codeplex.com/&lt;/a&gt; we’ll add the code samples or reference to them about the other tracks as soon as we can collect them.&lt;/p&gt;  &lt;p&gt;What’s missing? oh yeah...some photos of the event...I’ll update this post as soon as I have them.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday"&gt;The NHibernate Day is coming...this Saturday!&lt;/a&gt; (10/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhday-event-thoughts"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhday-event-thoughts</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhday-event-thoughts#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhday-event-thoughts</guid><pubDate>Mon, 11 Oct 2010 16:03:18 GMT</pubDate><category>NHibernate</category><category>NHDay</category></item><item><title>The NHibernate Day is coming...this Saturday!</title><description>&lt;p&gt;If you’re a fan of NHibernate, if you use it for your everyday work or just if you are curious about it, you should have not missed to register for the first European &lt;a href="http://www.nhday.eu/en.aspx" target="_blank"&gt;NH Day&lt;/a&gt; coming up this Saturday.&lt;/p&gt;  &lt;p&gt;The &lt;a href="http://www.nhday.eu/en/agenda.aspx" target="_blank"&gt;Agenda&lt;/a&gt; is quite rich, various and with very interesting topics...it promises to be a very exciting day.&lt;/p&gt;  &lt;p&gt;Personally I’m looking forward to meet personally some of the guys whose blogs I read on a regular basis. I’m just sad we cannot have Steve Strong presenting the Linq to NHibernate session as announced when we organized the event at first...this ‘forced’ my good fellow &lt;a href="http://www.codewrecks.com"&gt;Alkampfer&lt;/a&gt; and me to step up and cover the hole.&lt;/p&gt;  &lt;p&gt;For more info and constant updates on the event head to: &lt;a href="http://www.nhday.eu/en.aspx"&gt;http://www.nhday.eu/en.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;To follow us on twitter the hashtag is: #nhday&lt;/p&gt;  &lt;p&gt;See you there...I’m sure we’ll have a great day together.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhday-event-thoughts"&gt;#nhday - after event thoughts&lt;/a&gt; (10/11/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/the-nhibernate-day-is-coming.this-saturday"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday</guid><pubDate>Wed, 06 Oct 2010 15:57:08 GMT</pubDate><category>NHibernate</category><category>NHDay</category></item><item><title>NHibernate - Customize the Linq provider to call your user defined SQL functions</title><description>&lt;p&gt;Let’s see how you can extend the new Linq to NHibernate provider to call your custom defined SQL functions.&lt;/p&gt;  &lt;p&gt;First off let’s start defining a custom function we want to call:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:403d1295-1289-461c-be7d-29f7cab2abf5" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: sql; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;CREATE FUNCTION [dbo].[CustomGetMonth] 
(
	-- Add the parameters for the function here
	@date datetime
)
RETURNS int
WITH EXECUTE AS CALLER
AS
BEGIN
	-- Return the result of the function
	IF @date IS NULL RETURN 0
	RETURN Datepart(mm,@date)

END&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This is not really a useful function, we’ll just it for illustrative purposes.&lt;/p&gt;

&lt;p&gt;Your next step it have NHibernate be aware of this function, you do that by inheriting your own custom Dialect and registering the function:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:348ca4ad-1724-4154-98c8-4afba2ec4ef5" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class MyDialect : MsSql2008Dialect
{
	public MyDialect()
	{
		RegisterFunction(&amp;quot;dbo.customgetmonth&amp;quot;, new StandardSQLFunction(&amp;quot;dbo.customgetmonth&amp;quot;, NHibernateUtil.Int32));
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The first parameter of the RegisterFunction() is the internal name NHibernate will use to refer to our custom function, the second parameter is a StandardSQLFunction object that contains the actual name of the function prefixed by the schema (it’s extremely important that you provide the schema information too otherwise NHibernate will not call the function) and the type returned by the function.&lt;/p&gt;

&lt;p&gt;Tree things are really important here: provide the schema information, use all lowercase letters when defining the function internal name and specify the correct type used as return value.&lt;/p&gt;

&lt;p&gt;It’s time to implement the Linq extension method that mimic this function (to have the same functionality with Linq to Objects):&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:825c764e-b45e-487c-9147-85094685b7f6" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public static class CustomGetMonthExtension
{
	public static int CustomGetMonth(this DateTime date)
	{
		return date.Month;
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;To customize the Linq provider we can now follow the step provided in these posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://fabiomaulo.blogspot.com/2010/07/nhibernate-linq-provider-extension.html" target="_blank"&gt;NHibernate LINQ provider extension&lt;/a&gt; &lt;/li&gt;

  &lt;li&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception" target="_blank"&gt;NHibernate 3 - Extending the Linq Provider to fix some System.NotSupportedException&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And write the Method Generator and the Generator Registry as follows:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4b863239-e3ee-4f7f-814b-fc4857419742" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class CustomGetMonthGenerator : BaseHqlGeneratorForMethod
{
	public CustomGetMonthGenerator()
	{
		SupportedMethods = new[] { ReflectionHelper.GetMethodDefinition(() =&amp;gt; CustomGetMonthExtension.CustomGetMonth(DateTime.Now)) };
	}

	public override HqlTreeNode BuildHql(MethodInfo method, Expression targetObject,
		ReadOnlyCollection&amp;lt;Expression&amp;gt; arguments, HqlTreeBuilder treeBuilder, IHqlExpressionVisitor visitor)
	{
		IEnumerable&amp;lt;HqlExpression&amp;gt; args = arguments.Select(a =&amp;gt; visitor.Visit(a))
			.Cast&amp;lt;HqlExpression&amp;gt;();

		return treeBuilder.MethodCall(&amp;quot;dbo.customgetmonth&amp;quot;, args);
	}
}

public class AllLinqToHqlGeneratorsRegistry : DefaultLinqToHqlGeneratorsRegistry
{
	public AllLinqToHqlGeneratorsRegistry()
	{
		this.Merge(new CustomGetMonthGenerator());
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;In the CustomGetMonthGenerator’s constructor we provide the signature of the method; the translation to the ‘Hql Expression Tree’ is done in the BuildHql function. &lt;/p&gt;

&lt;p&gt;The HqlTreeBuilder.MethodCall() allows us to call any SQL function (predefined or custom) passing in the name of the registered function as the first argument and a collection of parameters (in the proper order expected by the sql function) expressed as a list of HqlExpression.&lt;/p&gt;

&lt;p&gt;To make the things a little bit clear:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;targetObject - the expression that represents the instance of the object that ‘owns’ the function we are calling (null in our specific case, because we are using an extension method, if we had provided a method like: x =&amp;gt; x.Equals(y), then targetObject would have been the expression representing ‘x’ object).&lt;/li&gt;

  &lt;li&gt;arguments - a list of expressions representing the arguments passed to the function (in the same order).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using this knowledge we can easily build the expression tree that represent our Linq to Object call.&lt;/p&gt;

&lt;p&gt;As the final step let’s see what sql query NHibernate generates using the NUnit console and a simple query like this: &lt;/p&gt;

&lt;pre&gt;session.Query&amp;lt;Adult&amp;gt;().Select(a =&amp;gt; a.BirthDate.CustomGetMonth2()).ToList()&lt;br /&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ExtendingLinqCustomSql_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="ExtendingLinqCustomSql" border="0" alt="ExtendingLinqCustomSql" src="http://www.primordialcode.com/UserFiles/Guardian/ExtendingLinqCustomSql_thumb.jpg" width="604" height="234" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m really impressed how much it’s easy to extend the provider once you got the grasp on it.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-linq-dynamic-filtering-lambda-expressions"&gt;NHibernate Linq provider: dynamic filtering using lambda expressions&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception"&gt;NHibernate 3 - Extending the Linq Provider to fix some System.NotSupportedException&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-to-nhibernate-string.equals-with-stringcomparison-option"&gt;Linq to NHibernate - String.Equals with StringComparison option&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter"&gt;Linq to NHibernate: how to query on a property without setter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions</guid><pubDate>Fri, 01 Oct 2010 21:17:41 GMT</pubDate><category>NHibernate</category><category>Linq</category></item><item><title>NHibernate - First impressions on ConfORM</title><description>&lt;p&gt;I was very curious when I’ve heard of this project, I’ve used FluentNHibernate as my API to generate mappings in the past, it has its strong and weak points, things I like and things I don’t like much (personal opinions)...so I decided to give &lt;a href="http://code.google.com/p/codeconform/" target="_blank"&gt;ConfORM&lt;/a&gt; a try to see how this other option we have works...using a very simple project (like the one I’ll use on my next ‘Linq to NHibernate’ speech at NHDay).&lt;/p&gt;  &lt;p&gt;I’ll start with a basic consideration: for legacy databases I still prefer the usual XML mapping for a series of different reasons, but mainly due to the number of special cases you can face during the mapping and I think that the XML representation is more clean and compact to read than anything mapped with an API.&lt;/p&gt;  &lt;p&gt;That said, let’s go back to ConfORM. At start I was a bit confused about how ConfORM worked, until I realized that it was following a completely different approach compared to what we were used to do.&lt;/p&gt;  &lt;p&gt;ConfORM isn’t just another API that allows you to map you domain classes in NHibernate mimic what you can already do with XML files...it offers you a complete new way of thinking how mapping should be done.&lt;/p&gt;  &lt;p&gt;Putting it simple the idea is:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;You have a set of domain classes. &lt;/li&gt;    &lt;li&gt;You have your persistence engine (NHibernate). &lt;/li&gt;    &lt;li&gt;You want a system you can instruct with a series of rules and exceptions that take care of discovering and generating the mappings that describe your domain classes to NHibernate. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;This is ConfORM!&lt;/p&gt;  &lt;p&gt;And just speaking of it I see a very wide range of possibilities in its application, especially if you have full control over your database, just think of it: &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Once you have defined your mapping rule-set you can add new classes and have them mapped for free (almost, you always have to deal with exceptions, special cases or fine tunings, but the impact should be minimal). &lt;/li&gt;    &lt;li&gt;No more directories filled with .hbm.xml files anymore. &lt;/li&gt;    &lt;li&gt;No more projects or code files dedicated to hold you code mapping files. &lt;/li&gt;    &lt;li&gt;Consistency in the naming conventions of all the objects that will be generated in the database (if you let NHibernate generate them). &lt;/li&gt;    &lt;li&gt;You can apply different mapping patterns for different portions of your domain easily. &lt;/li&gt;    &lt;li&gt;The system itself is highly extensible and you can implement your own patterns starting from those already present. &lt;/li&gt;    &lt;li&gt;Improved startup time: we can jump over all the XML loading and deserialization stage because ConfORM directly emits NHibernate metadata mappings classes. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Those are some of the things that came into my mind after playing with it for just a couple of days. You need some time to get into the ConfORM view of doing things and it cannot be applied easily to every scenario, especially when dealing with legacy databases (even if it’s flexible enough, but you’ll end up mapping too many exceptions), but it’s another tool we have to define our mappings and I have to say it really impressed me.&lt;/p&gt;  &lt;p&gt;The major drawback actually is that the project is in beta stage (but it seems solid enough already) and suffer of a lack of documentation (you can find some introductive posts on &lt;a href="http://fabiomaulo.blogspot.com/"&gt;Fabio Maulo’s blog&lt;/a&gt; and download the whole codebase which contains example of usage...don’t forget it’s another open source project).&lt;/p&gt;  &lt;p&gt;In the end of this free talk I asked myself a question: will I use it to define my mappings in production code ? I will for sure give it a serious chance because I really like the approach and I think that with very huge domains, once I got the grasp on it, it can definitely be a time (and life) saving tool.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-conform-mapping-explorer"&gt;NHibernate ConfORM Mapping Explorer&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-mapping-explorer-preview-2"&gt;NHibernate Mapping Explorer Preview 2&lt;/a&gt; (12/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-impressions-conform"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-impressions-conform</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-impressions-conform#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-impressions-conform</guid><pubDate>Fri, 24 Sep 2010 15:01:27 GMT</pubDate><category>NHibernate</category><category>ConfORM</category></item><item><title>NHibernate - a custom IUserType to perform static lookup</title><description>&lt;p&gt;A common problem when dealing with enterprise line of business applications is trying to minimize the access to the database, recently I was working a project that used NHibernate as its persistence layer and that was doing lots of queries to the database to just load some lookup table; the situation was similar to the following:&lt;/p&gt;  &lt;p&gt;You have an entity that defines a list of choices a user can make, in out example we just call it ‘ListItem’, you then have another entity (we call that EntityUsingListItem) that just uses this ListItem class and can have a reference to a single ListItem or to a list of ListItem (this simulate the possibility for the user to select a single item or more items from a selection control); the user cannot add any element to the original ListItem collection; here are our test class:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a54859e8-9aa7-428a-9ab8-0c260bfb4160" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class EntityUsingListItem
{
	public EntityUsingListItem()
	{
		List = new List&amp;lt;ListItem&amp;gt;();
	}

	public int Id { get; set; }

	public string Name { get; set; }

	// a single reference
	public ListItem ListItem { get; set; }

	// a list of references
	public IList&amp;lt;ListItem&amp;gt; List { get; set; }
}

public class ListItem
{
	public int Id { get; set; }

	public string Name { get; set; }
	
	#region &amp;quot;Equality functions&amp;quot;

	public bool Equals(ListItem other)
	{
		if (ReferenceEquals(null, other)) return false;
		if (ReferenceEquals(this, other)) return true;
		return other.Id == Id;
	}

	public override bool Equals(object obj)
	{
		if (ReferenceEquals(null, obj)) return false;
		if (ReferenceEquals(this, obj)) return true;
		if (obj.GetType() != typeof (ListItem)) return false;
		return Equals((ListItem) obj);
	}

	public override int GetHashCode()
	{
		return Id;
	}

	public static bool operator ==(ListItem left, ListItem right)
	{
		return Equals(left, right);
	}

	public static bool operator !=(ListItem left, ListItem right)
	{
		return !Equals(left, right);
	}
	
	#endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The initial choice was to map both the classes to the database and have a bridge table for the many to many relationship. This basically means you have to create a specific table to hold the ListItem values and you also have to retrieve those values twice (once to populate your interface and every time your main entity was loaded from the database). This is obviously not optimal and can slow the things quite a bit. The optimal thing would have been to keep the ListItem table in memory since the beginning and have NHibernate persist only the reference to the ListItem objects in the form of an integer key; in my test example I’ve added a static collection to the ListItem object to hold the values, also notice the override of the &lt;a href="http://nhforge.org/wikis/patternsandpractices/identity-field-equality-and-hash-code.aspx"&gt;equality function&lt;/a&gt; so that NHibernate can handle it in the proper way.&lt;/p&gt;

&lt;p&gt;The problem is now how tell NHibernate to persist the object using an integer key and hydrate it performing a lookup against our in-memory table. Sometimes when you look at a problem the simplest solution can escape your grasp, so at start I’ve tried some complicated approaches (including realizing a custom persister for the class)...after some unsuccessful tries I’ve thought of using a custom IUserType implementation.&lt;/p&gt;

&lt;p&gt;An IUserType is just a way to map a type to something else that can be understood by the database, perfect! Just what I was looking for! I throw away my 2 hours of work to implement my custom ListItemUserType solution in 10 minutes:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:dc4a929d-7b81-4d00-bc06-fd27d93b3a8d" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class ListItemType : IUserType
{
	public SqlType[] SqlTypes
	{
		get
		{
			SqlType[] types = new SqlType[1];
			types[0] = new SqlType(DbType.Int32);
			return types;
		}
	}

	public Type ReturnedType
	{
		get { return typeof(ListItem); }
	}

	public new bool Equals(object x, object y)
	{
		return x != null &amp;amp;&amp;amp; x.Equals(y);
	}

	public int GetHashCode(object x)
	{
		return x.GetHashCode();
	}

	public object NullSafeGet(IDataReader rs, string[] names, object owner)
	{
		//We get the string from the database using the NullSafeGet used to get strings 
		int id = Convert.ToInt32(NHibernateUtil.String.NullSafeGet(rs, names[0]));

		return ListItem.GetList().Where(i =&amp;gt; i.Id == id).Single();
	}

	public void NullSafeSet(IDbCommand cmd, object value, int index)
	{
		//Set the value using the NullSafeSet implementation for string from NHibernateUtil
		if (value == null)
		{
			NHibernateUtil.String.NullSafeSet(cmd, null, index);
			return;
		}
		NHibernateUtil.String.NullSafeSet(cmd, ((ListItem)value).Id.ToString(), index);
	}

	public object DeepCopy(object value)
	{
		return value;
	}

	public bool IsMutable
	{
		get { return false; }
	}

	public object Replace(object original, object target, object owner)
	{
		//As our object is immutable we can just return the original
		return original;
	}

	public object Assemble(object cached, object owner)
	{
		//Used for casching, as our object is immutable we can just return it as is
		return cached;
	}

	public object Disassemble(object value)
	{
		//Used for casching, as our object is immutable we can just return it as is
		return value;
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The key points are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I tell NHibernate how to represent this type at the database level (as a single integer column), lines 7-9.&lt;/li&gt;

  &lt;li&gt;In the NullSafeGet() implementation I read the integer key of the object and perform the lookup using Linq, lines 30-33.&lt;/li&gt;

  &lt;li&gt;In the NullSafeSet() I just tell NHibernate to persist only the id of the object,lines 38-44.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The mapping is extremely simple:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:27c505e1-c54b-487b-b226-a68f2e12d239" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;hibernate-mapping xmlns=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot; 
				   default-lazy=&amp;quot;false&amp;quot; 
				   default-cascade=&amp;quot;all-delete-orphan&amp;quot;
				   assembly=&amp;quot;YYY&amp;quot;
				   namespace=&amp;quot;XXX&amp;quot;&amp;gt;
	&amp;lt;class name=&amp;quot;EntityUsingListItem&amp;quot; table=&amp;quot;EntityUsingListItem&amp;quot;  &amp;gt;
		&amp;lt;id name=&amp;quot;Id&amp;quot; type=&amp;quot;Int32&amp;quot; &amp;gt;
			&amp;lt;generator class=&amp;quot;native&amp;quot; /&amp;gt;
		&amp;lt;/id&amp;gt;
		&amp;lt;property name=&amp;quot;Name&amp;quot; type=&amp;quot;string&amp;quot; /&amp;gt;
		
		&amp;lt;property name=&amp;quot;ListItem&amp;quot; type=&amp;quot;XXX.ListItemType, YYY&amp;quot; /&amp;gt;

		&amp;lt;bag name=&amp;quot;List&amp;quot; table=&amp;quot;EntityListBridge&amp;quot; &amp;gt;
			&amp;lt;key not-null=&amp;quot;true&amp;quot; /&amp;gt;
			&amp;lt;element column=&amp;quot;listid&amp;quot; type=&amp;quot;XXX.ListItemType, YYY&amp;quot; not-null=&amp;quot;true&amp;quot; /&amp;gt;
		&amp;lt;/bag&amp;gt;
	&amp;lt;/class&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;In this way we only persist the integer Id of the ListItem when the object is saved (the user type do it for me) and when it is loaded I get the full instance of the ListItem class in each referencing properties (again, the user type does the lookup for me); the result are less data that go back and forth to the database each time you load your main entity and the whole application will be faster, especially if you have lots of lookup values.&lt;/p&gt;

&lt;p&gt;If all your lookup classes are derived from the same base class it’s easy to realize a generic version of this custom user type and use it to load and save all your lookup values reusing the code.&lt;/p&gt;

&lt;p&gt;If at a later time, you need to persist this table to the database because the users can now add and remove items from the ListItem values collection, you can easily change the mapping again without loosing any of your data already stored in the database.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday"&gt;The NHibernate Day is coming...this Saturday!&lt;/a&gt; (10/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhday-event-thoughts"&gt;#nhday - after event thoughts&lt;/a&gt; (10/11/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-custom-iusertype-perform-static-lookup"&gt;&lt;strong&gt;More related document (20)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-custom-iusertype-perform-static-lookup</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-custom-iusertype-perform-static-lookup#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-custom-iusertype-perform-static-lookup</guid><pubDate>Mon, 13 Sep 2010 17:47:34 GMT</pubDate><category>Nhibernate</category><category>IUserType</category><category>Lookup</category></item><item><title>Castle Windsor - resolve dependencies on an existing object instance</title><description>&lt;p&gt;Being able to configure an existing object resolving all its dependencies sometimes can be useful, but it can indeed be dangerous because you are mixing two different techniques of creating and managing objects lifecycles, I will not discuss why this can be troublesome, because it’s a very long and complex discussion to do in this short blog post.&lt;/p&gt;  &lt;p&gt;Nonetheless it happened in a couple of situation that I needed to configure an already existing instance of an object, but Castle Windsor doesn’t have direct support for this scenario (Unity has a Buildup() function to do the job).&lt;/p&gt;  &lt;p&gt;The easiest thing you can do is rely on Reflection to cycle through all your properties and ask the container to resolve the dependencies; here are a couple of extension methods that work well for me (they can be further extended to cover some more cases):&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5cfed025-646d-40c6-b379-4c1e8091411c" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Castle.MicroKernel.Resolvers.SpecializedResolvers;
using Castle.Windsor;

public static class Extensions
{
	/// &amp;lt;summary&amp;gt;
	/// Determines whether the specified type is a generic collection.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;type&amp;quot;&amp;gt;The type.&amp;lt;/param&amp;gt;
	public static bool IsGenericCollection(this Type type)
	{
		if (type == null)
		{
			throw new ArgumentNullException(&amp;quot;type&amp;quot;);
		}
		return type.GetInterfaces().Where(@interface =&amp;gt; @interface.IsGenericType).Any(@interface =&amp;gt; @interface.GetGenericTypeDefinition() == typeof(ICollection&amp;lt;&amp;gt;));
	}

	/// &amp;lt;summary&amp;gt;
	/// Adds the CollectionResolver to the container.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;container&amp;quot;&amp;gt;The container.&amp;lt;/param&amp;gt;
	/// &amp;lt;param name=&amp;quot;allowEmptyCollections&amp;quot;&amp;gt;if set to &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt; [allow empty collections].&amp;lt;/param&amp;gt;
	public static void AddCollectionResolver(this IWindsorContainer container, bool allowEmptyCollections)
	{
		container.Kernel.Resolver.AddSubResolver(new CollectionResolver(container.Kernel, allowEmptyCollections));
		_useCollectionResolver = true;
	}

	/// &amp;lt;summary&amp;gt;
	/// I havent found an easy way to check if a SubResolver was added to the kerner, so just register it through our extension method and
	/// use a static bool variable to do the check
	/// &amp;lt;/summary&amp;gt;
	private static bool _useCollectionResolver;

	public static void ResolveDependencies(this IWindsorContainer container, object objToConfigure)
	{
		// get all the properties through reflection
		PropertyInfo[] props = objToConfigure.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
		foreach (var info in props)
		{
			object o = info.GetValue(objToConfigure, null);
			// skip the object is it already contains a value of any sort
			if (o != null) continue;
			if (_useCollectionResolver &amp;amp;&amp;amp; info.PropertyType.IsGenericCollection())
			{
				o = container.ResolveAll(info.PropertyType.GetGenericArguments()[0]);
			}
			else if ((info.PropertyType.IsInterface) || (info.PropertyType.IsClass))
			{
				// try to resolve the related type if the component knows it
				if (container.Kernel.HasComponent(info.PropertyType))
					o = container.Resolve(info.PropertyType);
			}
			if (o != null)
				info.SetValue(objToConfigure, o, null);
		}
	}

	public static void ReleaseDependencies(this IWindsorContainer container, object objToConfigure)
	{
		// get all the properties through reflection
		PropertyInfo[] props = objToConfigure.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
		foreach (var info in props)
		{
			object o = info.GetValue(objToConfigure, null);
			if (o == null) continue;
			if (info.PropertyType.IsGenericCollection())
			{
				ICollection c = o as ICollection;
				if (c != null)
					foreach (var obj in c)
						container.Release(obj);
			}
			else if ((info.PropertyType.IsInterface) || (info.PropertyType.IsClass))
			{
				container.Release(o);
			}
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;I am using the newly released Castle Windsor 2.5 so these methods can also take advantage of the new CollectionResolver (if you configure the container to use it).&lt;/p&gt;

&lt;p&gt;However carefully consider this advice: if you want to use this method, you should be aware of what you are doing and you should also know all your object structures, hierarchies and dependencies! Introducing unwanted side effects can be extremely easy: just think if one of your subcomponents have a dependency to the object you are configuring...who is responsible for resolving those dependencies? The container itself can’t, because it does not know the object, or in the worst case it will create a duplicate of the object and inject it in the ‘child’ elements.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/castle-windsor-resolve-dependencies-existing-object-instance"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/castle-windsor-resolve-dependencies-existing-object-instance</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/castle-windsor-resolve-dependencies-existing-object-instance#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/castle-windsor-resolve-dependencies-existing-object-instance</guid><pubDate>Mon, 30 Aug 2010 20:33:39 GMT</pubDate><category>Castle windsor</category></item><item><title>NHibernate - prepare_sql and some considerations on mapping very long string fields</title><description>&lt;p&gt;Recently I’ve switched some of my applications from NHibernate 2.1.x to NHibernate 3, everything was working fine until I encountered a ‘strange behavior’ with the mapping of long string fields (those that should be mapped to nvarchar(max) and varchar(max)...yes I use Microsoft Sql Server as my database engine): using the standard mapping the field are correctly mapped to nvarchar(max), but during the saving operation the data gets truncated.&lt;/p&gt;  &lt;p&gt;The trouble arise due to some small modifications to the SqlClinetDriver that were made to optimize the reuse of the query plan Sql Server will generate, you can enable the same feature in NHibernate 2.1.x setting the ‘prepare_sql’ configuration option to true.&lt;/p&gt;  &lt;p&gt;Basically the problem is in the way the parameters of the SqlCommand are generated: without using prepare_sql=true the length of the string parameter is computed on the the data you pass in (ie: ‘aaa’ is represented by string(3)) and this is limiting the database engine capability of reusing query plans (more info in a link later on); but you can map an nvarchar(max) column like this:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:7869e7b0-2c3e-4255-9448-edf19265243e" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; "&gt;&amp;lt;property name=&amp;quot;StringHugeLength&amp;quot; column=&amp;quot;StringHugeLength&amp;quot; type=&amp;quot;string&amp;quot; length=&amp;quot;10000&amp;quot; /&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;and everything works as expected.&lt;/p&gt;

&lt;p&gt;The following commented piece of mapping sums up the behavior I’ve noticed when using prepare_sql=true:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:cc4bd353-fe60-4f88-bce7-1349c6dcfddb" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;!-- this generates an nvarchar(255), data is saved as string(4000)--&amp;gt;
&amp;lt;property name=&amp;quot;StringDefault&amp;quot; column=&amp;quot;StringDefault&amp;quot; type=&amp;quot;string&amp;quot; /&amp;gt;
&amp;lt;!-- this generates an nvarchar(50), data is saved as string(50) --&amp;gt;
&amp;lt;property name=&amp;quot;StringFixedLength&amp;quot; column=&amp;quot;StringFixedLength&amp;quot; type=&amp;quot;string&amp;quot; length=&amp;quot;50&amp;quot; /&amp;gt;
&amp;lt;!-- this generates an nvarchar(max), data is truncated at the length specified: string(10000) --&amp;gt;
&amp;lt;property name=&amp;quot;StringHugeLength&amp;quot; column=&amp;quot;StringHugeLength&amp;quot; type=&amp;quot;string&amp;quot; length=&amp;quot;10000&amp;quot; /&amp;gt;
&amp;lt;!-- this generates an nvarchar(max), data is truncated at the default string length: string(4000), 
    the sql-type does not participate in the runtime parameter generation for the query --&amp;gt;
&amp;lt;property name=&amp;quot;StringSqlType&amp;quot; type=&amp;quot;string&amp;quot;&amp;gt;
	&amp;lt;!-- if you specify the length explictly it will truncate at the specified limit instead of the default --&amp;gt;
	&amp;lt;column name=&amp;quot;StringSqlType&amp;quot; sql-type=&amp;quot;nvarchar(max)&amp;quot; /&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- this generates an nvarchar(255), reading and writing work for legacy nvarchar(max) fields --&amp;gt;
&amp;lt;property name=&amp;quot;Blob&amp;quot; column=&amp;quot;Blob&amp;quot; type=&amp;quot;StringClob&amp;quot; /&amp;gt;
&amp;lt;!-- this generates an nvarchar(max), data is truncated at the length specified: string(10000) --&amp;gt;
&amp;lt;property name=&amp;quot;BlobLength&amp;quot; column=&amp;quot;BlobLength&amp;quot; type=&amp;quot;StringClob&amp;quot; length=&amp;quot;10000&amp;quot; /&amp;gt;
&amp;lt;!-- this mapping works! for generation, reading and writing --&amp;gt;
&amp;lt;property name=&amp;quot;BlobSqlType&amp;quot; type=&amp;quot;StringClob&amp;quot; &amp;gt;
	&amp;lt;column name=&amp;quot;BlobSqlType&amp;quot; sql-type=&amp;quot;nvarchar(max)&amp;quot; /&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;I have to admit I didn’t knew/used this feature in the past and I faced the problem only recently...here’s a good post from Andrei Volkov that sums up the whole story and point to the problem:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zvolkov.com/blog/post/2009/10/28/NHibernate-parameter-sizes-controversy.aspx"&gt;http://zvolkov.com/blog/post/2009/10/28/NHibernate-parameter-sizes-controversy.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even using those suggestions I’m still not totally satisfied of the solution; moreover the only mapping that works correctly (the last one in the previous example) does not satisfy me much, because it introduces a dependency to the specific database types.&lt;/p&gt;

&lt;p&gt;From my point of view I would like to use the following mapping syntax to deal with ‘nvarchar(max)’ columns:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c5a74f40-8ef3-4b58-adac-539514a3cc0f" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: false; "&gt;&amp;lt;property name=&amp;quot;Blob&amp;quot; column=&amp;quot;Blob&amp;quot; type=&amp;quot;StringClob&amp;quot; /&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This one should emit an nvarchar(max), which I consider my default type when dealing with long text, when using ddl and SchemaExport() and should be able to load and save data to that field without truncation. Tto map a varchar(max) you can use the &amp;lt;column&amp;gt; tag inside property and specify a sql-type explictly.&lt;/p&gt;

&lt;p&gt;I have made my own modifications to the Sql Driver and Dialect to have NHibernate work the way I think it should (I really like its highly customizable environment)...more on this subject in some next posts (these changes should not have any impact on other dialects that do not have the same Sql Server problems, and you should be able to reuse your ‘new’ mapping without modifying them).&lt;/p&gt;

&lt;p&gt;I have no clue if the NHibernate team will revert the way ‘prepare_sql’ works in the current version or if they modify things again. But in the meanwhile I’m happy with my current solution which has minimum impact over my mappings.&lt;/p&gt;

&lt;p&gt;Happy NHibernating!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit: &lt;/strong&gt;I was asked to post the modifications I made to the Sql Driver class, there’s no more need to use it since this behavior has been fixed in the latest versions of &lt;a href="http://nhforge.org/"&gt;NHibernate&lt;/a&gt; (since 3.1.0 GA if I remind it correctly), however here is my code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:678d0da2-671e-409c-9028-87bfdd914265" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// A NHibernate Driver for using the SqlClient DataProvider
/// &amp;lt;/summary&amp;gt;
public class SqlClientDriver : DriverBase, IEmbeddedBatcherFactoryProvider
{
	/// &amp;lt;summary&amp;gt;
	/// Creates an uninitialized &amp;lt;see cref=&amp;quot;IDbConnection&amp;quot; /&amp;gt; object for 
	/// the SqlClientDriver.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;value&amp;gt;An unitialized &amp;lt;see cref=&amp;quot;System.Data.SqlClient.SqlConnection&amp;quot;/&amp;gt; object.&amp;lt;/value&amp;gt;
	public override IDbConnection CreateConnection()
	{
		return new SqlConnection();
	}

	/// &amp;lt;summary&amp;gt;
	/// Creates an uninitialized &amp;lt;see cref=&amp;quot;IDbCommand&amp;quot; /&amp;gt; object for 
	/// the SqlClientDriver.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;value&amp;gt;An unitialized &amp;lt;see cref=&amp;quot;System.Data.SqlClient.SqlCommand&amp;quot;/&amp;gt; object.&amp;lt;/value&amp;gt;
	public override IDbCommand CreateCommand()
	{
		return new System.Data.SqlClient.SqlCommand();
	}

	/// &amp;lt;summary&amp;gt;
	/// MsSql requires the use of a Named Prefix in the SQL statement.  
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;remarks&amp;gt;
	/// &amp;lt;see langword=&amp;quot;true&amp;quot; /&amp;gt; because MsSql uses &amp;quot;&amp;lt;c&amp;gt;@&amp;lt;/c&amp;gt;&amp;quot;.
	/// &amp;lt;/remarks&amp;gt;
	public override bool UseNamedPrefixInSql
	{
		get { return true; }
	}

	/// &amp;lt;summary&amp;gt;
	/// MsSql requires the use of a Named Prefix in the Parameter.  
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;remarks&amp;gt;
	/// &amp;lt;see langword=&amp;quot;true&amp;quot; /&amp;gt; because MsSql uses &amp;quot;&amp;lt;c&amp;gt;@&amp;lt;/c&amp;gt;&amp;quot;.
	/// &amp;lt;/remarks&amp;gt;
	public override bool UseNamedPrefixInParameter
	{
		get { return true; }
	}

	/// &amp;lt;summary&amp;gt;
	/// The Named Prefix for parameters.  
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;value&amp;gt;
	/// Sql Server uses &amp;lt;c&amp;gt;&amp;quot;@&amp;quot;&amp;lt;/c&amp;gt;.
	/// &amp;lt;/value&amp;gt;
	public override string NamedPrefix
	{
		get { return &amp;quot;@&amp;quot;; }
	}

	/// &amp;lt;summary&amp;gt;
	/// The SqlClient driver does NOT support more than 1 open IDataReader
	/// with only 1 IDbConnection.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;value&amp;gt;&amp;lt;see langword=&amp;quot;false&amp;quot; /&amp;gt; - it is not supported.&amp;lt;/value&amp;gt;
	/// &amp;lt;remarks&amp;gt;
	/// MS SQL Server 2000 (and 7) throws an exception when multiple IDataReaders are 
	/// attempted to be opened.  When SQL Server 2005 comes out a new driver will be 
	/// created for it because SQL Server 2005 is supposed to support it.
	/// &amp;lt;/remarks&amp;gt;
	public override bool SupportsMultipleOpenReaders
	{
		get { return false; }
	}

	// Used from SqlServerCeDriver as well
	public static void SetParameterSizes(IDataParameterCollection parameters, SqlType[] parameterTypes)
	{
		for (int i = 0; i &amp;lt; parameters.Count; i++)
		{
			SetVariableLengthParameterSize((IDbDataParameter)parameters[i], parameterTypes[i]);
		}
	}

	private const int MaxAnsiStringSize = 8000;
	private const int MaxBinarySize = MaxAnsiStringSize;
	private const int MaxStringSize = MaxAnsiStringSize / 2;
	private const int MaxBinaryBlobSize = int.MaxValue;
	private const int MaxStringClobSize = MaxBinaryBlobSize / 2;
	private const byte MaxPrecision = 28;
	private const byte MaxScale = 5;
	private const byte MaxDateTime2 = 8;
	private const byte MaxDateTimeOffset = 10;

	private static void SetDefaultParameterSize(IDbDataParameter dbParam, SqlType sqlType)
	{
		switch (dbParam.DbType)
		{
			case DbType.AnsiString:
			case DbType.AnsiStringFixedLength:
				dbParam.Size = MaxAnsiStringSize;
				break;

			case DbType.Binary:
				if (sqlType is BinaryBlobSqlType)
				{
					dbParam.Size = MaxBinaryBlobSize;
				}
				else
				{
					dbParam.Size = MaxBinarySize;
				}
				break;
			case DbType.Decimal:
				dbParam.Precision = MaxPrecision;
				dbParam.Scale = MaxScale;
				break;
			case DbType.String:
			case DbType.StringFixedLength:
				if (sqlType is StringClobSqlType)
				{
					dbParam.Size = MaxStringClobSize;
				}
				else
				{
					dbParam.Size = MaxStringSize;
				}
				break;
			case DbType.DateTime2:
				dbParam.Size = MaxDateTime2;
				break;
			case DbType.DateTimeOffset:
				dbParam.Size = MaxDateTimeOffset;
				break;
		}
	}

	private static void SetVariableLengthParameterSize(IDbDataParameter dbParam, SqlType sqlType)
	{
		SetDefaultParameterSize(dbParam, sqlType);

		// Override the defaults using data from SqlType.
		if ((sqlType.LengthDefined) &amp;amp;&amp;amp; !(sqlType is StringClobSqlType) &amp;amp;&amp;amp; !(sqlType is BinaryBlobSqlType))
		{
			// we have to take into account a possible varchar or nvarchar (max), so assign the length
			// to the string type and to the binary type only if it doesn't exceed the maximum allowed value
			// otherwise use the MaxBinaryBlobSize or MaxStringClobSize
			if (((sqlType.DbType == DbType.AnsiString) || (sqlType.DbType == DbType.AnsiStringFixedLength))
				&amp;amp;&amp;amp; (sqlType.Length &amp;gt; MaxAnsiStringSize))
				dbParam.Size = MaxBinaryBlobSize; // I'm not totally sure of this
			else if (((sqlType.DbType == DbType.String) || (sqlType.DbType == DbType.StringFixedLength))
				&amp;amp;&amp;amp; (sqlType.Length &amp;gt; MaxStringSize))
				dbParam.Size = MaxStringClobSize;
			else
				dbParam.Size = sqlType.Length;
		}

		if (sqlType.PrecisionDefined)
		{
			dbParam.Precision = sqlType.Precision;
			dbParam.Scale = sqlType.Scale;
		}
	}

	public override IDbCommand GenerateCommand(CommandType type, SqlString sqlString, SqlType[] parameterTypes)
	{
		IDbCommand command = base.GenerateCommand(type, sqlString, parameterTypes);
		//if (IsPrepareSqlEnabled)
		{
			SetParameterSizes(command.Parameters, parameterTypes);
		}
		return command;
	}

	public override bool SupportsMultipleQueries
	{
		get { return true; }
	}

	#region IEmbeddedBatcherFactoryProvider Members

	System.Type IEmbeddedBatcherFactoryProvider.BatcherFactoryClass
	{
		get { return typeof(SqlClientBatchingBatcherFactory); }
	}

	#endregion
}
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sql-server-scramble-mask-database-production-data"&gt;Sql Server - Scramble / Mask database production data&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/install-sql-server-express-with-your-application"&gt;Install SQL Server (Express) with your Application&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-prepare_sql-considerations-mapping-long-string-fields"&gt;&lt;strong&gt;More related document (23)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-prepare_sql-considerations-mapping-long-string-fields</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-prepare_sql-considerations-mapping-long-string-fields#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-prepare_sql-considerations-mapping-long-string-fields</guid><pubDate>Thu, 26 Aug 2010 16:44:22 GMT</pubDate><category>Nhibernate</category><category>Nvarchar(max)</category><category>Prepare_sql</category></item><item><title>Tale of an ‘asp:Content control that do not correspond with asp:ContentPlaceHolder’ Master Page Error</title><description>&lt;p&gt;If, like me, you are so unlucky to encounter the infamous:&lt;/p&gt;  &lt;p&gt;‘The page has one or more &amp;lt;asp:Content&amp;gt; control that do not correspond with &amp;lt;asp:ContentPlaceHolder&amp;gt; control in master page.’ &lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/contentplaceholdererror_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="contentplaceholdererror" border="0" alt="contentplaceholdererror" src="http://www.primordialcode.com/UserFiles/Guardian/contentplaceholdererror_thumb.jpg" width="504" height="289" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt; - The designer showing the master page error&lt;/p&gt;  &lt;p&gt;error message when dealing with Asp.Net pages that actually use a master page, and you are unable to use the designer to drop and configure controls (raise your hand if you still use the designer instead of doing everything by hand!) you can do the following thing:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;go for the obvious resolution and check for the names of the content place holders. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;If the problem still persists and you’re sure your content controls and content place holders are correctly mapped to each others (you can let the wizard generate the page for you) and moreover everything actually works at runtime (even the designer for the master page works!), the error is surely somewhere in the HTML markup and this very informative error message won’t help you find it out.&lt;/p&gt;  &lt;p&gt;I started looking at the markup and everything seemed ok to me, even a friend of mine confirmed me the markup was ok...until I started looking very carefully and spotted the problem: this page was derived from an old project and maintained by lot of persons...so it ended having some markup and HUGE portions of the page commented out, the master page had some code like this:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:681fc8bb-3b6e-4a08-bcb2-44deeca2becd" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
&amp;lt;div id=&amp;quot;divCentralBlock&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;header_down&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;line&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;%-- Breadcrumb --%&amp;gt;
    &amp;lt;%--   &amp;lt;div id=&amp;quot;SiteMap_Contenitore&amp;quot;&amp;gt;
            &amp;lt;asp:SiteMapPath ID=&amp;quot;MainSiteMapPath&amp;quot; runat=&amp;quot;server&amp;quot; PathSeparator=&amp;quot; : &amp;quot; CssClass=&amp;quot;fnsize76pr&amp;quot;
                CurrentNodeStyle-CssClass=&amp;quot;currentNode&amp;quot; NodeStyle-CssClass=&amp;quot;node&amp;quot; SiteMapProvider=&amp;quot;SiteMapPath&amp;quot;
                meta:resourcekey=&amp;quot;MainSiteMapPathResource1&amp;quot; Visible=&amp;quot;false&amp;quot; Enabled=&amp;quot;false&amp;quot;&amp;gt;
                &amp;lt;CurrentNodeStyle CssClass=&amp;quot;currentNode&amp;quot; /&amp;gt;
                &amp;lt;NodeStyle CssClass=&amp;quot;node&amp;quot; /&amp;gt;
            &amp;lt;/asp:SiteMapPath&amp;gt;
            &amp;lt;asp:SiteMapDataSource ID=&amp;quot;SiteMapDataSource1&amp;quot; runat=&amp;quot;server&amp;quot; /&amp;gt; 
            &amp;lt;%-- &amp;lt;cc1:scriptmanager id=&amp;quot;smAtlas&amp;quot; runat=&amp;quot;server&amp;quot;&amp;gt;&amp;lt;/cc1:scriptmanager&amp;gt; --%&amp;gt;
    &amp;lt;%-- &amp;lt;/div&amp;gt;
	... a lot more commented code wiped out
	--%&amp;gt;
    &amp;lt;div id=&amp;quot;contentBox&amp;quot;&amp;gt;
        &amp;lt;div id=&amp;quot;contentTitle&amp;quot;&amp;gt;
            &amp;lt;asp:ContentPlaceHolder ID=&amp;quot;TitlePlaceHolder&amp;quot; runat=&amp;quot;server&amp;quot;&amp;gt;
            &amp;lt;/asp:ContentPlaceHolder&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&amp;quot;contentBody&amp;quot;&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;asp:ContentPlaceHolder ID=&amp;quot;MainPlaceHolder&amp;quot; runat=&amp;quot;server&amp;quot;&amp;gt;
                &amp;lt;/asp:ContentPlaceHolder&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As you can see lines 7 to 18 contain a lot of comments, the visual studio html syntax verifier does not complain about everything when looking at this code, but if you look carefully at the end of line 14 you can see the missing of a close comment tag ( --%&amp;gt; ), neither me nor my friend saw this problem because at our first look WE SKIPPED THE COMMENTED COMPLETELY, giving it for granted that they couldn’t cause any trouble (what a mistake!).&lt;/p&gt;

&lt;p&gt;This lack was causing a lot of troubles to the designer that wasn’t able to parse the master page correctly. Closing the comment in the correct way solved the problem and we were able to use the master page in the designer again; the lesson is: always respect the syntax of the language you’re using! (and always look at everything when things don’t work as expected).&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples"&gt;WebNet European Conference, Slides and Samples&lt;/a&gt; (11/06/2012)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/css-and-javascript-file-minification"&gt;Css and JavaScript file minification&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/aspnet-tagging-hiding-columns-gridview"&gt;ASP.NET - Tagging and Hiding the columns of a GridView&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/working-on-dexter"&gt;Working on Dexter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/tale-content-correspond-contentplaceholder-master-page-error"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error</guid><pubDate>Wed, 25 Aug 2010 22:09:44 GMT</pubDate><category>Asp net</category><category>Master page</category><category>Error</category><category>Content</category><category>Contentplaceholder</category></item><item><title>Spot Hidden Exceptions using IntelliTrace</title><description>&lt;p&gt;Recently I’ve been able to replace my Visual Studio 2010 Professional with Visual Studio 2010 Ultimate and the first feature I wanted to try was IntelliTrace, to see how it could help me debug and improve the quality of my software.&lt;/p&gt;  &lt;p&gt;After giving a look at what it’s capable the first and simple way I used it was to look at all the exception messages raised by my applications; just looking at them I was able to discover and eliminate some ‘hidden’ problem which were simply eaten up the framework (in case of bindings errors for example) or by a wrong exception handling strategy that was implemented in code.&lt;/p&gt;  &lt;p&gt;To enable IntelliTrace go to Tools -&amp;gt; Options and look for the IntelliTrace section there, you will see the following dialog:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions1_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IntellitraceExceptions1" border="0" alt="IntellitraceExceptions1" src="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions1_thumb.jpg" width="304" height="178" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt; - IntelliTrace Options&lt;/p&gt;  &lt;p&gt;If you want to enable detailed information for the call tree enable the second option, but it will slow down your debugging experience a lot, so do it if you really need those information; I will also suggest you to check the advanced tab and increase the default size of the maximum amount of disk space for each recording.&lt;/p&gt;  &lt;p&gt;Run the application with the debugger attached and when you break it you can analyze the IntelliTrace log:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions2_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IntellitraceExceptions2" border="0" alt="IntellitraceExceptions2" src="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions2_thumb.jpg" width="504" height="358" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 2&lt;/strong&gt; - IntelliTrace in action, full event log&lt;/p&gt;  &lt;p&gt;Clicking on an entry will open up the corresponding source code file and will highlight the line of interest. The default view is quite messy, because it contains logs for each type of event you asked for in the IntelliTrace Options, you can filter it up easily and show only what you want to focus on (the exceptions at the moment).&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions3_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IntellitraceExceptions3" border="0" alt="IntellitraceExceptions3" src="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions3_thumb.jpg" width="227" height="244" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 3&lt;/strong&gt; - Filtering the data&lt;/p&gt;  &lt;p&gt;Wow! I never expected that my application raised so many exceptions under the hood, so I started to look at them to see if I could fix them. Inspecting this log you can see all the exceptions that ‘flows’ out of your direct control. Some of them are particularly nasty, like the ones originated from the binding system, take the following one as example:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions4_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 4px 10px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IntellitraceExceptions4" border="0" alt="IntellitraceExceptions4" src="http://www.primordialcode.com/UserFiles/Guardian/IntellitraceExceptions4_thumb.jpg" width="504" height="246" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 4&lt;/strong&gt; - Analyzing a single exception.&lt;/p&gt;  &lt;p&gt;Here we have a binding to a ComboBox which should hold a list of names of nations, using the software everything was working well: I could see the nations and select them and the value was correctly saved. But internally we had a System.ArgumentException that was throw and eaten up by the binding framework...why? looking at the code it’s quite clear: we are making a binding with a list of strings but we’ve also specified DisplayName and DisplayValue (maybe this control was previously in binding with something else) and this is a mistake we ignored because it has no evident effect. &lt;/p&gt;  &lt;p&gt;The binding framework just ignores those two values...but nonetheless an avoidable exception has been thrown and captured; the solution in this case is easy: remove the assignments to DisplayMember and ValueMember.&lt;/p&gt;  &lt;p&gt;Using IntelliTrace in this way and carefully looking at the logs I was able to remove a lot of those hidden exceptions (especially when dealing with bindings) with an overall improvement of the quality (and performance) of the application.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010"&gt;How to update your TFS Workspace after CodePlex upgrade to TFS2010&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/spot-hidden-exceptions-intellitrace"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace</guid><pubDate>Wed, 18 Aug 2010 21:33:11 GMT</pubDate><category>Visual studio</category><category>IntelliTrace</category><category>Exception</category></item><item><title>A Windows Live Essentials Suite Beta is out...how to workaround the ‘no internet connection’ setup problem</title><description>&lt;p&gt;A new version of the Windows Live Essential Suite was released on August the 17th, you can get it &lt;a href="http://explore.live.com/windows-live-essentials-beta"&gt;here&lt;/a&gt; (at your own risk!); if you want to try it out you can have a very bad surprise:&lt;/p&gt;  &lt;p&gt;after having chosen the applications you want to install, at the end of the setup the whole procedure might fail with a very informative ‘No internet connection’ error message.&lt;/p&gt;  &lt;p&gt;You can have a look at the real problem looking at the Windows Live setup log (located in: C:\ProgramData\Microsoft\WLSetup\Logs), which is usually a missing dependency or something similar.&lt;/p&gt;  &lt;p&gt;In my case it seemed the installer was trying to download a language pack (Italian, in my case) which is not currently available and that caused the setup process to stop.&lt;/p&gt;  &lt;p&gt;Switching all the locale information of my system to the ‘United States’ language didn’t solved the problem.&lt;/p&gt;  &lt;p&gt;The trick to overcome this problem is simple:&lt;/p&gt;  &lt;p&gt;- uninstall all your current Windows Live Essentials &lt;/p&gt;  &lt;p&gt;- go to: “C:\Program Files\Common Files\Windows Live\.cache” and clean it up, this is the folder where the setup files will be downloaded&lt;/p&gt;  &lt;p&gt;- run the setup again and when it fails hit ‘Cancel’&lt;/p&gt;  &lt;p&gt;- go to the previous folder and rerun all the setup modules you find inside each sub-directory.&lt;/p&gt;  &lt;p&gt;Everything should work now! (At least it did for my installation).&lt;/p&gt;  &lt;p&gt;I’m still not able to log in MSN Messenger due the the nasty 80040154 error, it seems no-one is able to discover what’s causing it, but now I can use and test the new Live Writer again (and I’m happy with that).&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out.hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...hot to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support"&gt;Dexter is growing: Dynamic Pages and better Windows Live Writer support&lt;/a&gt; (06/02/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/build-windows-8"&gt;Build: Windows 8&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hp-proliant-microserver-windows-7-or-vista-installation-issues"&gt;HP ProLiant MicroServer, Windows 7 or Vista installation issues&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem"&gt;&lt;strong&gt;More related document (6)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem</guid><pubDate>Wed, 18 Aug 2010 18:03:58 GMT</pubDate><category>Windows Live Essentials</category></item><item><title>NHibernate 3 - Extending the Linq Provider to fix some System.NotSupportedException</title><description>&lt;p&gt;With the release of the new version NHibernate (3.0 alpha1), I’ve decided to give it a try and branch my current solution to switch to this new version and see hoe it goes.&lt;/p&gt;  &lt;p&gt;I was especially interested in the new Linq support, cause I’ve decided to use it as the basis for my data access strategies.&lt;/p&gt;  &lt;p&gt;After the necessary reference changes I run all my test suit...and I had bad news from the Linq provider in the form of some System.NotSupportedException like this one:&lt;/p&gt;  &lt;p&gt;“UnitTest.Test03_Linq.QueryWithEqualsGuid:    &lt;br /&gt;System.NotSupportedException : Boolean Equals(System.Guid)”&lt;/p&gt;  &lt;p&gt;Being NHibernate an open source project, instead of bothering the guys responsible for the project, my first approach is always to look at the code; so I downloaded the trunk and started looking around at the Linq provider. Watching how Equals() methods are handled by the parser it comes out fast that only the specific version to deal with strings is currently supported [bool Equals(string)], all other types have to rely on the ==operator.&lt;/p&gt;  &lt;p&gt;But in my code I had a lot of filters based on Equals() call for various object types (int, guid and so on...) and I didn’t wanted to touch that code especially considering that with the previous Linq provider everything was working well.&lt;/p&gt;  &lt;p&gt;However the solution is easy, just extend the default EqualsGenerator adding the support for the missing methods; but I didn’t wanted to compile a specific ‘patched’ version of NHibernate and this post from &lt;a href="http://fabiomaulo.blogspot.com/2010/07/nhibernate-linq-provider-extension.html"&gt;Fabio Maulo&lt;/a&gt; confirmed me you can easily extend the Linq provider. Great! That’s was exactly what I was looking for!&lt;/p&gt;  &lt;p&gt;I started working on it and I had my second surprise &lt;img style="border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2_1.png" /&gt;. The Linq provider was subhect of a heavy refactoring activity to provide better extensibility from the version you have in 3.0 alpha1. Using reflector and looking around in the binaries it comes out that to extend that provider you have to register your extension methods calling the methods of the NHibernate.Linq.Functions.FunctionRegistry class. But in all honesty I think that the way it works in alpha2 is way more elegant and it follows better the standard approach NHibernate have when it comes to configure its components.&lt;/p&gt;  &lt;p&gt;So if you have to extend the Linq provider forget of alpha1 and compile your own version of NHibernate getting it from the Trunk.&lt;/p&gt;  &lt;p&gt;Back to the job now: following Fabio’s instructions (and looking at the code) I came out with these classes:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:390e8ce4-60b2-4f26-aac8-cec422fe70b6" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class ExtendedEqualsGenerator : BaseHqlGeneratorForMethod
{
	public ExtendedEqualsGenerator()
	{
		// the methods call are used only to get info about the signature, the actual parameter is just ignored
		SupportedMethods = new[] { 
			ReflectionHelper.GetMethodDefinition&amp;lt;Byte&amp;gt;(x =&amp;gt; x.Equals((Byte)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;SByte&amp;gt;(x =&amp;gt; x.Equals((SByte)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Int16&amp;gt;(x =&amp;gt; x.Equals((Int16)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Int32&amp;gt;(x =&amp;gt; x.Equals((Int32)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Int64&amp;gt;(x =&amp;gt; x.Equals((Int64)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;UInt16&amp;gt;(x =&amp;gt; x.Equals((UInt16)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;UInt32&amp;gt;(x =&amp;gt; x.Equals((UInt32)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;UInt64&amp;gt;(x =&amp;gt; x.Equals((UInt64)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Single&amp;gt;(x =&amp;gt; x.Equals((Single)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Double&amp;gt;(x =&amp;gt; x.Equals((Double)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Boolean&amp;gt;(x =&amp;gt; x.Equals(true)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Char&amp;gt;(x =&amp;gt; x.Equals((Char)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Decimal&amp;gt;(x =&amp;gt; x.Equals((Decimal)0)),
			ReflectionHelper.GetMethodDefinition&amp;lt;Guid&amp;gt;(x =&amp;gt; x.Equals(Guid.Empty)),
		};
	}

	public override HqlTreeNode BuildHql(MethodInfo method, Expression targetObject, ReadOnlyCollection&amp;lt;Expression&amp;gt; arguments, HqlTreeBuilder treeBuilder, IHqlExpressionVisitor visitor)
	{
		return treeBuilder.Equality(
				visitor.Visit(targetObject).AsExpression(),
				visitor.Visit(arguments[0]).AsExpression());
	}
}

public class ExtendedLinqtoHqlGeneratorsRegistry : DefaultLinqToHqlGeneratorsRegistry
{
	public ExtendedLinqtoHqlGeneratorsRegistry()
	{
		this.Merge(new ExtendedEqualsGenerator());
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;After registering them (actually it can be done only in code) using:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a83133c8-d8b7-4eaa-8f95-29f72ba1abf1" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;configuration.SetProperties(&amp;quot;linqtohql.generatorsregistry&amp;quot;, &amp;quot;Nhibernate.Extensions.ExtendedLinqtoHqlGeneratorsRegistry, Nhibernate.Extensions&amp;quot;);

or

configuration.LinqToHqlGeneratorsRegistry&amp;lt;ExtendedLinqtoHqlGeneratorsRegistry&amp;gt;();&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;My tests passed again and I didn’t had to touch a single line of code. This is simply amazing! (but I think the full support for all the equals methods should have been added to the core anyway).&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-linq-dynamic-filtering-lambda-expressions"&gt;NHibernate Linq provider: dynamic filtering using lambda expressions&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-to-nhibernate-string.equals-with-stringcomparison-option"&gt;Linq to NHibernate - String.Equals with StringComparison option&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter"&gt;Linq to NHibernate: how to query on a property without setter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunit-extensibility-addin-dynamically-load-addins"&gt;NUnit extensibility: an Addin to dynamically load other Addins&lt;/a&gt; (07/06/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-3-extending-linq-provider-fix-notsupportedexception"&gt;&lt;strong&gt;More related document (22)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception</guid><pubDate>Fri, 13 Aug 2010 18:14:36 GMT</pubDate><category>Nhibernate</category><category>Linq</category><category>Extensibility</category></item><item><title>Playing with Profilers - always take a look at your most called functions!</title><description>&lt;p&gt;...even if they don’t seem to consume too much time. I have finally found some ‘time slots’ to assign to code profiling activities, so I decided to take advantage of the &lt;a href="http://www.jetbrains.com/profiler/"&gt;dotTrace&lt;/a&gt; License that was kindly awarded to me by &lt;a href="www.jetbrains.com"&gt;JetBrains&lt;/a&gt; (thanks again to JetBrains for supporting &lt;a href="http://www.dotnetmarche.org/"&gt;DotNetMarche&lt;/a&gt; and our workshops). I’m a newbie when it comes to profiling so I’ll just share my experiences and I’ll show how everyone can take advantage of these tools to improve the performances and sometimes the quality of your code.&lt;/p&gt;  &lt;p&gt;In this post I’ll show you a very basic usage of the dotTrace profiler, but it helped me a lot in finding some bad spots in my code.&lt;/p&gt;  &lt;p&gt;Let’s kick off by starting the profiler, I’m lazy so I’ll just use the Visual Studio integration and use the menu ‘dotTrace -&amp;gt; Profile the Startup Project’; it will rebuild the project and show you the following option dialog box:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/dotTraceStartUp_2.jpg"&gt;&lt;img style="border-right-width: 0px; margin: 4px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="dotTraceStartUp" border="0" alt="dotTraceStartUp" src="http://www.primordialcode.com/UserFiles/Guardian/dotTraceStartUp_thumb.jpg" width="413" height="273" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt; - dotTrace startup dialog.&lt;/p&gt;  &lt;p&gt;I’m crazy and I want very high precision and accuracy, so I set the profiling type to ‘Line-By-Line’ and asked to start the profiling immediately. Note that setting this profiling type will make your application &lt;strong&gt;painfully&lt;/strong&gt; slow but it will give you the most accurate results. Play with your application a bit using the forms and the functions you want to profile, when you are ready take a snapshot of the application using the dotTrace control window.&lt;/p&gt;  &lt;p&gt;This will open up the profiler main window and you can use that to have different views of the data it gathered.&lt;/p&gt;  &lt;p&gt;For a fist shot analysis I’m just interested in looking at the most called functions, dotTrace can show me a plain list of all the function calls which I can sort and group by class name or namespace. You can think of this particular view as ‘having a look at the most active functions, classes or namespace in your application’. Here’s what I got during my first attempt, I like to have the result grouped by namespace and sorted by the number of calls:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/dotTraceNamespaceView_2.jpg"&gt;&lt;img style="border-right-width: 0px; margin: 4px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="dotTraceNamespaceView" border="0" alt="dotTraceNamespaceView" src="http://www.primordialcode.com/UserFiles/Guardian/dotTraceNamespaceView_thumb.jpg" width="490" height="322" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 2&lt;/strong&gt; - dotTrace Plain List view grouped by namespace.&lt;/p&gt;  &lt;p&gt;As you can see the first places of the list are all taken by NHibernate and Castle functions, at this point I’m not interested in those...but you can also see a rgmComponents namespace that ‘is making’ a lot of calls (even if the time consumed is small); I expanded it too see the list of functions in detail and you can see that a single color conversion function was called loads of times (18k calls!) in a very shot running time of the application.&lt;/p&gt;  &lt;p&gt;This application shouldn’t be so graphically intensive...so it rang a warning bell to me. This very high amount of calls must be an incorrect use of the function itself or some side effect that makes it to be called when it should not be needed; what you can do is right-click -&amp;gt; ‘open in New Tab’ in the most called function to dig into it even more, here you can have different views of the related data. One of the most interesting is the ‘Back Tracking’ view, which shows you who is calling the function you are watching (actually that’s the info I’m looking forward to have):&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/dotTraceDetail_4.jpg"&gt;&lt;img style="border-right-width: 0px; margin: 4px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="dotTraceDetail" border="0" alt="dotTraceDetail" src="http://www.primordialcode.com/UserFiles/Guardian/dotTraceDetail_thumb_1.jpg" width="588" height="173" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Figure 3&lt;/strong&gt; - Back Trace of a function.&lt;/p&gt;  &lt;p&gt;Looking at this data you can see that all the 18k+ calls of this function were originated by the setter of the property ‘SecondHeaderColor’ of the XpTaskBox control: it’s now time to take a look at the control’s code because it really smells.&lt;/p&gt;  &lt;p&gt;I will skip all the code analysis here, but looking at the code it was clear that that the control was generating cached copies of an icon changing the colors to represent different states (enabled, inactive, etc...) but it was generating them even if the icon wasn’t actually rendered (it was an expand/collapse icon) nor used. Using the profiler in this way helped me to find out some poorly designed code, I just changed the implementation to use lazy initialization for those images and compute them only if really needed...this allowed me to cut down the number of call to this function from 18k times to 5k times only...which in turn lead to a global faster rendering of the whole UI of the application and better performances in the long run (no more computations if not needed).&lt;/p&gt;  &lt;p&gt;So a profiler not only helps you in finding weak spots in algorithms showing you the most time consuming functions, but can also be used to find weak spots in your code design.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/playing-profilers-called-functions"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/playing-profilers-called-functions</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/playing-profilers-called-functions#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/playing-profilers-called-functions</guid><pubDate>Thu, 05 Aug 2010 23:08:03 GMT</pubDate><category>Visual studio</category><category>JetBrains</category><category>DotTrace</category><category>Profiling</category></item><item><title>How to update your TFS Workspace after CodePlex upgrade to TFS2010</title><description>&lt;p&gt;Recently CodePlex updated their TFS to the 2010 version, during the update your reference TFS server may have changed name (like it happened for Dexter, our original TFS server was tfs05.codeplex.com and now it is tfs.codeplex.com).&lt;/p&gt;  &lt;p&gt;To switch to the new server all I did was, open your solution in Visual Studio, it will open in offline mode due to the fact that the old TFS is no more accessible.&lt;/p&gt;  &lt;p&gt;After that go to: ‘File --&amp;gt; Source Control --&amp;gt; Workspaces...’&lt;/p&gt;  &lt;p&gt;You will be prompted with a dialog that asks for a new TFS address and new access credentials, take those from your CodePlex project website.&lt;/p&gt;  &lt;p&gt;Once connected a new Dialog Box will open allowing you to select the project to which link your solution among all the Team Project Collections available to your account.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/TeamProjectCollections_2.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="TeamProjectCollections" border="0" alt="TeamProjectCollections" src="http://www.primordialcode.com/UserFiles/Guardian/TeamProjectCollections_thumb.jpg" width="435" height="272" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Select Connect and check if your workspace has been associated correctly.&lt;/p&gt;  &lt;p&gt;To make the change fully effective, close and reopen your solution, you will be asked if you want to ‘Go Online’.&lt;/p&gt;  &lt;p&gt;That’s all you need to do in order for having your TFS integration work again after the CodePlex upgrade.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/update-tfs-workspace-codeplex-upgrade-tfs2010"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010</guid><pubDate>Tue, 27 Jul 2010 18:01:01 GMT</pubDate><category>Visual studio</category><category>Team Foundation Server</category></item><item><title>NHibernate - Eager Fetch and Pagination in one query</title><description>&lt;p&gt;Let’s consider these mappings:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c0af5e1b-7614-4d6a-a067-8f89c54e35b6" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;class name=&amp;quot;Item&amp;quot; table=&amp;quot;Item&amp;quot;&amp;gt;
	&amp;lt;id name=&amp;quot;Id&amp;quot; column=&amp;quot;Id&amp;quot; type=&amp;quot;int&amp;quot;&amp;gt;
		&amp;lt;generator class=&amp;quot;native&amp;quot; /&amp;gt;
	&amp;lt;/id&amp;gt;
	&amp;lt;property name=&amp;quot;Name&amp;quot; column=&amp;quot;Name&amp;quot; type=&amp;quot;string&amp;quot; /&amp;gt;
	&amp;lt;property name=&amp;quot;Sort&amp;quot; column=&amp;quot;Sort&amp;quot; type=&amp;quot;int&amp;quot; /&amp;gt;
	&amp;lt;bag name=&amp;quot;Tags&amp;quot; inverse=&amp;quot;true&amp;quot; lazy=&amp;quot;true&amp;quot;&amp;gt;
		&amp;lt;key column=&amp;quot;ItemId&amp;quot; /&amp;gt;
		&amp;lt;one-to-many class=&amp;quot;Tag&amp;quot;/&amp;gt;
	&amp;lt;/bag&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&amp;quot;Tag&amp;quot; table=&amp;quot;Tag&amp;quot;&amp;gt;
	&amp;lt;id name=&amp;quot;Id&amp;quot; column=&amp;quot;Id&amp;quot; type=&amp;quot;int&amp;quot;&amp;gt;
		&amp;lt;generator class=&amp;quot;native&amp;quot; /&amp;gt;
	&amp;lt;/id&amp;gt;
	&amp;lt;property name=&amp;quot;Name&amp;quot; column=&amp;quot;Name&amp;quot; type=&amp;quot;string&amp;quot; not-null=&amp;quot;true&amp;quot; /&amp;gt;
	&amp;lt;many-to-one name=&amp;quot;Item&amp;quot; column=&amp;quot;ItemId&amp;quot; class=&amp;quot;Item&amp;quot; not-null=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;/class&amp;gt;
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Trying to paginate a query that uses eager fetching to retrieve the data in the ‘traditional’ way, that is using something similar to this piece of code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:8e53687d-7d89-4501-a07a-abd3f9f46f0a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;ICriteria myCriteria = session.CreateCriteria&amp;lt;Item&amp;gt;(&amp;quot;itm&amp;quot;);
myCriteria.AddOrder(new Order(&amp;quot;Sort&amp;quot;, true))
	.SetFirstResult((pageIndex - 1)*pageSize)
	.SetMaxResults(pageSize)
	.SetResultTransformer(Transformers.DistinctRootEntity)
	.SetFetchMode(&amp;quot;Tags&amp;quot;, FetchMode.Eager);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Will simply FAIL, because eager fetching retrieves more data rows from the database due to the joins it performs, thus the ‘SetFirstResult()’ call will simply cut out some of your data.&lt;/p&gt;

&lt;p&gt;One way to resolve the problem is to use a DetachedCriteria to actually get a projection of all the Ids of the items you want to paginate (applying any filtering and sorting you desire at this step) and later on use the projection to perform the real query that retrieves the data using eager fetching:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4810ca9d-1220-4619-a727-9211615fbf42" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;private static IList&amp;lt;Item&amp;gt; GetPagedData(int pageIndex, int pageSize)
{
	IList&amp;lt;Item&amp;gt; result;
	using (ISession session = NHelper.OpenSession())
	using (ITransaction tx = session.BeginTransaction())
	{
		// get the list of IDs corresponding to the page od data we wanna get
		DetachedCriteria detached = DetachedCriteria.For&amp;lt;Item&amp;gt;(&amp;quot;itm2&amp;quot;);
		detached.AddOrder(new Order(&amp;quot;Sort&amp;quot;, true))
			.SetFirstResult((pageIndex - 1)*pageSize)
			.SetMaxResults(pageSize)
			.SetProjection(Projections.Property(&amp;quot;Id&amp;quot;));
		// get the real data
		ICriteria myCriteria = session.CreateCriteria&amp;lt;Item&amp;gt;(&amp;quot;itm&amp;quot;);

		myCriteria
			.Add(Subqueries.PropertyIn(&amp;quot;Id&amp;quot;, detached))
			.SetResultTransformer(Transformers.DistinctRootEntity)
			.SetFetchMode(&amp;quot;Tags&amp;quot;, FetchMode.Eager);
			
		result = myCriteria.List&amp;lt;Item&amp;gt;();

		tx.Commit();
	}
	return result;
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;If you look at the logs generated by NHibernate you will see that this code will result in a single query sent to your database engine, having called this function asking for page index 2 with a page size of 2 I obtain the following query:&lt;/p&gt;

&lt;p&gt;SELECT this_.Id as Id1_1_, this_.Name as Name1_1_, this_.Sort as Sort1_1_, tags2_.ItemId as ItemId3_, tags2_.Id as Id3_, tags2_.Id as Id0_0_, tags2_.Name as Name0_0_, tags2_.ItemId as ItemId0_0_ FROM dbo.Item this_ left outer join dbo.Tag tags2_ on this_.Id=tags2_.ItemId WHERE this_.Id in (SELECT TOP 2 y0_ FROM (SELECT this_0_.Id as y0_, ROW_NUMBER() OVER(ORDER BY this_0_.Sort) as __hibernate_sort_row FROM dbo.Item this_0_) as query WHERE query.__hibernate_sort_row &amp;gt; 2 ORDER BY query.__hibernate_sort_row)&lt;/p&gt;

&lt;p&gt;This technique helped me to reduce the number of queries made by the application a lot. 
  &lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-order-strange-behavior-icriteria"&gt;NHibernate - Eager Fetch, Order By and a strange behavior with ICriteria&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-generic-serverside-pagination-data-provider"&gt;WPF: a generic ‘server-side’ pagination data provider&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed"&gt;Silverlight Pagination Control – bug fixed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control"&gt;Silverlight: a generic Pagination Control&lt;/a&gt; (09/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-eager-fetch-pagination-query"&gt;&lt;strong&gt;More related document (24)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-pagination-query</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-pagination-query#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-pagination-query</guid><pubDate>Tue, 20 Jul 2010 17:10:11 GMT</pubDate><category>Eager</category><category>Nhibernate</category><category>Pagination</category></item><item><title>Tomorrow’s DotNetMarche Workshop Live Streaming</title><description>&lt;p&gt;As anticipated in my previous post, if you cannot be there to attend the workshop directly (and you should be &lt;img style="border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://www.primordialcode.com/UserFiles/Guardian/wlEmoticon-openmouthedsmile_2.png" /&gt;), thanks to the guys at Ce.S.M.I. we will be able to offer you a live streaming of the event (crossing fingers for everything to work as expected...), here’s the link to attend the workshop online:&lt;/p&gt;  &lt;p&gt;&lt;a title="mms://mmedia.univpm.it/dotnetmarche.org" href="mms://mmedia.univpm.it/dotnetmarche.org"&gt;mms://mmedia.univpm.it/dotnetmarche.org&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Since we are a ‘local’ User Group the workshop and the material will be presented in Italian; more info and the complete agenda on our official &lt;a href="http://www.dotnetmarche.org/" target="_blank"&gt;DotNetMarche&lt;/a&gt; website.&lt;/p&gt;  &lt;p&gt;Thank you again for the support and opportunity you give us to share our passion for developing software even more.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET&lt;/a&gt; (03/09/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/tomorrows-dotnetmarche-workshop-live-streaming"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming</guid><pubDate>Thu, 15 Jul 2010 17:41:51 GMT</pubDate><category>Dotnetmarche</category><category>Workshop</category></item><item><title>NHibernate - Eager Fetch, Order By and a strange behavior with ICriteria</title><description>&lt;p&gt;
	Working on &lt;a href="http://dexterblogengine.codeplex.com/" target="_blank"&gt;Dexter&lt;/a&gt; I encountered a very strange NHibernate behavior (I&amp;rsquo;m using NHIbernate 2.1.2 GA and this is very close to be a bug in my opinion) while trying to apply the eager fetch mode to a child collection whose mapping contains an order-by attribute applied.&lt;/p&gt;
&lt;p&gt;
	The scenario is this: you have 2 classes called: &amp;lsquo;Item&amp;rsquo; and &amp;lsquo;Tag&amp;rsquo;, Item holds a collection of tags, the relation is mapped as inverse and we have an order-by clause applied to the collection mapping (the tags are ordered by name); we want to fetch a list of Item classes along with all its tags (to optimize things) and we want the result to be sorted by some field of the main Item class.&lt;/p&gt;
&lt;p&gt;
	The problem is: performing the query using ICriteria and setting the eager fetch mode on the tags collection you don&amp;rsquo;t get the results with the order you expect (the one you specified in the ICriteria query).&lt;/p&gt;
&lt;p&gt;
	To reproduce the behavior let&amp;rsquo;s consider the following mapping:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:210ce75b-4a23-4b85-b61c-ef8e95508871" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&lt;class name="Item" table="Item"&gt;
	&lt;id column="Id" name="Id" type="int"&gt;
		&lt;generator class="identity"&gt;
	&lt;/generator&gt;&lt;/id&gt;
	&lt;property column="Name" name="Name" type="string"&gt;
	&lt;property column="Sort" name="Sort" type="int"&gt;
	&lt;bag by="Name" inverse="true" lazy="true" name="Tags"&gt;
		&lt;key column="ItemId" null="true"&gt;
		&lt;one-to-many class="Tag"&gt;
	&lt;/one-to-many&gt;&lt;/key&gt;&lt;/bag&gt;
&lt;/property&gt;&lt;/property&gt;&lt;/class&gt;

&lt;class name="Tag" table="Tag"&gt;
	&lt;id column="Id" name="Id" type="int"&gt;
		&lt;generator class="identity"&gt;
	&lt;/generator&gt;&lt;/id&gt;
	&lt;property column="Name" name="Name" type="string"&gt;
	&lt;many-to-one class="Item" column="ItemId" name="Item" null="true"&gt;
&lt;/many-to-one&gt;&lt;/property&gt;&lt;/class&gt;

&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	We can build-up a very simple to create some data in the database:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:1ad5b5fb-a3c2-4f21-b85e-49af41a21354" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public void CreateTestData()
{
	string[] tagsName = new[] { &amp;quot;zapp&amp;quot;, &amp;quot;crunch&amp;quot;, &amp;quot;bang&amp;quot;, &amp;quot;sbanf&amp;quot; };
	using (ISession session = NHelper.OpenSession())
	using (ITransaction tx = session.BeginTransaction())
	{
		// create some items
		for (int i = 0; i &amp;lt; 10; i++)
		{
			Item itm = new Item() { Name = &amp;quot;Item&amp;quot; + i, Sort = i };
			session.SaveOrUpdate(itm);
			
			Tag t = new Tag();
			t.Name = tagsName[i / 3];
			t.Item = itm;
			itm.Tags.Add(t);
			session.SaveOrUpdate(t);
		}
		tx.Commit();
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	I can now write a very simple ICriteria to retrieve all the Items (alongside with their tags) ordering the result by the &amp;lsquo;Sort&amp;rsquo; field; I expect to see 10 records in my result ordered from 0 to 10 in ascending order:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:ff9260f9-1bfa-4e69-af77-10721cb6c62e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
ICriteria myCriteria = session.CreateCriteria&lt;item&gt;();

myCriteria
	.SetResultTransformer(Transformers.DistinctRootEntity)
	.SetFetchMode(&amp;quot;Tags&amp;quot;, FetchMode.Eager)
	.AddOrder(new Order(&amp;quot;Sort&amp;quot;, true));

result = myCriteria.List&lt;item&gt;();
...&lt;/item&gt;&lt;/item&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	What I get instead are 10 records...but ordered by Tag name FIRST (which is the order I asked for in the &lt;bag&gt; mapping), I really expected this order by to be applied AFTER what I imposed while building the ICriteria.&lt;/bag&gt;&lt;/p&gt;
&lt;p&gt;
	To confirm the problem we can take a look at the query NHibernate generates and execute that in our SQL environment:&lt;/p&gt;
&lt;p&gt;
	&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEagerOrderBy1_4.jpg"&gt;&lt;img alt="NHibernateEagerOrderBy1" border="0" class="wlDisabledImage" height="280" src="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEagerOrderBy1_thumb_1.jpg" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="NHibernateEagerOrderBy1" width="634" /&gt;&lt;/a&gt; &lt;br /&gt;
	As you can see this isn&amp;rsquo;t really what I expected, to double check I also tried to get the data using an HQL query:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:38f099d5-aace-49ed-b199-eb293efe5784" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;IQuery query = session.CreateQuery(&amp;quot;from Item itm left join fetch itm.Tags order by itm.Sort&amp;quot;);

result = query.List&lt;item&gt;();&lt;/item&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	But this time everything is fine...and I see the result ordered by &amp;lsquo;Sort&amp;rsquo; first and after by tag&amp;rsquo;s Name:&lt;/p&gt;
&lt;p&gt;
	&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEagerOrderBy2_2.jpg"&gt;&lt;img alt="NHibernateEagerOrderBy2" border="0" class="wlDisabledImage" height="304" src="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEagerOrderBy2_thumb.jpg" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="NHibernateEagerOrderBy2" width="634" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
	In the end: when using eager fetching with collection mapped with order-by clauses, always perform some tests to verify if what you obtain satisfies the order you imposed on your queries. If you get strange behaviors using ICriteria, try switching to HQL queries as they seems to act better according to you needs.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	In the following solution you can find a test project to reproduce the problem:&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:cf72a2a1-4e8d-42c8-b6e9-1f5821f7edad" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;p&gt;
		&amp;nbsp;&lt;/p&gt;
	&lt;div&gt;
		&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/NHibernateEagerOrderBy.zip" target="_self"&gt;NHibernateEagerOrderBy.zip&lt;/a&gt;&lt;/div&gt;
	&lt;p&gt;
		&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/fetching-collections-nhibernate-mistake"&gt;Fetching collections with NHibernate, a mistake a I always do!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-pagination-query"&gt;NHibernate - Eager Fetch and Pagination in one query&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-eager-fetch-order-strange-behavior-icriteria"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-order-strange-behavior-icriteria</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-order-strange-behavior-icriteria#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-order-strange-behavior-icriteria</guid><pubDate>Tue, 13 Jul 2010 16:36:06 GMT</pubDate><category>Eager</category><category>Fetch</category><category>Hql</category><category>ICriteria</category><category>Nhibernate</category></item><item><title>MSI: a simple Delete Files Custom Action</title><description>&lt;p&gt;Reviewing the Install/Uninstall process I’ve created using the standard Visual Studio Setup Project template, I’ve noticed that some files were always left on the installation folder after a complete program uninstall sequence.&lt;/p&gt;  &lt;p&gt;The default behavior is to leave on the file system any file you didn’t explicitly added to the setup solution; so if you create temp files, configuration files or whatever you might need during the program execution, they will be left on the disk.&lt;/p&gt;  &lt;p&gt;To get rid of them I’ve wrote this extremely simple custom action:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4b89647c-986b-4f4d-bb70-c9771ac53d55" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[RunInstaller(true)]
public partial class DeleteFilesCustomAction : Installer
{
	public DeleteFilesCustomAction()
	{
		InitializeComponent();
	}

	public override void Uninstall(IDictionary savedState)
	{
		base.Uninstall(savedState);
		try
		{
			// delete any addictional files (or comepletely remove the folder)
			string pathtodelete = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
			// MessageBox.Show(&amp;quot;Deleting: &amp;quot; + pathtodelete);
			if (pathtodelete != null &amp;amp;&amp;amp; Directory.Exists(pathtodelete))
			{
				// delete all the file inside this folder except SID.SetupSupport
				foreach (var file in Directory.GetFiles(pathtodelete))
				{
					// MessageBox.Show(file);
					if (!file.Contains(System.Reflection.Assembly.GetAssembly(typeof (DeleteFilesCustomAction)).GetName().Name))
						SafeDeleteFile(file);
				}
				foreach (var directory in Directory.GetDirectories(pathtodelete))
					SafeDeleteDirectory(directory);
			}
		}
		catch
		{
		}
	}

	private static void SafeDeleteFile(string file)
	{
		try
		{
			File.Delete(file);
		}
		catch
		{
		}
	}

	private static void SafeDeleteDirectory(string directory)
	{
		try
		{
			Directory.Delete(directory, true);
		}
		catch (Exception)
		{
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;You can use it just adding the custom action to an assembly you will also add to the setup project (right click, add...new project output...and point to the project that contains your custom actions); then in the Custom Actions Editor, add the specific action under the Uninstall section.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/msi-simple-delete-files-custom-action"&gt;&lt;strong&gt;More related document (25)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/msi-simple-delete-files-custom-action</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/msi-simple-delete-files-custom-action#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/msi-simple-delete-files-custom-action</guid><pubDate>Mon, 12 Jul 2010 23:59:28 GMT</pubDate><category>Custom Action</category><category>Uninstall</category><category>.net</category><category>Visual studio</category></item><item><title>Passing a Delegate to an Attribute: a simple workaround</title><description>&lt;p&gt;Working on a very simple DataForm control for Winforms I had the need to pass a function delegate to an attribute that qualifies a property to generate a ComboBox on the UI. The function was mean to be used as a way to retrieve the set of values you use to populate the Items property of the ComboBox.&lt;/p&gt;  &lt;p&gt;I quickly discovered that I cannot pass that delegate as a parameter using the standard attribute qualifying syntax because: an attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type.&lt;/p&gt;  &lt;p&gt;A quick and dirty workaround was to add a Dictionary&amp;lt;String, Func&amp;lt;IEnumerable&amp;gt;&amp;gt; to my DataForm control and a function to actually ‘register’ the delegate you want to use to populate the combox. The delegate is registered using a string key that you will later on pass to the attribute that qualifies the property.&lt;/p&gt;  &lt;p&gt;Here are some code snippets taken from the DataForm:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:44a37f68-36bd-4850-a41c-5177d9f6fc14" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
private readonly Dictionary&amp;lt;string, Func&amp;lt;IEnumerable&amp;gt;&amp;gt; _loadItemsFunctions = new Dictionary&amp;lt;string, Func&amp;lt;IEnumerable&amp;gt;&amp;gt;();

/// &amp;lt;summary&amp;gt;
/// Registers the load item function, if a function exists with the same key
/// it gets overwritten.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;key&amp;quot;&amp;gt;The key.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;deleg&amp;quot;&amp;gt;The deleg.&amp;lt;/param&amp;gt;
public void RegisterLoadItemFunc(string key, Func&amp;lt;IEnumerable&amp;gt; deleg)
{
	_loadItemsFunctions[key] = deleg;
}
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;p&gt;and the attribute class:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:1937930f-828f-4c89-b68d-c154107a605b" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[AttributeUsage(AttributeTargets.Property)]
public class UiHintComboBoxAttribute : Attribute
{
	public UiHintComboBoxAttribute()
	{
		DropDownStyle = ComboBoxStyle.DropDownList;
		BindType = BindTo.SelectedValue;
	}

	/// &amp;lt;summary&amp;gt;
	/// Gets or sets the load items function, it's a string placeholder for a 
	/// function registered in the instance of the control that will use it.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;value&amp;gt;The load items func.&amp;lt;/value&amp;gt;
	public string LoadItemsFunc { get; set; }

	public string DisplayMember { get; set; }

	public string ValueMember { get; set; }

	public ComboBoxStyle DropDownStyle { get; set; }

	public BindTo BindType { get; set; }

	public enum BindTo
	{
		SelectedValue,
		SelectedItem
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;p&gt;A similar technique can be used if you need to pass descriptive strings along with your attributes and you need to localize those strings: you pass in a reference to a dictionary you populate with phrases in the correct language.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/missing-net-performance-counters-solve"&gt;Missing .NET Performance Counters: how to solve it&lt;/a&gt; (10/07/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/19th-dotnetmarche-workshop-community-tour-2011-cms-edition"&gt;19th DotNetMarche Workshop “Community Tour 2011 - CMS Edition”&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples"&gt;WebNet European Conference, Slides and Samples&lt;/a&gt; (11/06/2012)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/css-and-javascript-file-minification"&gt;Css and JavaScript file minification&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-forms-closeable-tabcontrol"&gt;Windows Forms: Closeable TabControl&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/passing-delegate-attribute-simple-workaround"&gt;&lt;strong&gt;More related document (7)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/passing-delegate-attribute-simple-workaround</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/passing-delegate-attribute-simple-workaround#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/passing-delegate-attribute-simple-workaround</guid><pubDate>Fri, 09 Jul 2010 21:48:00 GMT</pubDate><category>.net</category><category>Delegate</category><category>Attribute</category></item><item><title>Are you ready for the upcoming DotNetMarche workshop on July 16 ?</title><description>&lt;p&gt;This announce will be particularly interesting for the people that live and work Italy: our .Net User Group DotNetMarche organizes another cross community Workshop. &lt;/p&gt;  &lt;p&gt;This time we team up with DotDotNet, Gaia srl and Ce.S.M.I. of the University of Ancona (Italy) to offer you a complete overview over the challenges you have to face when designing and building up a Silverlight SOA application: from the relationships with the customers, the design and the UI/UX prototyping, the application lifecycle and the coding stage using various patterns...I know it’s quite an ambitious plan!&lt;/p&gt;  &lt;p&gt;For the registration, the complete agenda and the details on the location and speakers take a look at our website: &lt;a href="http://dotnetmarche.org"&gt;http://dotnetmarche.org&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;This time, thanks to the guys at Ce.S.M.I, we will also probably be able to offer you the whole workshop using internet streaming too, so if you cannot be physically there you have a chance to follow us anyway! For further details on how to attend the workshop online keep following this blog or our official DotNetMarche website.&lt;/p&gt;  &lt;p&gt;See you there!&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/ready-upcoming-dotnetmarche-workshop-july-16"&gt;&lt;strong&gt;More related document (49)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/ready-upcoming-dotnetmarche-workshop-july-16</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/ready-upcoming-dotnetmarche-workshop-july-16#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/ready-upcoming-dotnetmarche-workshop-july-16</guid><pubDate>Thu, 08 Jul 2010 17:54:12 GMT</pubDate><category>Dotnetmarche</category><category>Workshop</category><category>Silverlight</category></item><item><title>Silverlight / WPF: is it possible to bind to an explicit interface indexer implementation?</title><description>&lt;p&gt;
	The WPF binding system allows you to bind to Indexers and properties and it also have a nice feature that allows you to bind to the explicit implementation of interfaces&amp;rsquo; members, allowing you to resolve possible ambiguities if the properties have the same names, let&amp;rsquo;s consider this simple example you have the following two interfaces and a class that implements them:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5e38edf5-f552-4410-b60b-a14daf946c42" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public interface IFirst
{
   string this[string index] { get; }

   String Name { get; }
}

public interface ISecond
{
   string this[string index] { get; }

   String Name { get; }
}

public class Entity : IFirst, ISecond
{
   public string Name
   {
       get { return &amp;quot;Class Name&amp;quot;; }
   }
   
   public string this[string index]
   {
       get { return &amp;quot;Class Indexer&amp;quot;; }
   }

   string IFirst.this[string index]
   {
       get { return &amp;quot;First Indexer&amp;quot;; }
   }

   string IFirst.Name
   {
       get { return &amp;quot;First Name&amp;quot;; }
   }

   string ISecond.this[string index]
   {
       get { return &amp;quot;Second Indexer&amp;quot;; }
   }

   string ISecond.Name
   {
       get { return &amp;quot;Second Name&amp;quot;; }
   }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	And you can bind them with a syntax like this:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:6eb8de73-f2aa-44d9-a45a-cedaf71b75de" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&lt;stackpanel&gt;
   &lt;textbox text="{Binding Path=Name, Mode=OneWay}"&gt;
   &lt;textbox text="{Binding Path=(local:IFirst.Name), Mode=OneWay}"&gt;
   &lt;textbox text="{Binding Path=(local:ISecond.Name), Mode=OneWay}"&gt;

   &lt;textbox text="{Binding Path=[0], Mode=OneWay}"&gt;
   &lt;!--binding attempt 1 --&gt;
   &lt;textbox text="{Binding Path=(local:IFirst)[0], Mode=OneWay}"&gt;
   &lt;textbox text="{Binding Path=(local:ISecond)[0], Mode=OneWay}"&gt;
   &lt;!--binding attempt 2 --&gt;
   &lt;textbox text="{Binding Path=(local:IFirst.Item)[0], Mode=OneWay}"&gt;
   &lt;textbox text="{Binding Path=(local:ISecond.Item)[0], Mode=OneWay}"&gt;
&lt;/textbox&gt;&lt;/textbox&gt;&lt;/textbox&gt;&lt;/textbox&gt;&lt;/textbox&gt;&lt;/textbox&gt;&lt;/textbox&gt;&lt;/textbox&gt;&lt;/stackpanel&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	If you run this code you will see the correct binding working for the first 4 textboxes:&lt;/p&gt;
&lt;p&gt;
	&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/IndexersBinding_2.png"&gt;&lt;img alt="IndexersBinding" border="0" class="wlDisabledImage" height="211" src="http://www.primordialcode.com/UserFiles/Guardian/IndexersBinding_thumb.png" style="border-right-width: 0px; margin: 4px 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IndexersBinding" width="244" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
	I wasn&amp;rsquo;t able to find any binding syntax to have the explicitly implemented indexers binding work as expected, so I have to conclude that, as far as I know, this particular binding type is not yet supported (or this is a bug in the WPF binding system). If you have more info on the subject please, let me know.&lt;/p&gt;
&lt;p&gt;
	Silverlight currently does not support binding to explicit interface implementations: when you try to write something similar to that the Xaml parser give you the E_UNEXPECTED error. I think this is one of the reasons why the Silverlight Team introduced a new interface for validation and error reporting like INotifyDataErrorInfo instead of just relying on the IDataErrorInfo typical to WPF: the IDataErrorInfo indexer (used to access the error&amp;rsquo;s collection) most of the time it&amp;rsquo;s implemented using explicit interface implementation; I would really like to see a porting of that interface in WPF soon cause I think it has a better design than the current IDataErrorInfo.&lt;/p&gt;
&lt;p&gt;
	What you can do then? Well...nothing much about the explicit interface binding in Silverlight, it&amp;rsquo;s not supported...and you can&amp;rsquo;t write any binding extension to add it, so we just have to leave without it; you can maybe write a binding extension to fix the indexers&amp;rsquo; binding, but that will not be applicable to Silverlight projects.&lt;/p&gt;
&lt;p&gt;
	A small workaround I use is to define an interface - called IIndexable - that simply define an indexer and write an implementation class that act as a wrapper around the explicit indexer implementation I want to bind too...not much elegant, but it works in both worlds and you can restrict the access to the indexers implementing the get and set operations as needed:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b156be4c-266b-4643-a819-295779b31140" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public interface IIndexable&lt;in out="" tresult=""&gt;
{
   TResult this[TKey index] { get; }
}

public class IndexableWrapper : IIndexable&lt;string, string=""&gt;
{
   public IndexableWrapper(IFirst wrapped)
   {
       _class = wrapped;
   }

   private readonly IFirst _class;

   public string this[string index]
   {
       get { return _class[index]; }
   }
}

// in your entity class you can now add a member you can freely bind to
...
public IIndexable&lt;string, string&gt; FirstIndexer
{
  get { return  (new IndexableWrapper(this)); }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	You can check the solution containing the full samples just downloading this file, it contains both the WPF and the Silverlight solutions:&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:373900c7-1cfd-4818-8ca7-8cca69b3f909" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;p&gt;
		&amp;nbsp;&lt;/p&gt;
	&lt;div&gt;
		&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/ExplicitInterfaceBinding_1.zip" target="_self"&gt;ExplicitInterfaceBinding.zip&lt;/a&gt;&lt;/div&gt;
	&lt;p&gt;
		&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wrap-ilist-effective-binding-silverlight-wpf"&gt;Wrap IList&lt;T&gt; and use it for effective binding in Silverlight and WPF&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed"&gt;WPF: force all the validation rules attached to an object to be executed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlightwpf-uielement-find-ancestor-type-procedurally"&gt;Silverlight/WPF UIElement: how to find and ancestor of type &lt;T&gt; procedurally&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-wpf-bind-explicit-interface-indexer-implementation"&gt;&lt;strong&gt;More related document (52)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-wpf-bind-explicit-interface-indexer-implementation</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-wpf-bind-explicit-interface-indexer-implementation#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-wpf-bind-explicit-interface-indexer-implementation</guid><pubDate>Tue, 06 Jul 2010 16:24:29 GMT</pubDate><category>Binding</category><category>Indexer</category><category>Interface</category><category>Silverlight</category><category>WPF</category></item><item><title>Exams 071-518 and 071-519 passed successfully</title><description>&lt;p&gt;I’ll make this short post to test the new Windows Live Writer (which seems quite cool at a first look).&lt;/p&gt;  &lt;p&gt;Yesterday I got some good news, I passed both the certification exams I tried some time ago:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;071-518 - Pro: Design &amp;amp; Develop Windows Apps Using MS .NET Framework 4 &lt;/li&gt;    &lt;li&gt;071-519 - Pro: Designing &amp;amp; Developing Web Apps Using MS .NET Framework 4 &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Maybe I’ll try some more of them now :).&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/exams-071-518-and-071-519-passed-successfully</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/exams-071-518-and-071-519-passed-successfully#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/exams-071-518-and-071-519-passed-successfully</guid><pubDate>Thu, 01 Jul 2010 16:34:44 GMT</pubDate><category>Certification</category><category>Exam</category></item><item><title>Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout</title><description>&lt;p&gt;Even after years you always have something to learn...this time I had a windows forms application with a lot of graphics in it: big and heavy background images, graphic buttons with transparent background, mixed bitmaps, Jpegs and PNGs...the whole thing rendering performance was just...horrible! The form was rending slowly piece by piece (with a lot of artifacts) giving the user a very poor feeling.&lt;/p&gt;  &lt;p&gt;To improve the rendering speed you can use some standard techniques, here are a couple of them:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Calling BeginUpdate() before populating data intensive controls (ComboBox, ListBox DataGrid, etc...) and EndUpdate() when done. &lt;/li&gt;    &lt;li&gt;Calling SuspendLayout() and ResumeLayout() on parent controls and forms to optimize layout changes. Bounds, Size, Location, Visible, and Text for AutoSize controls causes the layout changes. You should call these methods when performing multiple layout changes and always on parent control of the controls that you are changing layout for. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;However the biggest impact was given when I changed the following properties:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Avoid using BackColor=Transparent when it’s not strictly needed, windows forms transparency is done with a two pass rendering, so prefer solid colors whenever possible.&lt;/li&gt;    &lt;li&gt;If you use BackgroundImage heavily and with very large images do not underestimate the impact of changing the &lt;strong&gt;BackgroundImageLayout&lt;/strong&gt; property too: the default value it’s ‘Tile’ which means that the rendering engine will do additional computations to figure out if it have to replicate it horizontally and vertically and this is a big show stopper when dealing with performances! Change it to ‘none’ or to the value most appropriate for you (to be honest ‘none’ should be the default value here).&lt;/li&gt;    &lt;li&gt;Set the DoubleBuffered property to true (you need to use reflection if you want to set this on dynamically created controls because it’s a protected method) or use:     &lt;br /&gt;&lt;code&gt;SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true);&lt;/code&gt; in your control’s constructor.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;My recommendation is to change the BackgroundImageLayout from the default ‘Tile’ value to something else (if you don’t really need the tile behavior) for all the controls that use a Background Image, the speed-up in rendering was surprising.&lt;/p&gt;  &lt;p&gt;If you use PictureBoxes too, check the ‘SizeMode’ and set it to an appropriate value in order to reduce unnecessary scaling of the images.   &lt;br /&gt;&lt;/p&gt;  &lt;ul&gt;&lt;/ul&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-forms-closeable-tabcontrol"&gt;Windows Forms: Closeable TabControl&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/optimizing-wmi-query-performances-avoid-nasty-select"&gt;Optimizing WMI query performances - avoid the nasty ‘select *’&lt;/a&gt; (01/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/missing-net-performance-counters-solve"&gt;Missing .NET Performance Counters: how to solve it&lt;/a&gt; (10/07/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/build-windows-8"&gt;Build: Windows 8&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication"&gt;SharePoint Services - Setting up a Website with Forms Authentication&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;&lt;strong&gt;More related document (9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout</guid><pubDate>Wed, 30 Jun 2010 16:31:42 GMT</pubDate><category>Windows forms</category><category>Rendering</category><category>Performance</category></item><item><title>Microsoft Expression Encoder - using LiveJob, LiveDeviceSource and PreviewWindow</title><description>&lt;p&gt;For the proof of concept about a recording and encoding application I’m building, I had the need to show the preview of the actual data stream I can grab from a video source before the actual encoding job started. In the previous example you could view the result of the encoding operation and if you used that code, you could saw a delay between your actions in front of the webcam and the preview of the encoded stream.&lt;/p&gt;  &lt;p&gt;To solve the issue a little more dig into Expression Encoder was needed, at the point of this writing the documentation won’t help you too much cause it’s quite poor compared to the information we’re used to have from MSDN.&lt;/p&gt;  &lt;p&gt;So let’s introduce again our main actors:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;LiveJob - this is the main class you use to perform the encoding from different sources, it has the ability to enumerate the devices, activate the selected sources, chose between preset encoding profiles or use your custom ones, do the dirty encoding job and &lt;em&gt;show a preview of the encoded stream.&lt;/em&gt;&lt;/li&gt;    &lt;li&gt;LiveDeviceSource - this class represent your actual source (or sources - it can mix video and audio) for the raw bits you will pass to the encoder, you can use this to gain access to the selected devices and use their configuration dialog; &lt;em&gt;you can also specify a preview window to be used to see the uncompressed stream&lt;/em&gt;.&lt;/li&gt;    &lt;li&gt;PreviewWindow - this is a wrapper around a plain old winform control or around a WPF window (something with an handle in short, see my previous post).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;To fulfill our requirement we can modify the previous Encoding service in the following way:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Add two properties for the PreviewWindows: one for the raw stream preview coming from the webcam (we call this LivePreviewWindow) and one for the encoded stream (we call it EncodedPreviewWindow)&lt;/li&gt;    &lt;li&gt;Add a private variable to store the LiveDeviceSource we get from mixing the selected devices.&lt;/li&gt;    &lt;li&gt;To display the raw preview, during the device activation we need to set the PreviewWindow property of the active LiveDeviceSource and then we need to call the ActivateSource() function on the LiveJob class (this will be done in the ActivateDevices() function) passing the newly created LiveDeviceSource as parameter; this will activate the preview.&lt;/li&gt;    &lt;li&gt;To display the encoded preview, we need to set the OutputPreviewWindow of the LiveJob class before calling the StartEncoding() function (you can see it in the StartCapture() function).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;If you leave those properties empty the preview will be disabled; here’s the new code for the class:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:6f13e987-705b-436e-a321-186a749f8cd0" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class EncodingService : IDisposable
{
/// &amp;lt;summary&amp;gt;
/// job used to perform the real encoding and mixing of video and audio sources
/// &amp;lt;/summary&amp;gt;
readonly LiveJob _encodeJob = new LiveJob();

/// &amp;lt;summary&amp;gt;
/// the active device source to show the preview and perform the encoding job
/// &amp;lt;/summary&amp;gt;
private LiveDeviceSource _activeSource;

/// &amp;lt;summary&amp;gt;
/// enumerating the devices is a breeze, the LiveJob class does it for you.
/// &amp;lt;/summary&amp;gt;
public ReadOnlyCollection&amp;lt;LiveDevice&amp;gt; VideoDevices { get { return _encodeJob.VideoDevices; } }

/// &amp;lt;summary&amp;gt;
/// enumerating the devices is a breeze, the LiveJob class does it for you.
/// &amp;lt;/summary&amp;gt;
public ReadOnlyCollection&amp;lt;LiveDevice&amp;gt; AudioDevices { get { return _encodeJob.AudioDevices; } }

/// &amp;lt;summary&amp;gt;
/// preview window used to show the live stream (not the encoded one)
/// &amp;lt;/summary&amp;gt;
public PreviewWindow LivePreviewWindow { get; set; }

/// &amp;lt;summary&amp;gt;
/// preview window used to show the encoded stream
/// &amp;lt;/summary&amp;gt;
public PreviewWindow EncodedPreviewWindow { get; set; }

public void ActivateDevices(LiveDevice video, LiveDevice audio)
{
    DeactivateDevices();
    // first off: add a device source specifying the video and audio device you'll be using
    _activeSource = _encodeJob.AddDeviceSource(video, audio);
    // specify a preview window (something with a Handle - any winform control or a WPF window)
    if (_activeSource.PreviewWindow == null &amp;amp;&amp;amp; LivePreviewWindow != null)
        _activeSource.PreviewWindow = LivePreviewWindow;
    // activate the source
    _encodeJob.ActivateSource(_activeSource);
}

public void DeactivateDevices()
{
    if (_activeSource != null &amp;amp;&amp;amp; _activeSource.IsActive)
        _encodeJob.RemoveDeviceSource(_activeSource);
}

public void StartCapture(LiveDevice video, LiveDevice audio, string outputFile)
{
    // assign an output filename
    if (!string.IsNullOrEmpty(outputFile))
        _encodeJob.OutputFileName = outputFile;
    else
        _encodeJob.OutputFormat = new WindowsMediaBroadcastOutputFormat();
    // specify a preview window (something with a Handle - any winform control or a WPF window)
    if (_encodeJob.OutputPreviewWindow == null &amp;amp;&amp;amp; EncodedPreviewWindow != null)
        _encodeJob.OutputPreviewWindow = EncodedPreviewWindow;
    // start the job (this activates the preview too)
    _encodeJob.StartEncoding();
}

public void StopCapture()
{
    _encodeJob.StopEncoding();
}

public void Dispose()
{
    SafeDispose(_encodeJob);
}

private static void SafeDispose(LiveJob job)
{
    try
    {
        if (job != null)
        {
            job.StopEncoding();
            job.Dispose();
        }
    }
    catch (Exception ex)
    {
        // sometimes I get a COM exception when disposing the job...it needs further investigation
        System.Diagnostics.Debug.WriteLine(ex);
    }
}

/// &amp;lt;summary&amp;gt;
/// states if you can activate the devices
/// &amp;lt;/summary&amp;gt;
public bool CanActivate
{
    get { return _activeSource == null || !_activeSource.IsActive; }
}

/// &amp;lt;summary&amp;gt;
/// states if we are streaming something to the preview window
/// &amp;lt;/summary&amp;gt;
public bool IsActive
{
    get { return _activeSource != null &amp;amp;&amp;amp; _activeSource.IsActive; }
}

/// &amp;lt;summary&amp;gt;
/// states if you can start the encoding job
/// &amp;lt;/summary&amp;gt;
public bool CanCapture
{
    get { return IsActive &amp;amp;&amp;amp; !_encodeJob.IsCapturing; }
}

/// &amp;lt;summary&amp;gt;
/// states if we are performing the actual encoding job
/// &amp;lt;/summary&amp;gt;
public bool IsCapturing
{
    get { return _encodeJob.IsCapturing; }
}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;To use this service class you must first call ActivateDevices() to create the live source and activate it, then you can start and stop the encoding job using the StartEncoding() and StopEncoding functions.
  &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As a side note: &lt;strong&gt;pay very good attention to the size of the PreviewWindow&lt;/strong&gt;: if you are building a WPF application and you use a WindowsFormsHost and a Panel controls to display the previews...the sizes of those controls will likely be (0,0) at the moment of creation due to the WPF rendering pipeline (I did this mistake too), so you will probably need to call PreviewWindow.SetSize() or delay the creation of those controls until you know the dimensions of the preview rendering boxes.&lt;/p&gt;

&lt;p&gt;In the quick and dirty demo application I built, I ended up having an ugly fix for this issue:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:47af4239-b460-4074-bba8-cccc4ed31d7e" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;private void PreviewRect_SizeChanged(object sender, SizeChangedEventArgs e)
{
  _vm.LivePreviewWindow.SetSize(new Size((int)PreviewRect.RenderSize.Width, (int)PreviewRect.RenderSize.Height));
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Next time I’ll show you a trick on how to add some overlays over the WindowsFormsHost controls to add some cool UI effects to your previews.
  &lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/microsoft-expression-encoder-quickstart"&gt;Microsoft Expression Encoder - quick-start&lt;/a&gt; (06/03/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/using-regular-expressions-to-identify-possible-bugs-in-code"&gt;Using Regular Expressions to identify possible bugs in code&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp"&gt;WPF, Silverlight, WP7 and the Async CTP&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/microsoft-expression-encoder-livejob-livedevicesource-previewwindow"&gt;&lt;strong&gt;More related document (13)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/microsoft-expression-encoder-livejob-livedevicesource-previewwindow</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/microsoft-expression-encoder-livejob-livedevicesource-previewwindow#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/microsoft-expression-encoder-livejob-livedevicesource-previewwindow</guid><pubDate>Tue, 08 Jun 2010 18:03:34 GMT</pubDate><category>Expression</category><category>Encoder</category><category>Wpf</category><category>PreviewWindow</category></item><item><title>Microsoft Expression Encoder - quick-start</title><description>&lt;p&gt;Recently I’ve been asked to build a proof of concept of an application involving the use of a webcam and a microphone to record some streams and elaborate them after.&lt;/p&gt;  &lt;p&gt;At first I’ve tried with the new Silverlight support for webcam and microphone...it’s extremely easy to obtain the raw streams of data from both the devices...but after that you’re left to yourself: no support for whatsoever compression or multiplexing algorithm (I looked around and found nothing suitable to my needs) and due to the short time available I had to give up on Silverlight.&lt;/p&gt;  &lt;p&gt;I started to look at what I could use on a WPF/C# solution, we have more options here:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Wrapper libraries over the good old (and complex to use) DirectShow&lt;/li&gt;    &lt;li&gt;Windows Media Encoder 9&lt;/li&gt;    &lt;li&gt;Microsoft Expression Encoder&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;All these 3 technologies do the job, but DirectShow and WME (which actually have the richest set of features) are no more supported (or will be dropped soon), they also aren’t managed assemblies.&lt;/p&gt;  &lt;p&gt;So I decided to go for the ‘new’ Expression Encoder (also a new version should be out in the next months); it turns out that it’s quite simple to use...from my 2 days of experiments it turns out that it have 2 big problems:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;The lack of a good documentation and samples...what you have on MSDN is quite frankly poor compared to the standard documentation we’re used to have from Microsoft&lt;/li&gt;    &lt;li&gt;Although it’s very ‘easy’ to use it still lack some of the features WME have...but I hope they will be integrated in the future release.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Enough talking, I’ll just post you some snippets from the demo application I’m building, here’s the class I started with to access and encode the streams coming from the webcam and the microphone:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:971616e7-45f0-4ec2-b025-52998db3d8a0" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 21;  toolbar: true; "&gt;public class EncodingService : IDisposable
{
   readonly LiveJob _job = new LiveJob();

   // enumerating the devices is a breeze, the LiveJob class does it for you.
   public ReadOnlyCollection&amp;lt;LiveDevice&amp;gt; VideoDevices { get { return _job.VideoDevices; } }

   public ReadOnlyCollection&amp;lt;LiveDevice&amp;gt; AudioDevices { get { return _job.AudioDevices; } }

   public PreviewWindow PreviewWindow { get; set; }

   public bool IsCapturing
   {
       get { return _job.IsCapturing; }
   }

   public void StartCapture(LiveDevice video, LiveDevice audio, string outputFile)
   {
       // first off: add a device source specifying video and audio device you'll be using
       var source = _job.AddDeviceSource(video, audio);
       // choose an output name
       _job.OutputFileName = outputFile;
       // activate the source
       _job.ActivateSource(source);
       // specify a preview window (something with a Handle - any winform control or a WPF window)
       if (_job.OutputPreviewWindow == null &amp;amp;&amp;amp; PreviewWindow != null)
           _job.OutputPreviewWindow = PreviewWindow;
       // start the job (this activates the preview too)
       _job.StartEncoding();
   }

   public void StopCapture()
   {
       _job.StopEncoding();
       // remove the source after the stop
       _job.RemoveDeviceSource(_job.DeviceSources[0]);
   }

   public void Dispose()
   {
       try
       {
           if (_job != null)
               _job.Dispose();
       }
       catch
       {
           // sometimes I get a COM exception when disposing the job...it need further investigation
       }
   }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The code is well commented and self explanatory: you select the LiveDevice you wanna use, add them to a LiveDeviceSource, activate it and in the end you ask the LiveJob to start the process...simple (I’ve skipped the device configuration, it will be shown in another post).&lt;/p&gt;

&lt;p&gt;The biggest problem is the ‘PreviewWindow’...it turns out that to instantiate this class you need an Handle to something it will use to render the video stream (good old pre-WPF code here :) )...in a WPF the application the only thing that has an handle is the Window class, thus if you want your application to be fully written using WPF you need to have a floating preview window.&lt;/p&gt;

&lt;p&gt;If you want to integrate it in a box in your main application you can use a WindowsFormsHost control and a Panel (got the idea from the Expression Encoder forum), like this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:8905e593-6c81-496f-835d-e302f4a2361b" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;private void CreatePreviewBox()
{
    WindowsFormsHost host = new WindowsFormsHost();
    var panel = new System.Windows.Forms.Panel();
    panel.Width = (int)PreviewRect.ActualWidth;
    panel.Height = (int)PreviewRect.ActualHeight;
    host.Child = panel;
    PreviewRect.Content = host;
    HandleRef windowHandle = new HandleRef(panel, panel.Handle);
    _vm.PreviewWindow = new PreviewWindow(windowHandle);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Enough for today, see you next.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/microsoft-expression-encoder-livejob-livedevicesource-previewwindow"&gt;Microsoft Expression Encoder - using LiveJob, LiveDeviceSource and PreviewWindow&lt;/a&gt; (06/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/using-regular-expressions-to-identify-possible-bugs-in-code"&gt;Using Regular Expressions to identify possible bugs in code&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp"&gt;WPF, Silverlight, WP7 and the Async CTP&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/microsoft-expression-encoder-quickstart"&gt;&lt;strong&gt;More related document (13)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/microsoft-expression-encoder-quickstart</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/microsoft-expression-encoder-quickstart#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/microsoft-expression-encoder-quickstart</guid><pubDate>Thu, 03 Jun 2010 15:56:57 GMT</pubDate><category>Wpf</category><category>Expression</category><category>Encoder</category><category>Webcam</category><category>Microphone</category></item><item><title>Dexter is growing: Dynamic Pages and better Windows Live Writer support</title><description>&lt;p&gt;In the past month I was working on some cool new features to extend this blog engine:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Dynamic Pages - to add some basic CMS-like capabilities to Dexter. &lt;/li&gt;    &lt;li&gt;Better Windows Live Writer experience - to manage more details in blog posts and in dynamic pages, you can now create, update and delete both posts and pages directly in WLW. &lt;/li&gt;    &lt;li&gt;A Silverlight 4 Back Office project - I really don’t like to do data entry in Asp.net :). &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The first two new features will be added to the Trunk shortly - they are currently under test in my own blog - so let’s give those two beauties a look, here’s how the lower property bar of WLW looks like when dealing with Posts:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/wlw_lower_posts_4.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="wlw_lower_posts" border="0" alt="wlw_lower_posts" align="left" src="http://www.primordialcode.com/UserFiles/Guardian/wlw_lower_posts_thumb_1.png" width="475" height="104" /&gt;&lt;/a&gt; &lt;a href="http://www.primordialcode.com/UserFiles/Guardian/wlw_hierarc_cats_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="wlw_hierarc_cats" border="0" alt="wlw_hierarc_cats" src="http://www.primordialcode.com/UserFiles/Guardian/wlw_hierarc_cats_thumb.png" width="102" height="104" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;You can have a full hierarchical view of all the categories you have in your blog (and you can add new ones). &lt;/li&gt;    &lt;li&gt;You type in the keywords/tags associated with a post in the keyword box (it has auto-complete support). &lt;/li&gt;    &lt;li&gt;You can the specify a date for the post (even a future one, in this case the publication will be deferred). &lt;/li&gt;    &lt;li&gt;You can specify the Slug (that will be used in the post address) or leave it blank and let Dexter auto-generate it for you. &lt;/li&gt;    &lt;li&gt;You can specify an Abstract for the Post or let Dexter auto-generate it for you. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;We now have support for creating/modifying and deleting Dynamic Pages directly in Windows Live Writer:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/wlw_new_page_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="wlw_new_page" border="0" alt="wlw_new_page" align="left" src="http://www.primordialcode.com/UserFiles/Guardian/wlw_new_page_thumb.png" width="244" height="117" /&gt;&lt;/a&gt; &lt;a href="http://www.primordialcode.com/UserFiles/Guardian/wlw_lower_pages_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="wlw_lower_pages" border="0" alt="wlw_lower_pages" src="http://www.primordialcode.com/UserFiles/Guardian/wlw_lower_pages_thumb.png" width="381" height="117" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;In the lower property bar you can specify:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;A parent page for the current page you’re editing. &lt;/li&gt;    &lt;li&gt;A page order to decide how the pages are sorted in the same level. &lt;/li&gt;    &lt;li&gt;The Slug (that will be used in the post address) or leave it blank and let Dexter auto-generate it for you. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;To modify or delete a page just push the open button and select ‘pages’ in the Open dialog window; you can then select a page and edit it or delete it:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/wlw_open_page_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="wlw_open_page" border="0" alt="wlw_open_page" src="http://www.primordialcode.com/UserFiles/Guardian/wlw_open_page_thumb.png" width="244" height="186" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Here’s a screenshot of the new dynamic menu in action:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/wlw_dyn_pages_menu_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="wlw_dyn_pages_menu" border="0" alt="wlw_dyn_pages_menu" src="http://www.primordialcode.com/UserFiles/Guardian/wlw_dyn_pages_menu_thumb.png" width="404" height="164" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;In this screenshot the tabs: ‘About’, ‘Resources’ and ‘Tools and Utilities’ are dynamic pages.&lt;/p&gt;  &lt;p&gt;To check the full source code of this project navigate to our CodePlex page: &lt;a href="http://dexterblogengine.codeplex.com/" target="_blank"&gt;Dexter Blog Engine&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out.hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...hot to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...how to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/primordialcode-powered-open-source-dexter-blog-engine"&gt;PrimordialCode is now powered by the open source Dexter Blog Engine&lt;/a&gt; (03/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/quibrowserit-powered-dexter-blog-engine"&gt;QuiBrowser.it powered by Dexter Blog Engine&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/build-windows-8"&gt;Build: Windows 8&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/dexter-dynamic-pages-windows-live-writer-support"&gt;&lt;strong&gt;More related document (9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support</guid><pubDate>Wed, 02 Jun 2010 15:23:53 GMT</pubDate><category>Dexter</category><category>Windows Live Writer</category><category>WLW</category></item><item><title>WPF: x:Name Referenced Objects</title><description>&lt;p&gt;Yesterday a friend of mine showed me some WPF code: he defined a transformation in XAML and was trying to alter it at runtime changing part of its transformation matrix (he was doing that substituting the scale transform matrix as a whole); he kept trying but he never saw any result (the object was always rendered with the same dimensions).&lt;/p&gt;  &lt;p&gt;I looked at the code and at first I was surprised too to not see it working as expected, I gave him a quick explanation (which, in all honesty, I have to admit it was partially wrong :D) and suggested another way to alter the things that worked.&lt;/p&gt;  &lt;p&gt;Later on I had time to double check the things and found what was my wrong assumption...but let’s start from the beginning.&lt;/p&gt;  &lt;p&gt;Here’s a snippet of the XAML he posed me:&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5411f686-5fb0-442e-beca-f7932e7a5c1a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
&amp;lt;Ellipse x:Name=&amp;quot;spinningWheel&amp;quot; Width=&amp;quot;128&amp;quot; Height=&amp;quot;128&amp;quot; Canvas.Left=&amp;quot;64&amp;quot; Canvas.Top=&amp;quot;64&amp;quot; RenderTransformOrigin=&amp;quot;0.5,0.5&amp;quot;&amp;gt;
  	&amp;lt;Ellipse.RenderTransform&amp;gt;
		&amp;lt;TransformGroup&amp;gt;
			&amp;lt;ScaleTransform x:Name=&amp;quot;spinningScaleTx&amp;quot; CenterX=&amp;quot;0.5&amp;quot; CenterY=&amp;quot;0.5&amp;quot;/&amp;gt;
			&amp;lt;SkewTransform/&amp;gt;
			&amp;lt;RotateTransform/&amp;gt;
			&amp;lt;TranslateTransform/&amp;gt;
		&amp;lt;/TransformGroup&amp;gt;
  	&amp;lt;/Ellipse.RenderTransform&amp;gt;
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
and in code he was doing something like: 

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:57f76431-0e18-4f9c-ba72-6dc9256fb913" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;...
this.spinningScaleTx = new ScaleTransform(2,2);
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;expecting the ellipse to double its size...but nothing happened.&lt;/p&gt;

&lt;p&gt;A quick test shows why:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:fe986905-c84c-4339-a888-82ed3e5a7ff7" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;this.spinningScaleTx = new ScaleTransform(2,2);
TransformGroup tg = spinningWheel.RenderTransform as TransformGroup;
if (tg.Children.Contains(this.spinningScaleTx))
	MessageBox.Show(&amp;quot;We will NEVER see this MessageBox!&amp;quot;);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Changing the ScaleTransform object in this way wasn’t altering the TransformGroup associated with the object, me and him where doing the same mistake: we gave it for granted that under the hood the XAML code was converted in something like this metacode:&lt;/p&gt;

&lt;p&gt;spinningWheel.RenderTransform = (new TransformGroup()).Children.Add(spinningScaleTx);&lt;/p&gt;

&lt;p&gt;Giving an in-dept look with Reflector clarifies everything:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:67f50f33-1ddd-4836-ab5d-84a76b3f5deb" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;[GeneratedCode(&amp;quot;PresentationBuildTasks&amp;quot;, &amp;quot;4.0.0.0&amp;quot;)]
public class MainWindow : Window, IComponentConnector
{
    // Fields
    ...
    internal ScaleTransform spinningScaleTx;
    internal Ellipse spinningWheel;

    // Methods
    ...
    [EditorBrowsable(EditorBrowsableState.Never), DebuggerNonUserCode]
    void IComponentConnector.Connect(int connectionId, object target)
    {
        switch (connectionId)
        {
            ...
            case 2:
                this.spinningWheel = (Ellipse) target;
                break;

            case 3:
                this.spinningScaleTx = (ScaleTransform) target;
                break;
            ...
        }
    }
	...
}

 
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;I’ve stripped out non interesting code, here you can see that ‘spinningWheel’ and ‘spinningScaleTx’ are just references to the real objects that are present in the internal object graph that is our window, so changing their instances will not result in altering the graph; a better look at the MSDN documentation would have avoided me (and him) loosing time:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x:Name&lt;/code&gt; is a xaml concept, used mainly to reference elements; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;quot;Uniquely identifies object elements for purpose of access to the instantiated element from code-behind or general code. Once applied to a backing programming model, x:Name can be considered equivalent to the variable holding an object reference, as returned by a constructor. the specified &lt;code&gt;x:Name&lt;/code&gt; becomes the name of a field that is created in the underlying code when xaml is processed, and that field holds a reference to the object.&amp;quot; (MSDN) &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, it's a designer-generated field, which has internal access by default; the correct way to alter properties of an element qualified with an x:Name is to edit its properties directly and not substituting the instances. We could also have modified the RenderTransform of the ellipse changing the ScaleTransform instance there, but it would have be another conceptual mistake because the spinningScaleTx member would have been gone out of sync referencing a ‘dead object’.&lt;/p&gt;

&lt;p&gt;Lesson learned: never give anything for granted and double check the documentation (every time!).&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp"&gt;WPF, Silverlight, WP7 and the Async CTP&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-generic-serverside-pagination-data-provider"&gt;WPF: a generic ‘server-side’ pagination data provider&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wpf-x-name-referenced-objects"&gt;&lt;strong&gt;More related document (12)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects</guid><pubDate>Tue, 01 Jun 2010 21:03:56 GMT</pubDate><category>WPF</category></item><item><title>Silverlight: adding an IsEditing property to the DataForm</title><description>&lt;p&gt;I was playing around with the DataForm control offered by the Silverlight 4 Toolkit and I realized it’s missing an IsEditing property I could have used to bind to other interface elements (and disable them while I am editing something in the DataForm).&lt;/p&gt;  &lt;p&gt;This property will be especially useful if you use the DataForm with the AutoCommit property set to false: in this case you cannot change the CurrentItem while you are in edit mode, because the control itself will throw an exception.&lt;/p&gt;  &lt;p&gt;Adding this property isn’t too hard because the control offers a couple of events (BeginEdit/EndEdit) you can use as a starting point. So, in my first attempt, I derived a new DataForm control, added a new IsEditing DependencyPropery and overridden the OnBeginningEdit() and OnItemEditEnded() function to set the property to the correct values.&lt;/p&gt;  &lt;p&gt;It worked, but I had a subtle problem: the OnBeginEdit() is fired the first time when you click on the form (and you can disable the rest of the interface, but if you have AutoCommit set to false and you do not want to edit nor change the item anymore you have no way to have the EndEdit fired, because to fire it you need to switch the focus to another control...but all your interface is now disabled...and you are stuck! You are forced to edit something to be able to cancel the operation).&lt;/p&gt;  &lt;p&gt;Solving this problem wasn’t totally hard, all you need to do is to change the IsEditing property only when you are interacting with editing controls or when the underlying bound object gets changed; so I’ve wired my state changes to the OnKeyUp() of the DataForm and to the PropertyChanged() event exposed by the bound object.&lt;/p&gt;  &lt;p&gt;The resulting class worked quite well: the IsEditing property gets changed every time you type something in an control or when you change a property of the bound objet without keyboard interaction (like using a Slider or with a DatePicker control).&lt;/p&gt;  &lt;p&gt;Here’s the code for the ‘new’ DataForm.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b8959e7c-2d6a-4eac-9361-dcb549c274a4" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;public class CustomDataForm : DataForm
{
   #region &amp;quot;IsEditing&amp;quot;
   
   public bool IsEditing
   {
       get { return (bool)GetValue(IsEditingProperty); }
       set { SetValue(IsEditingProperty, value); }
   }

   // Using a DependencyProperty as the backing store for IsEditing.  This enables animation, styling, binding, etc...
   public static readonly DependencyProperty IsEditingProperty =
       DependencyProperty.Register(&amp;quot;IsEditing&amp;quot;, typeof(bool), typeof(CustomDataForm), new PropertyMetadata(false));

   // we cannot use the BeginEdit event, we may have no way to exit the editing state if we do not edit anything.
   // under special conditions (like having no explicit enable/disable edit mode for the DataForm)
   //protected override void OnBeginningEdit(CancelEventArgs e)
   //{
   //    base.OnBeginningEdit(e);
   //}

   // when we edit any control inside the DataForm we set the IsEditing at true
   protected override void OnKeyUp(KeyEventArgs e)
   {
       base.OnKeyUp(e);

       IsEditing = true;
   }        

   protected override void OnCurrentItemChanged(EventArgs e)
   {
       base.OnCurrentItemChanged(e);
       SubscribeToProperyChanged();
   }

   // for controls that do not use keyboard inputs we rely on property changed of the binded object
   private void SubscribeToProperyChanged()
   {
       INotifyPropertyChanged obj = CurrentItem as INotifyPropertyChanged;
       if (obj != null)
       {
           // remove and reattach the event in case we get back to the same object or we manage a list of objects
           obj.PropertyChanged -= obj_PropertyChanged;
           obj.PropertyChanged += obj_PropertyChanged;
       }
   }

   void obj_PropertyChanged(object sender, PropertyChangedEventArgs e)
   {
       if (!IsRiaEntityProperty(e.PropertyName))
           IsEditing = true;
   }

   protected override void OnItemEditEnded(DataFormEditEndedEventArgs e)
   {
       base.OnItemEditEnded(e);

       IsEditing = false;
   }

   /// &amp;lt;summary&amp;gt;
   /// list of properties exposed by the base RIA Entity Class
   /// &amp;lt;/summary&amp;gt;
   static string[] pInfos;
       
   private static bool IsRiaEntityProperty(string property)
   {
       if (pInfos == null)
       {
           Type t = typeof(Entity);
           pInfos = t.GetProperties().Select(pi =&amp;gt; pi.Name).ToArray();
       }
       return pInfos.Contains(property);
   }

   #endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;A little tweak have to be done when dealing with RIA services generated proxy classes: in the PropertyChanged event handler we have to check if the property that was changed was one exposed by the RIA infrastructure and in that case we do not have to set the IsEditing property (otherwise we may have side effects that will keep our UI disabled).&lt;/p&gt;

&lt;p&gt;Now you can bind it to the ‘IsEnabled’ property of any other control:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a304beab-b8f4-44d3-9b30-abb586f4a935" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 4;  toolbar: true; "&gt;&amp;lt;Button Command=&amp;quot;{Binding DeletePageCommand}&amp;quot; 
        CommandParameter=&amp;quot;{Binding Path=SelectedPage}&amp;quot; 
		IsEnabled=&amp;quot;{Binding ElementName=EditForm, Path=IsEditing, ValidatesOnNotifyDataErrors=False, Converter={StaticResource NotOperatorValueConverter}}&amp;quot;&amp;gt;
    &amp;lt;StackPanel Orientation=&amp;quot;Horizontal&amp;quot;&amp;gt;
        	...
    &amp;lt;/StackPanel&amp;gt;
&amp;lt;/Button&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;This can be a good workaround until the guys in that develop the toolkit add a similar property to the official control release.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-available"&gt;Silverlight 2 RC0 Available&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-datagrid-updated"&gt;Silverlight Datagrid Updated&lt;/a&gt; (01/12/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-adding-isediting-property-dataform"&gt;&lt;strong&gt;More related document (40)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-adding-isediting-property-dataform</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-adding-isediting-property-dataform#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-adding-isediting-property-dataform</guid><pubDate>Mon, 24 May 2010 17:01:33 GMT</pubDate><category>Silverlight</category><category>DataForm</category><category>Edit</category><category>Editing</category></item><item><title>Breaking news: the First European NHibernate Day had been officially announced</title><description>&lt;p&gt;Ladies and Gentlemen, &lt;a href="http://www.dotnetmarche.org/" target="_blank"&gt;DotNetMarche&lt;/a&gt; and &lt;a href="http://www.ugialt.net/" target="_blank"&gt;UgiAlt.NET&lt;/a&gt; are proud to introduce to you this very interesting initiative: an entire day devoted to Object Relational Mapping, NHibernate and related technologies.&lt;/p&gt;  &lt;p&gt;It will take place next Fall in Italy on 9th October; for more info and details check this &lt;a href="http://codeclimber.net.nz/archive/2010/05/18/announcing-first-european-nhibernate-day-italy-nhday.aspx" target="_blank"&gt;post&lt;/a&gt;, the official &lt;a href="http://nhday.eu/" target="_blank"&gt;NHDay&lt;/a&gt; website and follow us on twitter (tag #nhday).&lt;/p&gt;  &lt;p&gt;The event is open to everyone, even non Italians, cause almost all the sessions will be presented in English; if you are interested and want to attend or contribute head to the website and get in touch with us.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday"&gt;The NHibernate Day is coming...this Saturday!&lt;/a&gt; (10/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhday-event-thoughts"&gt;#nhday - after event thoughts&lt;/a&gt; (10/11/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/breaking-news-european-nhibernate-day-officially-announced"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced</guid><pubDate>Thu, 20 May 2010 14:41:26 GMT</pubDate><category>NHibernate</category><category>NHDay</category></item><item><title>Silverlight, M-V-VM ... and IoC - part 4</title><description>&lt;p&gt;Let’s move on to the next step and remove all the code on the view that is directly related to the commands the user can give through buttons. To do so we use a new feature of Silverlight 4: Commanding.&lt;/p&gt;  &lt;p&gt;Since the release of Silverlight 2 the runtime offered a class -&lt;strong&gt;ICommand&lt;/strong&gt;- that we could use to implement a commanding framework. WPF had a full implementation of a commanding framework while in Silverlight it was completely left to the user (a couple of solutions can be found on the web).&lt;/p&gt;  &lt;p&gt;With the release of Silverlight 4 every control that derive from ButtonBase now expose two new properties - &lt;strong&gt;Command&lt;/strong&gt; and &lt;strong&gt;CommandParameter&lt;/strong&gt; - you can use in binding with an ICommand object allowing for a declarative approach when it comes to respond to click events raised by those controls; we can now implement a pure form of MVVM without having to rely on external frameworks.&lt;/p&gt;  &lt;p&gt;There are some good resources available out there about the basics of commanding in Silverlight, here are two of them:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.wintellect.com/CS/blogs/jprosise/archive/2009/12/01/silverlight-4-s-new-command-support.aspx" target="_blank"&gt;SILVERLIGHT 4'S NEW COMMANDING SUPPORT&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://johnpapa.net/silverlight/5-simple-steps-to-commanding-in-silverlight/" target="_blank"&gt;5 Simple Steps to Commanding in Silverlight&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;However we will follow a slightly different approach...ICommand is an interface, so it is well suited to be used with an IoC container :D. Defining our own set of commands - be it by registering them with names or by defining new interfaces that derive from ICommand and registering them - we can leave to the container the responsibility to configure the ViewModels with the actual instances of those commands that will be later on used with binding.&lt;/p&gt;  &lt;p&gt;This opens up for a lot of possibilities: you can control the lifetime of a command object through the container (transient or singleton, allowing you to share the behavior if needed) and you can ‘spam’ the same command in different sections of your interface easily (binding to the same property of the ViewModel); even better you can use AOP techniques to add behaviors to your commands (like logging or tracing abilities to have some usage stats of you application).&lt;/p&gt;  &lt;p&gt;Let’s see a first time implementation; let’s define a base class for our commands:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:85c21f27-f6d1-4d5b-8ad5-92e675f7f1fa" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public abstract class BaseCommand : ICommand
{
    bool canExecuteCache;

    protected abstract bool CanExecuteImpl(object parameter);

    #region ICommand Members

    public bool CanExecute(object parameter)
    {
        bool temp = CanExecuteImpl(parameter);

        if (canExecuteCache != temp)
        {
            canExecuteCache = temp;
            if (CanExecuteChanged != null)
            {
                CanExecuteChanged(this, new EventArgs());
            }
        }

        return canExecuteCache;
    }

    public event EventHandler CanExecuteChanged;

    public abstract void Execute(object parameter);
    
    #endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;and (continuing from the previous blog post) the actual implementation of the Search command:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:8770c264-97f5-44fb-abea-2f95c7f5b2de" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class SearchCommand : BaseCommand
{
    public SearchCommand(ISearchViewModel viewModel)
    {
        _viewModel = viewModel;
    }

    private ISearchViewModel _viewModel;

    protected override bool CanExecuteImpl(object parameter)
    {
        return !_viewModel.IsBusy;
    }

    public override void Execute(object parameter)
    {
        _viewModel.PerformSearch(parameter.ToString());
    }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;In this simple example I chose to use the functions exposed by the ViewModel itself, another approach (maybe subject for later refactoring) is to move out the search capabilities from the ViewModel to a search service class and inject that in the command and in the ViewModel, but let’s keep things simple for now.&lt;/p&gt;

&lt;p&gt;We now need to modify the interface and the implementation of the ViewModel:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:beca7888-37b3-4259-955f-97c61b5f10ff" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public interface ISearchViewModel : IViewModel
{
    new ISearchView View { get; }

    /// &amp;lt;summary&amp;gt;
    /// Collection that will be used to expose the result of the search operation
    /// &amp;lt;/summary&amp;gt;
    PagedCollectionView SearchResults { get; set; }

    /// &amp;lt;summary&amp;gt;
    /// performs an asyncronous search throught the webservice and returns the results filling in the SearchResults collection
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;query&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
    void PerformSearch(string query);

    SearchCommand SearchCommand { get; set; }

    NavigateToAlbumCommand OpenAlbumCommand { get; set; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;I’ll omit the code for the ViewModel because we just added the two SearchCommand and OpenAlbumCommand properties for property injection (we cannot have those on the constructor to avoid circular references when resolving the objects).&lt;/p&gt;

&lt;p&gt;We can now change the code behind file of the Wiew and wipe-out all the code that was used to wire up to the button events:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:fead6d28-5325-4884-bef1-0d467d918c1d" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public partial class Search : Page, ISearchView
{
    protected Search()
    {
        InitializeComponent();

        Loaded += Search_Loaded;
    }

    public Search(ISearchViewModel viewModel)
        : this()
    {
        (this as IView).ViewModel = viewModel;
    }

    public ILogger Logger { get; set; }

    IViewModel IView.ViewModel { get { return DataContext as IViewModel; } set { DataContext = value; } }

    public ISearchViewModel ViewModel { get { return DataContext as ISearchViewModel; } }

    void Search_Loaded(object sender, RoutedEventArgs e)
    {
        // check if we asked for this search directly by navigating to this page
        // this should be maybe moved into the ViewModel 
        if (NavigationContext.QueryString.Count &amp;gt; 0)
        {
            object query = NavigationContext.QueryString[&amp;quot;q&amp;quot;];
            if (query != null)
                ViewModel.PerformSearch(query.ToString());
        }
    }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Much shorter and cleaner than before, we now have to change the XAML (and bind to the ICommand objects) from:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:fcc4ddc7-ccd8-4b91-a409-837180da40f5" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;...
&amp;lt;StackPanel Orientation=&amp;quot;Horizontal&amp;quot; &amp;gt;
   &amp;lt;TextBox x:Name=&amp;quot;TxtSearch&amp;quot; HorizontalAlignment=&amp;quot;Left&amp;quot; Margin=&amp;quot;0,8&amp;quot; Width=&amp;quot;256&amp;quot; /&amp;gt;
   &amp;lt;Button x:Name=&amp;quot;BtnSearch&amp;quot; Margin=&amp;quot;10,8&amp;quot; Width=&amp;quot;100&amp;quot; Content=&amp;quot;Search&amp;quot; Click=&amp;quot;BtnSearch_Click&amp;quot;/&amp;gt;
   &amp;lt;Button x:Name=&amp;quot;BtnAddNewAlbum&amp;quot; Margin=&amp;quot;10,8&amp;quot; Width=&amp;quot;100&amp;quot; Content=&amp;quot;Add New Album&amp;quot; Click=&amp;quot;BtnAddNewAlbum_Click&amp;quot;/&amp;gt;
&amp;lt;/StackPanel&amp;gt;
...
&amp;lt;Border Tag=&amp;quot;{Binding Id}&amp;quot; MouseLeftButtonDown=&amp;quot;ItemClick&amp;quot; HorizontalAlignment=&amp;quot;Center&amp;quot; VerticalAlignment=&amp;quot;Center&amp;quot;&amp;gt;
 	&amp;lt;Border.Effect&amp;gt;
   	&amp;lt;DropShadowEffect BlurRadius=&amp;quot;100&amp;quot; ShadowDepth=&amp;quot;0&amp;quot; Opacity=&amp;quot;1&amp;quot; Color=&amp;quot;#FFFFFF&amp;quot; /&amp;gt;
  	&amp;lt;/Border.Effect&amp;gt;
  	&amp;lt;Image Source=&amp;quot;{Binding Image}&amp;quot; Width=&amp;quot;60&amp;quot; Height=&amp;quot;60&amp;quot; Cursor=&amp;quot;Hand&amp;quot;/&amp;gt;
&amp;lt;/Border&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:dbbb32e0-34a0-4f94-b165-54f5f7206d0a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;...
&amp;lt;StackPanel Orientation=&amp;quot;Horizontal&amp;quot; &amp;gt;
   &amp;lt;TextBox x:Name=&amp;quot;TxtSearch&amp;quot; HorizontalAlignment=&amp;quot;Left&amp;quot; /&amp;gt;
   &amp;lt;Button x:Name=&amp;quot;BtnSearch&amp;quot; Content=&amp;quot;Search&amp;quot; Command=&amp;quot;{Binding SearchCommand}&amp;quot; CommandParameter=&amp;quot;{Binding ElementName=TxtSearch, Path=Text}&amp;quot; /&amp;gt;
   &amp;lt;Button x:Name=&amp;quot;BtnAddNewAlbum&amp;quot; Content=&amp;quot;Add New Album&amp;quot; Command=&amp;quot;{Binding OpenAlbumCommand}&amp;quot;/&amp;gt;
&amp;lt;/StackPanel&amp;gt;
...
 &amp;lt;Button Command=&amp;quot;{Binding ElementName=LayoutRoot, Path=DataContext.OpenAlbumCommand}&amp;quot; CommandParameter=&amp;quot;{Binding Id}&amp;quot;&amp;gt;
    &amp;lt;Button.Template&amp;gt;
        &amp;lt;ControlTemplate&amp;gt;
            &amp;lt;Border HorizontalAlignment=&amp;quot;Center&amp;quot; VerticalAlignment=&amp;quot;Center&amp;quot;&amp;gt;
                &amp;lt;Border.Effect&amp;gt;
                    &amp;lt;DropShadowEffect BlurRadius=&amp;quot;100&amp;quot; ShadowDepth=&amp;quot;0&amp;quot; Opacity=&amp;quot;1&amp;quot; Color=&amp;quot;#FFFFFF&amp;quot; /&amp;gt;
                &amp;lt;/Border.Effect&amp;gt;
                &amp;lt;Image Source=&amp;quot;{Binding Image}&amp;quot; Width=&amp;quot;60&amp;quot; Height=&amp;quot;60&amp;quot; Cursor=&amp;quot;Hand&amp;quot;/&amp;gt;
            &amp;lt;/Border&amp;gt;
        &amp;lt;/ControlTemplate&amp;gt;
    &amp;lt;/Button.Template&amp;gt;
&amp;lt;/Button&amp;gt;
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;We’ve removed all the click events and we’ve had to add a button around the image of the album to support drilldown to the detail page (because Border isn’t inherited from ButtonBase and thus does not have support for commanding).&lt;/p&gt;

&lt;p&gt;The last step is to register the commands in the IoC container:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:97b03baa-91bf-4ee5-bb2b-ff59d1222c06" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;Container.Register(
   // search Feature
   Component.For&amp;lt;SearchCommand&amp;gt;(),
   Component.For&amp;lt;NavigateToAlbumCommand&amp;gt;(), 
   Component.For&amp;lt;ISearchViewModel&amp;gt;().ImplementedBy&amp;lt;SearchViewModel&amp;gt;().LifeStyle.Custom&amp;lt;Structura.Castle.Windsor.Lifecycle.SingletonLifestyleManager&amp;gt;(), 
   Component.For&amp;lt;ISearchView&amp;gt;().ImplementedBy&amp;lt;Search&amp;gt;().Named(&amp;quot;Search&amp;quot;)
);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The next time we resolve an ISearchViewModel it will come up together with all the commands configured.&lt;/p&gt;

&lt;p&gt;Following this pattern you have to be careful again about the dependencies an object have: the command now have a mandatory dependency on the ViewModel; it’s better if you do not perform any action on the ViewModel itself in the command constructor, mainly because you aren’t sure that the ViewModel is fully constructed yet (the command’s instance is being generated while resolving optional dependencies of the ViewModel, so maybe more references have to be satisfied before the object is fully configured and ready to be used). This behavior is different if you rely on an external service class instead of the ViewModel to implement the search capability.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To see it in action refer to my test project on CodePlex: &lt;a href="http://dnmmusicstoresl.codeplex.com/"&gt;http://dnmmusicstoresl.codeplex.com/&lt;/a&gt; Changeset 42274&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1"&gt;Silverlight, M-V-VM ... and IoC - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3"&gt;Silverlight, M-V-VM ... and IoC - part 3&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-available"&gt;Silverlight 2 RC0 Available&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-mvvm-ioc-part-4"&gt;&lt;strong&gt;More related document (41)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-4</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-4#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-4</guid><pubDate>Thu, 29 Apr 2010 01:34:52 GMT</pubDate><category>Silverlight</category><category>Io</category><category>Mvvm</category></item><item><title>Silverlight, M-V-VM ... and IoC - part 3</title><description>&lt;p&gt;It’s time to go on with this series, at this point we know the basic principles of MVVM and we have a set of base classes and interfaces we can use. We need to put it in action and see how we can implement the View and the ViewModel and how we can tie them together with an IoC container.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: all the samples I post here directly derive for the ‘test project’ I use for all my Silverlight based workshops and experiments. I have published it on Codeplex and I’m moving to it from my private Subversion...I’ll try to reconstruct the history of the check-ins following the same major step stones I had in my private repository.&lt;/p&gt;  &lt;p&gt;You can find the project at this link: &lt;a href="http://dnmmusicstoresl.codeplex.com/"&gt;http://dnmmusicstoresl.codeplex.com/&lt;/a&gt;. The code presented here refers to the Changeset 41379, this was a direct porting from a Silverlight 3 project (no RIA services, no custom behavior nor commanding engine was used at this stage).&lt;/p&gt;  &lt;p&gt;The scenario: we are building a back-office for a Music Store Shop, they have a list of albums in their store and we want to build a form that allow us to perform simple queries on the data, we give for granted the ‘server-side’ of the whole thing (we have a WCF web service that we can reference and that will expose a SearchAlbum(string) function that will filter the data).&lt;/p&gt;  &lt;p&gt;The goal: build a ViewModel that expose the data and some functions the View can bind to and use, buildup a View that is able to use the ViewModel, then configure our IoC container to be able to resolve the object tree we need to show the form to the user.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;The model&lt;/strong&gt;: at this stage I kept the things simple (no new technologies like RIA services yet): ‘server side’ I have a simple AlbumSummary class that will contain all the information we need to display, ‘client side’ we make a reference to the web service and we use the proxy classes that it will generated for us.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5ea1379a-6e35-4c2a-abf5-fd41e443ecd3" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// class returned by the search it contains some informations about the albums
/// &amp;lt;/summary&amp;gt;
[DataContract]
public class AlbumSummary : DomainObject&amp;lt;int&amp;gt;
{
	[DataMember]
	public virtual string Title { get; set; }
	
	[DataMember]
	public virtual string Author { get; set; }
	
	[DataMember]
	public virtual string Label { get; set; }
	
	[DataMember]
	public virtual string Genre { get; set; }
	
	[DataMember]
	public virtual DateTime PublicationDate { get; set; }

	/// &amp;lt;summary&amp;gt;
	/// will contain the url (if we are in a web environment) or the path (if desktop appplication) of the image
	/// this will be usually computed using the album id 
	/// &amp;lt;/summary&amp;gt;
	[DataMember]
	public virtual string Image { get; set; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;We are now about to face our first architectural issue, when building the View and the ViewModel we need to keep in mind we are going to use them with an IoC container, so we need to care about the dependencies and the creation order of the objects. We have to decide which is the ‘master’ object we are going to resolve, we have two approaches here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resolve a ViewModel&lt;/strong&gt;: you ask for a ViewModel first, it will need a mandatory dependency (constructor injection) to a View otherwise you cannot show anything to the user or you need to rely on external methods to glue the ViewModel to the View you choose to display; the View will have an optional dependency to the ViewModel. &lt;/li&gt;

  &lt;li&gt;&lt;strong&gt;Resolve a View&lt;/strong&gt;: you ask for a View fist, it will need a mandatory dependency to a ViewModel otherwise you have just an empty series of controls you cannot interact with (the behavior is in the ViewModel). The ViewModel will have an optional dependency to the View. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously you cannot have constructor injection for both the View and the ViewModel because of a circular reference issue; so you have to pick one of this two approaches and maybe rely of some extensions of the IoC container to automatically inject the optional references (we’ll see a Castle Windsor facility implementation later).&lt;/p&gt;

&lt;p&gt;In the demo application I chose to follow the second approach because the ViewModel should be able to operate correctly even without a View attached at all (to simply testing even more), plus I just thought it could work better with some experiments I made with the Silverlight Navigation Framework (see my previous post: &lt;a href="http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container" target="_blank"&gt;Silverlight Navigation Framework: resolve the pages using an IoC container&lt;/a&gt;) and it should be a bit easier to configure multiple Views that work with the same ViewModel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The ViewModel&lt;/strong&gt;: I started defining the interface, it must have a collection to hold data and a method that will be used to perform the search (the web service accepts a string and searched through various fields of the Album entity):&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:5da12704-42ac-44ae-9a1e-7af459ebf49a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public interface ISearchViewModel : IViewModel
{
	new ISearchView View { get; }

	/// &amp;lt;summary&amp;gt;
	/// Collection that will be used to expose the result of the search operation
	/// &amp;lt;/summary&amp;gt;
	PagedCollectionView SearchResults { get; set; }

	/// &amp;lt;summary&amp;gt;
	/// performs an asyncronous search throught the webservice and returns the results filling in the SearchResults collection
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;query&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
	void PerformSearch(string query);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;And its implementation:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:84cd7c0a-1e4c-4d46-b8f2-d41383bd9d96" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// glues the interface with the data model, exposes the data that will be used by the view
/// &amp;lt;/summary&amp;gt;
public class SearchViewModel :  ViewModel, ISearchViewModel
{
	public SearchViewModel()
	{
		SearchResults = new PagedCollectionView(_internalSearchResult);
	}

	public new ISearchView View { get { return (this as IViewModel).View as ISearchView; } }

	public ILogger Logger { get; set; }

	/// &amp;lt;summary&amp;gt;
	/// collection that holds the actual data
	/// &amp;lt;/summary&amp;gt;
	private readonly ObservableCollection&amp;lt;AlbumSummary&amp;gt; _internalSearchResult = new ObservableCollection&amp;lt;AlbumSummary&amp;gt;();

	/// &amp;lt;summary&amp;gt;
	/// object that will be used by the binding to expose the collection of data resulting from the search
	/// &amp;lt;/summary&amp;gt;
	public PagedCollectionView SearchResults { get; set; }

	/// &amp;lt;summary&amp;gt;
	/// performs an asyncronous search throught the webservice and returns the results filling in the SearchResults collection
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;query&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
	public void PerformSearch(string query)
	{
		IsBusy = true;
		MusicStoreServiceClient service = ServiceHelper.GetServiceClient(); ;
		service.SearchAlbumsCompleted += (sender, e) =&amp;gt;
		                                 	{
															if (e.Error == null)
															{
																_internalSearchResult.Clear();
																foreach (var result in e.Result)
																	_internalSearchResult.Add(result);
																Logger.Info(&amp;quot;VM - Search Completed&amp;quot;);
																IsBusy = false;
															}
															else
															{
																Logger.ErrorFormat(e.Error, &amp;quot;VM - Error performing search with query: {0}&amp;quot;, query);
																IsBusy = false;
																throw e.Error;
															}
		                                 	};
		Logger.InfoFormat(&amp;quot;VM - Performing search with query: {0}&amp;quot;, query);
		service.SearchAlbumsAsync(query);
	}

}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The View&lt;/strong&gt;: I’ll skip the XAML that simply defines a textbox for the search, two buttons to perform the search operation and to add a new album to the back-office, a grid to display the results together with its pager (you can get this code from the repository), and I’ll show you the code behind file. &lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a63d0ce1-1c7a-4556-95f6-d2c389bfa3a0" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public interface ISearchView : IView
{
	new ISearchViewModel ViewModel { get; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:24a1081d-47a3-4599-8117-6f167fe65870" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public partial class Search : Page, ISearchView
{
    protected Search()
    {
        InitializeComponent();

        Loaded += Search_Loaded;
    }

    public Search(ISearchViewModel viewModel)
        : this()
    {
        (this as IView).ViewModel = viewModel;
    }

    public ILogger Logger { get; set; }

    IViewModel IView.ViewModel { get { return DataContext as IViewModel; } set { DataContext = value; } }

    public ISearchViewModel ViewModel { get { return DataContext as ISearchViewModel; } }

    void Search_Loaded(object sender, RoutedEventArgs e)
    {
        // check if we asked for this search directly
        if (NavigationContext.QueryString.Count &amp;gt; 0)
        {
            object query = NavigationContext.QueryString[&amp;quot;q&amp;quot;];
            if (query != null)
                ViewModel.PerformSearch(query.ToString());
        }
    }

	 // handles the search button click
    private void BtnSearch_Click(object sender, RoutedEventArgs e)
    {
        Logger.Info(&amp;quot;UI - Performing a Search&amp;quot;);

        ViewModel.PerformSearch(TxtSearch.Text);
    }

	 // navigates to the detail window for a single album
    private void ItemClick(object sender, MouseButtonEventArgs e)
    {
        int id = (int)((FrameworkElement)sender).Tag;

        Logger.Info(string.Format(&amp;quot;UI - Opening Album({0})&amp;quot;, id));

        NavigateToAlbum(id);
    }

    private void NavigateToAlbum(int id)
    {
        Logger.Info(string.Format(&amp;quot;UI - Navigating to Album({0})&amp;quot;, id));

        NavigationService.Navigate(new Uri(string.Format(&amp;quot;/Album/{0}&amp;quot;, id), UriKind.Relative));
    }

	 // handles the new album button click
    private void BtnAddNewAlbum_Click(object sender, RoutedEventArgs e)
    {
        Logger.Info(&amp;quot;UI - Creating a New Album&amp;quot;);

        NavigateToAlbum(0);
    }

}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To be able to bind the controls to the properties of the ViewModel we need to set it as the DataContext of the control (this is done in the constructor because the ViewModel property is implemented as a wrapper over the DataContext); you can now bind directly to the properties exposed by the ViewModel.&lt;/p&gt;

&lt;p&gt;I am not using a declarative approach here (that is declaring the ViewModel as a resource in the View’s XAML and bind to that) because I want to be able to inject it into the view using an IoC container.&lt;/p&gt;

&lt;p&gt;This is basically how you were forced to do MVVM in Silverlight 3 without using any custom behavior or commanding framework, you just wired to the events raised by the controls and forwarded the calls to the ViewModel’s functions.&lt;/p&gt;

&lt;p&gt;Right now we have all the pieces of the mosaic and we can configure the IoC container (wrapped by a Service Locator in my example, because I like to test multiple IoC frameworks). Actually the sample uses a porting of Castle Windsor to Silverlight 4 so we’ll use its syntax to configure the bits (feel free to replace it with your favorite IoC system).&lt;/p&gt;

&lt;p&gt;At the application startup we can call a bootstrap function that just configure the container:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:f178450b-5732-4452-880f-51468918edfc" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;private void Bootstrap()
{
    WindsorContainer Container = new WindsorContainer();

    Container.Kernel.AddFacility(&amp;quot;ViewModelInitializationFacility&amp;quot;, new ViewModelInitializationFacility());

    Container.Kernel.AddFacility(&amp;quot;LoggingFacility&amp;quot;,
                                 new LoggingFacility(new LoggerConfig() { Level = LoggerLevel.Debug, AppendersNames = new[] { &amp;quot;DefAppender&amp;quot; } }));
    Container.Register(
        Component.For&amp;lt;IAppender&amp;gt;().ImplementedBy&amp;lt;BrowserConsoleAppender&amp;gt;().Named(&amp;quot;DefAppender&amp;quot;),
        Component.For&amp;lt;IInterceptor&amp;gt;().ImplementedBy&amp;lt;LoggerInterceptor&amp;gt;().Named(&amp;quot;LoggerInterceptor&amp;quot;)
        );

    // Features registration
    Container.Register(
        // application infrastructure and shell configuration
        Component.For&amp;lt;IPageProvider&amp;gt;().ImplementedBy&amp;lt;PageProvider&amp;gt;(),
        Component.For&amp;lt;INavigationContentLoader&amp;gt;().ImplementedBy&amp;lt;IocNavigationContentLoader&amp;gt;(),
        Component.For&amp;lt;MainPage&amp;gt;(), 

        // search Feature
        Component.For&amp;lt;ISearchViewModel&amp;gt;().ImplementedBy&amp;lt;SearchViewModel&amp;gt;().LifeStyle.Custom&amp;lt;Structura.Castle.Windsor.Lifecycle.SingletonLifestyleManager&amp;gt;(), 
        Component.For&amp;lt;ISearchView&amp;gt;().ImplementedBy&amp;lt;Search&amp;gt;().Named(&amp;quot;Search&amp;quot;),

        // album management feature
        Component.For&amp;lt;IAlbumViewModel&amp;gt;().ImplementedBy&amp;lt;AlbumViewModel&amp;gt;().Interceptors(InterceptorReference.ForKey(&amp;quot;LoggerInterceptor&amp;quot;)).Last,
        Component.For&amp;lt;IAlbumView&amp;gt;().ImplementedBy&amp;lt;Album&amp;gt;().Named(&amp;quot;Album&amp;quot;)
        );

    ServiceLocator = new CastleWindsorServiceLocator(Container);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;We first create the container and initialize it with two facilities one for Logging (refer to my two previous posts about Castle WIndsor and logging in Silverlight) and a facility we use to ‘inject’ the optional View dependency into the ViewModel right after the View creation:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:09a810fa-7072-4d90-8832-9e096e6a736c" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class ViewModelInitializationFacility : AbstractFacility
{
	protected override void Init()
	{
		this.Kernel.ComponentCreated += new ComponentInstanceDelegate(Kernel_ComponentCreated);
	}

	void Kernel_ComponentCreated(ComponentModel model, object instance)
	{
		// we configure the ViewModel injecting the optinal dependency to the view
		IView view = instance as IView;
		if (view != null)
		{
			view.ViewModel.View = view;
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The custom Singleton Lifecycle you see up here is a workaround for a Castle.Windsor bug (see &lt;a href="http://support.castleproject.org/projects/IOC/issues/view/IOC-ISSUE-192"&gt;http://support.castleproject.org/projects/IOC/issues/view/IOC-ISSUE-192&lt;/a&gt;) and it will be removed once fixed.&lt;/p&gt;

&lt;p&gt;Now to have a fully configured and usable View object we can just ask the Container to resolve the object by name or by its type.&lt;/p&gt;

&lt;p&gt;What we obtained: the view and the ViewModel are fully decoupled and they talk only using interfaces, which means we can swap any of them for testing purpose or just because we have a better implementation or maybe due to branding or skinning requirements; everything is hold inside the container which becomes a central piece in your application architecture (because it’s also responsible for the objects lifecycle).&lt;/p&gt;

&lt;p&gt;We are however far from a ‘pure’ implementation of the pattern, we have a lot of code-behind in the View, while the pattern requires (if possible) a fully declarative approach; the next step will show you how you can move to a ‘better’ implementation using the new Silverlight 4 default commanding infrastructure (we’ll also see some nice things you can do using AOP).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The full source code is available on &lt;a href="http://dnmmusicstoresl.codeplex.com/" target="_blank"&gt;CodePlex&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1"&gt;Silverlight, M-V-VM ... and IoC - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-4"&gt;Silverlight, M-V-VM ... and IoC - part 4&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans"&gt;Silverlight, Pluggable Architectures, Composite Applications and future plans…&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container"&gt;Silverlight Navigation Framework: resolve the pages using an IoC container&lt;/a&gt; (04/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-mvvm-ioc-part-3"&gt;&lt;strong&gt;More related document (43)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3</guid><pubDate>Mon, 26 Apr 2010 22:05:11 GMT</pubDate><category>Silverlight</category><category>Mvvm</category><category>Ioc</category></item><item><title>Castle Windsor – Silverlight 4 binaries</title><description>&lt;p&gt;Working on solutions based on IoC systems and for our recent &lt;a href="http://www.dotnetmarche.org" target="_blank"&gt;DotNetMarche&lt;/a&gt; workshop, in which we shown how you can architect a solution based on these systems and some advantages you can have using AOP techniques, I wanted to update the actual Castle Windsor binaries I use in my Silverlight solutions.&lt;/p&gt;  &lt;p&gt;The version I used in the past was tied to Silverlight 3, but with Silverlight 4 going RTM I thought that an update was needed; given also the tremendous job the guys that maintain and develop the solution are doing to add new features, improve performances and narrow down the number of assemblies the core solution have.&lt;/p&gt;  &lt;p&gt;I downloaded the solution and tried to compile it for Silverlight 4, unfortunately during the moving from Subversion to Git and during the solution refactoring some things were left behind/stopped working (the refactoring is still in progress) and the project compiles well for .net 3.5 but not for Silverlight: the relative solutions got removed from the project.&lt;/p&gt;  &lt;p&gt;So I’ve then decided to checkout the actual trunk code, and brutally rebuild the solution files using Visual Studio 2010 and recompile them by myself, it wasn’t that hard after the refactoring they made. Exchanging a couple of mails with &lt;a href="http://kozmic.pl"&gt;Krzysztof Koźmic&lt;/a&gt; on the topic, he suggested me to create a fork on Github and also informed me that &lt;a href="http://github.com/JulianBirch"&gt;Julian Birch&lt;/a&gt; was working on a solution to convert and adapt the project to enable Silverlight compilation (however Julian is currently working only on Castle.Core, while I also needed Windsor for the IoC container).&lt;/p&gt;  &lt;p&gt;After fighting against Git a bit to make it work on my machine, I was able to have it up and running and commit the files to my forks, here are some links for you:&lt;/p&gt;  &lt;p&gt;Castle Windsor: &lt;a href="http://github.com/castleproject"&gt;http://github.com/castleproject&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;My forks: &lt;a href="http://github.com/AGiorgetti"&gt;http://github.com/AGiorgetti&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The compiled binaries:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:20cd278e-a81b-4f0b-b1cc-7b110236795e" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/CastleWindsorBinaries_4.zip" target="_self"&gt;CastleWindsorBinaries.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;  &lt;p&gt;Note: actually I’ve got no unit tests that runs on the Silverlight solution, I took those binaries and used them in my current projects without any issue (but I’m not using any of the more advanced Castle Windsor capabilities, just normal plain IoC/DI and AOP through interceptors). Julian’s solution have a version of NUnit (the unit test framewrok used in Castle) that works with Silverlight, when I’ve time I’ll look into it or maybe I’ll see how hard is to port the tests into the standard Silverlight test framework.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-logging-framework-properly"&gt;Silverlight / Castle – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/castle-windsor-silverlight-4-binaries"&gt;&lt;strong&gt;More related document (46)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries</guid><pubDate>Mon, 19 Apr 2010 15:11:05 GMT</pubDate><category>Silverlight</category><category>Castle windsor</category></item><item><title>Silverlight, M-V-VM … and IoC – part 2</title><description>&lt;p&gt;In the previous post I’ve presented a very fast introduction of what MVVM is and I’ve defined the two basic interfaces for the view and the viewmodel; I’m not going to implement a ‘pure’ version of the pattern itself because I consider a pattern just a guideline solution to a problem, not something that have to lock me in a cage.&lt;/p&gt;  &lt;p&gt;It’s now time to write some infrastructural code that will work together with the two afore mentioned interfaces, we’ve already said that the ViewModel should expose bindable properties that the View will use to display the data.&lt;/p&gt;  &lt;p&gt;To obtain that you can use (or combine) two techniques: derive a basic class for your ViewModel from the DependencyObject class and use the dependency and attached property that the framework already provide, or you can choose a more lightweight approach and implement the INotifyPropertyChanged interface in your base class.&lt;/p&gt;  &lt;p&gt;Also remember you will have to deal with asynchronous operations too, so maybe the data on your bindable properties can be updated in a background thread (and changing a bound property from there can result in an AccessViolationException…because you cannot alter anything that involves the UI or the control status from there: WPF and Silverlight objects belong to the thread on which they are created and cannot be accessed by any other thread directly).&lt;/p&gt;  &lt;p&gt;To keep things simple in my current implementation I’ve followed the second approach, so my infrastructure code base when dealing with the MVVM pattern and asynchronous operations looks like this:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/guardian/MVVM_Scheme2_2.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="MVVM_Scheme2" border="0" alt="MVVM_Scheme2" src="http://www.primordialcode.com/UserFiles/guardian/MVVM_Scheme2_thumb.jpg" width="596" height="263" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Let’s take a look at the classes and their purposes:&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt;: the base class of the whole infrastructure, it can be used to derive Domain Model/DTO and ViewModel classes, it just implement the IDisposable and the INotifyPropertyChanged interfaces to enable the derived class for effective data binding. To allow you to change the bound properties even in background threads internally it uses the UiDispatcher utility class.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:f8ceb071-459d-4aa5-a940-ef5d73d47111" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// base class for Domain Model, DTO and ViewModel classes
/// &amp;lt;/summary&amp;gt;
public class Model : INotifyPropertyChanged, IDisposable
{
	/// &amp;lt;summary&amp;gt;
	/// a dictionary to cache property changed event args generated for each property
	/// &amp;lt;/summary&amp;gt;
	private static readonly Dictionary&amp;lt;string, PropertyChangedEventArgs&amp;gt; _eventArgsMap =
		 new Dictionary&amp;lt;string, PropertyChangedEventArgs&amp;gt;();

	/// &amp;lt;summary&amp;gt;
	/// function to assign the value of a property to an internal member
	/// and to raid the corresponding property chanhed event
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;Type of the property to set&amp;lt;/typeparam&amp;gt;
	/// &amp;lt;param name=&amp;quot;field&amp;quot;&amp;gt;internal variable that holds the value&amp;lt;/param&amp;gt;
	/// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;new value to set&amp;lt;/param&amp;gt;
	/// &amp;lt;param name=&amp;quot;propName&amp;quot;&amp;gt;name of the property&amp;lt;/param&amp;gt;
	protected void InnerSet&amp;lt;T&amp;gt;(ref T field, T value, string propName)
	{
		if ((field == null) &amp;amp;&amp;amp; (value == null)) return;
		if ((field != null) &amp;amp;&amp;amp; (field.Equals(value))) return;
		field = value;
		RaisePropertyChanged(propName);
	}

	protected void InnerSet&amp;lt;T&amp;gt;(ref T field, T value, params string[] propsName)
	{
		if ((field == null) &amp;amp;&amp;amp; (value == null)) return;
		if ((field != null) &amp;amp;&amp;amp; (field.Equals(value))) return;
		field = value;
		RaisePropertyChanged(propsName);
	}

	/// &amp;lt;summary&amp;gt;
	/// Get a PropertyChangedEventArgs instance fromt he dictionary or
	/// create a new one if not present
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;propertyName&amp;quot;&amp;gt;name of the property&amp;lt;/param&amp;gt;
	/// &amp;lt;returns&amp;gt;Instance of the class&amp;lt;/returns&amp;gt;
	private static PropertyChangedEventArgs GetEventArgs(string propertyName)
	{
		PropertyChangedEventArgs pe;
		if (_eventArgsMap.TryGetValue(propertyName, out pe) == false)
		{
			pe = new PropertyChangedEventArgs(propertyName);
			_eventArgsMap[propertyName] = pe;
		}
		return pe;
	}

	/// &amp;lt;summary&amp;gt;
	/// Raises a change notification event to signal a change in the
	/// specified property's value.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;propertyName&amp;quot;&amp;gt;The property that has changed.&amp;lt;/param&amp;gt;
	protected void RaisePropertyChanged(string propertyName)
	{
		if (String.IsNullOrEmpty(propertyName))
			throw new ArgumentNullException(&amp;quot;propertyName&amp;quot;);
		if (PropertyChanged == null) return;
		if (SynchronizationContext.Current != null)
			SynchronizationContext.Current.Post(delegate { OnPropertyChanged(propertyName); }, null);
		else
			UiDispatcher.Run(() =&amp;gt; OnPropertyChanged(propertyName));
	}

	/// &amp;lt;summary&amp;gt;
	/// Raises a change notification event to signal a change in the
	/// specified properties.
	/// &amp;lt;/summary&amp;gt;
	/// &amp;lt;param name=&amp;quot;propertyNames&amp;quot;&amp;gt;The properties that have changed.&amp;lt;/param&amp;gt;
	protected void RaisePropertyChanged(params string[] propertyNames)
	{
		if ((propertyNames == null) || (propertyNames.Length == 0))
			throw new ArgumentNullException(&amp;quot;propertyNames&amp;quot;);

		if (SynchronizationContext.Current != null)
			SynchronizationContext.Current.Post(state =&amp;gt;
			{
				OnPropertiesChanged(propertyNames);
			}, null);
		else
			UiDispatcher.Run(() =&amp;gt;
			{
				OnPropertiesChanged(propertyNames);
			});
	}

	#region Implementation of INotifyPropertyChanged

	/// &amp;lt;summary&amp;gt;
	/// lets make it virtual to be used with ORMs proxies
	/// &amp;lt;/summary&amp;gt;
	public virtual event PropertyChangedEventHandler PropertyChanged;

	protected void OnPropertyChanged(string propertyName)
	{
		if (PropertyChanged != null)
			PropertyChanged(this, GetEventArgs(propertyName));
	}

	private void OnPropertiesChanged(string[] propertyNames)
	{
		foreach (string propertyName in propertyNames)
			OnPropertyChanged(propertyName);
	}

	#endregion

	#region IDisposable Members

	public void Dispose()
	{
		Dispose(true);
		GC.SuppressFinalize(this);
	}

	protected virtual void Dispose(bool disposing)
	{
		if (mDisposed) return;
		mDisposed = true;
		if (disposing)
		{
			// TODO: free other state (managed objects).
		}
		// TODO: free your own state (unmanaged objects).
		// TODO: set large fields to null.
	}
	private Boolean mDisposed = false;

	#endregion

}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ViewModel&lt;/strong&gt;: directly inherits from Model class and implement the IViewModel interface we saw last time, all our view-model classes will derive from this one.&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:64c2692b-ea9c-44ff-acf8-b29241aa5234" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class ViewModel : Model, IViewModel
{
	public IView View { get; set; }

	public bool IsBusy
	{
		get { return _isBusy; }
		protected set { InnerSet(ref _isBusy, value, &amp;quot;IsBusy&amp;quot;); }
	}
	private bool _isBusy;
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;UiDispatcher&lt;/strong&gt;: A static class that holds a reference to an IDispatcher object, this is basically just a wrapper around the System.Windows.Threading.Dispatcher object that is associated with the UI thread. I actually have just two implementation of this class: InvokeDispatcher that just execute the delegate passed in to the Run() methods and WIndowsDispatcher that executes the delegate through the dispatcher to allow you to alter the UI in the correct thread avoiding the AccessViolationException.&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:9bc2536a-61b6-4c9a-84fd-04909056f239" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// interface for a generic dispatcher
/// &amp;lt;/summary&amp;gt;
public interface IDispatcher
{
  Dispatcher Dispatcher { get; }

  void Run(Action a);

  void Run(Delegate d, params object[] args);
}

public static class UiDispatcher
{
	public static void SetDispatcher(IDispatcher dispatcher)
	{
		Dispatcher = dispatcher;
	}

	private static IDispatcher Dispatcher = new InvokeDispatcher();

	public static void Run(Action a)
	{
		Dispatcher.Run(a);
	}

	public static void Run(Delegate d, params object[] args)
	{
		Dispatcher.Run(d, args);
	}
}

/// &amp;lt;summary&amp;gt;
/// used on the UI projects to let the UI binding works when the properties are
/// changed by background threads.
/// &amp;lt;/summary&amp;gt;
public class WindowsDispatcher : IDispatcher
{
	public WindowsDispatcher(Dispatcher dispatcher)
	{
		Dispatcher = dispatcher;
	}

	public Dispatcher Dispatcher { get; private set; }

	public void Run(Action a)
	{
		Dispatcher.BeginInvoke(a);
	}

	public void Run(Delegate d, params object[] args)
	{
		Dispatcher.BeginInvoke(d, args);
	}
}

/// &amp;lt;summary&amp;gt;
/// used on the test classes
/// &amp;lt;/summary&amp;gt;
public class InvokeDispatcher : IDispatcher
{
	public Dispatcher Dispatcher
	{
		get { return null; }
	}

	public void Run(Action a)
	{
		a.Invoke();
	}

	public void Run(Delegate d, params object[] args)
	{
		d.DynamicInvoke(args);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The UiDispatcher class will use the InvokeDIspatcher as his default choice (mainly because when doing Unit Tests you usually do not have a UI nor a dispatcher), to change the behavior you need to configure it right after the creation of the Application shell, with something like this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:b176fe7b-4fd1-4cff-a6af-c488aef8f22b" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;// set the dispatcher
MainPage p = ServiceLocator.Resolve&amp;lt;MainPage&amp;gt;();
UiDispatcher.SetDispatcher(new WindowsDispatcher(p.Dispatcher));&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;As an alternative to use the Dispatcher object directly we could have saved the DispatcherSynchronizationContext that is associated with the UI thread and use that to make the calls.&lt;/p&gt;

&lt;p&gt;It’s starting to have a shape isn’t it ?! By the way, the techniques presented here as you can imagine works in both Silverlight and WPF.&lt;/p&gt;

&lt;p&gt;Continue…&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1"&gt;Silverlight, M-V-VM ... and IoC - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3"&gt;Silverlight, M-V-VM ... and IoC - part 3&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-4"&gt;Silverlight, M-V-VM ... and IoC - part 4&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/structura-alpha-version-silverlightwpf-line-business-application-framework"&gt;Structura (Alpha version) a Silverlight/WPF Line of Business Application Framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans"&gt;Silverlight, Pluggable Architectures, Composite Applications and future plans…&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-mvvm-ioc-part-2"&gt;&lt;strong&gt;More related document (53)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2</link><author>guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2</guid><pubDate>Wed, 14 Apr 2010 19:04:00 GMT</pubDate><category>Silverlight</category><category>Wpf</category><category>Ioc</category><category>Mvvm</category></item><item><title>Silverlight, M-V-VM ... and IoC - part 1</title><description>&lt;p&gt;Speaking of my previous post about build and IoC-enabled Silverlight Navigation framework a couple of friends of mine asked me mode details about how I implemented the MVVM pattern for a line of business application.&lt;/p&gt;  &lt;p&gt;Model-View-ViewModel is a very simple pattern and suits very when developing with WPF and (now) Silverlight. In its ‘pure form’ the biggest advantage of this pattern is that you can develop your application engine and your application UI completely decoupled from each others and this makes your core engine completely testable.&lt;/p&gt;  &lt;p&gt;The principle is very simple and you have lot of resources on the web to look for, but the basic idea is this:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/MVVM_Scheme_4.jpg" rel="shadowbox"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="MVVM_Scheme" border="0" alt="MVVM_Scheme" src="http://www.primordialcode.com/UserFiles/Guardian/MVVM_Scheme_thumb_1.jpg" width="401" height="259" /&gt;&lt;/a&gt;The Model describes your application Domain, it’s a series of classes that represent your data and come from a wide range of sources (local data, databases, web services, etc..whatever you like).&lt;/p&gt;  &lt;p&gt;The View is your application front-end, it’s the interactive portion of your application and defines the UX and the look and feel of your work.&lt;/p&gt;  &lt;p&gt;The ViewModel acts like a mediator between the two: here you can shape and tailor the data you want to present to the user and you expose a series of functions the UI can use to interact with the data and the services. In a ‘not pure’ implementation the ViewModel can also drive the UI according to some background processing you can do on the data.&lt;/p&gt;  &lt;p&gt;The interaction between the View and the ViewModel must happen using the less code-behind you can, ideally you should only use that the Framework already offers to you: Databinding and Commanding.&lt;/p&gt;  &lt;p&gt;But we have also another actor to take into account: the IoC container...we plan to use an IoC container if we want to build a very modular application. The container can be whatever you like, there are lots of different implementation around: Unity, Castle Windsor, NInject, Autofac...etc...they differ in some of their advanced features, but they all offer the basic functionalities we need, so you can also ‘hide’ the actual container you use behind a wrapping interface if you need to swap it also.&lt;/p&gt;  &lt;p&gt;Given the previous approach and the intrinsic benefit of the pattern I want to be able to switch some of the Views or some of the ViewModels based on the configuration of the container.&lt;/p&gt;  &lt;p&gt;This is a big advantage in terms of testability and when you aren’t the only one working on the application, for example you can buildup a series of mockups of your ViewModels and configure an application that the UI designer/ UX experts can use to develop the front-end. You can also use this technique to deliver a quick and dirty ‘preview’ of some of the features your application will have.&lt;/p&gt;  &lt;p&gt;For this reason I like to think about the contracts (interfaces) these components will expose first, it also will help me assign a specific role of them, I like to keep things simple (if I can), so I’ve started with something like this:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c2a2104f-7b84-463f-afe8-965a26b225cd" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public interface IView
{
	IViewModel ViewModel { get; set; }
}

public interface IViewModel
{
	IView View { get; set; }

	/// &amp;lt;summary&amp;gt;
	/// a property that states the controller is busy doing something (like fetching data from a service),
	/// usually the iterface should be blocked
	/// &amp;lt;/summary&amp;gt;
	bool IsBusy { get; }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Pretty simple and clear: this code states that a generic ‘View’ component will need a ‘ViewModel’ that will provide some data, and that a ‘ViewModel’ needs a view to make the data it holds available to the ‘outside world’. Also give a note to the IsBusy property...don’t forget we live in an asynchronous world when dealing with Silverlight applications, so we may need a way to inform the UI about the fact it has to wait for something to complete before giving the control back to the user.&lt;/p&gt;

&lt;p&gt;Continue...&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3"&gt;Silverlight, M-V-VM ... and IoC - part 3&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-4"&gt;Silverlight, M-V-VM ... and IoC - part 4&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans"&gt;Silverlight, Pluggable Architectures, Composite Applications and future plans…&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container"&gt;Silverlight Navigation Framework: resolve the pages using an IoC container&lt;/a&gt; (04/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-mvvm-ioc-part-1"&gt;&lt;strong&gt;More related document (43)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1</guid><pubDate>Tue, 13 Apr 2010 15:32:00 GMT</pubDate><category>Silverlight</category><category>Ioc</category><category>Mvvm</category></item><item><title>Silverlight Navigation Framework: resolve the pages using an IoC container</title><description>&lt;p&gt;Silverlight 3 introduced to us a good navigation framework: you could combine Frames and UriMapper objects to change portion of your page (or the entire page) on the fly allowing you to navigate to different section of your application. There are plenty of resources available on the topic, just make a search for them.&lt;/p&gt;  &lt;p&gt;Silverlight 4 further improved the model allowing us to easily customize portion of this framework too: we can for example change the way a new object (page) is loaded into a Frame implementing our own version of the INavigationContentLoader interface and assigning it to the ContentLoader property of the Frame object.&lt;/p&gt;  &lt;p&gt;I won’t hide the fact I’m a big fun of writing ‘modular’ applications, so I tend to separate everything in components and use interfaces contracts for each module, an IoC container works very well in this scenario because you can think of it just like your service provider or an application entry point provider.&lt;/p&gt;  &lt;p&gt;Being able to combine an IoC container with the Navigation Framework and the UriMapper will give us great flexibility, because we can easily swap part of the application just reconfiguring the objects inside the container, making the writing of a modular Silverlight application a - cough cough -breeze.&lt;/p&gt;  &lt;p&gt;What I want to obtain is this:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:541a7dba-6b95-404b-a397-8b96bdb82136" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: true; first-line: 1; tab-size: 3;  toolbar: true; "&gt;&amp;lt;navigation:Frame x:Name=&amp;quot;ContentFrame&amp;quot; 
                  Source=&amp;quot;/Home&amp;quot; 
                  Navigated=&amp;quot;ContentFrame_Navigated&amp;quot; 
                  NavigationFailed=&amp;quot;ContentFrame_NavigationFailed&amp;quot;&amp;gt;
    &amp;lt;navigation:Frame.ContentLoader&amp;gt;
        &amp;lt;helpers:IocNavigationContentLoader /&amp;gt;
    &amp;lt;/navigation:Frame.ContentLoader&amp;gt;
    &amp;lt;navigation:Frame.UriMapper&amp;gt;
        &amp;lt;uriMapper:UriMapper&amp;gt;
            &amp;lt;uriMapper:UriMapping Uri=&amp;quot;&amp;quot; MappedUri=&amp;quot;/Views/Home.xaml&amp;quot;/&amp;gt;
            &amp;lt;uriMapper:UriMapping Uri=&amp;quot;/Search/{query}&amp;quot; MappedUri=&amp;quot;Search?q={query}&amp;quot;/&amp;gt;
            &amp;lt;uriMapper:UriMapping Uri=&amp;quot;/Album/{id}&amp;quot; MappedUri=&amp;quot;Album?id={id}&amp;quot;/&amp;gt;
            &amp;lt;uriMapper:UriMapping Uri=&amp;quot;/Search&amp;quot; MappedUri=&amp;quot;Search&amp;quot;/&amp;gt;
            &amp;lt;uriMapper:UriMapping Uri=&amp;quot;/Album&amp;quot; MappedUri=&amp;quot;Album&amp;quot;/&amp;gt;
            &amp;lt;uriMapper:UriMapping Uri=&amp;quot;/{pageName}&amp;quot; MappedUri=&amp;quot;/Views/{pageName}.xaml&amp;quot;/&amp;gt;
        &amp;lt;/uriMapper:UriMapper&amp;gt;
    &amp;lt;/navigation:Frame.UriMapper&amp;gt;
&amp;lt;/navigation:Frame&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Here we have a mixed mapping: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 10 and 15 set the routes to resolve our Uri to normal xaml pages (they have the default .xaml extension and I want to use the default PageResourceContentLoader here). &lt;/li&gt;

  &lt;li&gt;Lines 11-14 map the Uri to something that the default ContentLoader cannot resolve, so our custom ContentLoader will come in action. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A first rough implementation is easy to do:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:2f302246-f7e1-44c5-8828-7b7a33103e60" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class IocNavigationContentLoader : INavigationContentLoader
{
	private static PageResourceContentLoader DefaultPageContentLoader = new PageResourceContentLoader();

	public IAsyncResult BeginLoad(Uri targetUri, Uri currentUri, AsyncCallback userCallback, object asyncState)
	{
		if (targetUri.ToString().Contains(&amp;quot;.xaml&amp;quot;))
			return DefaultPageContentLoader.BeginLoad(targetUri, currentUri, userCallback, asyncState);

		var iar = new IoCNavigationContentAsyncResult(asyncState);
		//Tries to load type from already loaded assemblies
		iar.Result = App.Container.Resolve(GetComponentName(targetUri));
		userCallback(iar);
		return iar;
	}

	private string GetComponentName(Uri uri)
	{
		return uri.ToString().Split('?')[0];
	}

	public bool CanLoad(Uri targetUri, Uri currentUri)
	{
		if (targetUri.ToString().Contains(&amp;quot;.xaml&amp;quot;))
			return DefaultPageContentLoader.CanLoad(targetUri, currentUri);
		// check if the IoC can resolve the object
		return App.Container.Kernel.HasComponent(GetComponentName(targetUri));
	}

	public void CancelLoad(IAsyncResult asyncResult)
	{
		
	}

	public LoadResult EndLoad(IAsyncResult asyncResult)
	{
		if (asyncResult is IoCNavigationContentAsyncResult)
			return new LoadResult((asyncResult as IoCNavigationContentAsyncResult).Result);

		return DefaultPageContentLoader.EndLoad(asyncResult);
	}
}

public class IoCNavigationContentAsyncResult : IAsyncResult
{
	public IoCNavigationContentAsyncResult(object asyncState)
	{
		this.AsyncState = asyncState;
		this.AsyncWaitHandle = new ManualResetEvent(true);
	}

	public object Result { get; set; }

	public object AsyncState { get; private set; }

	public WaitHandle AsyncWaitHandle { get; private set; }

	public bool CompletedSynchronously
	{
		get { return true; }
	}

	public bool IsCompleted
	{
		get { return true; }
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The component logic is extremely simple: it will hold an instance of the PageResourceContentLoader (line 3) to be used for every Uri that contains the ‘.xaml’ string, all the rest will be asked to the IoC container.&lt;/p&gt;

&lt;p&gt;The core functions are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CanLoad (line 22): we check if it’s a plain xaml page, otherwise we ask the container (Castle Windsor in my case) if the component is registered. &lt;/li&gt;

  &lt;li&gt;BeginLoad (line 5): again...if it’s a plain xaml page, pass the control to the PageResourceContentLoader, otherwise get the service name from the mapped Uri and resolve it using the container. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simple as that and it works! &lt;strong&gt;As a ‘side effect’ now your Pages can have injected dependencies to every service you like (logging, caching, searching, custom application services, etc...) and it all will be handled by the container&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This implementation was just a test, it’s not production code! a lot of improvement can be made, for example: you can take out the static container and use a service factory, add the ability to resolve object that reside on assemblies/xap downloaded on demand (it’s not that hard to do, believe me...again you can use the power of the UriMapper...there’s a very nice post by &lt;a href="http://blogs.ugidotnet.org/corrado/archive/2009/12/30/silverlight-4.0-inavigationcontentloader.aspx" target="_blank"&gt;Corrado Cavalli&lt;/a&gt; on the topic, ok it’s in Italian...but the code explain itself).&lt;/p&gt;

&lt;p&gt;Edit: I just noticed I forgot to post the container configuration for those two pages objects, so here it is:&lt;/p&gt;

&lt;p&gt;
  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:06104e96-783d-4b5c-a243-ea5db499af72" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;Container.Register(
	Component.For&amp;lt;ISearchViewModel&amp;gt;().ImplementedBy&amp;lt;SearchViewModel&amp;gt;(),
	Component.For&amp;lt;ISearchView&amp;gt;().ImplementedBy&amp;lt;Search&amp;gt;().Named(&amp;quot;Search&amp;quot;),
	Component.For&amp;lt;IAlbumViewModel&amp;gt;().ImplementedBy&amp;lt;AlbumViewModel&amp;gt;(),
	Component.For&amp;lt;IAlbumView&amp;gt;().ImplementedBy&amp;lt;Album&amp;gt;().Named(&amp;quot;Album&amp;quot;)
	);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;As you can see each page is implemented following the MVVM pattern and it’s all resolved by the container.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-navigation-framework-resolve-pages-ioc-container"&gt;&lt;strong&gt;More related document (48)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container</guid><pubDate>Thu, 08 Apr 2010 16:18:00 GMT</pubDate><category>Castle windsor</category><category>Ioc</category><category>Navigation</category><category>Silverlight</category></item><item><title>Ready for the 14th DotNetMarche Workshop? IoC, DI, AOP and related techniques = lot of fun for all</title><description>&lt;p&gt;On April 16 in Italy at Castelfidardo (Marche) it will take place the next DotNetMarche workshop, based on the requests and the feedback we had on our previous works, we’ve decided to focus on showing some techniques and ‘best practice’ you can use while developing an application using IoC / DI / AOP.&lt;/p&gt;  &lt;p&gt;we’ll have 4 sessions for an afternoon of fun!&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Stefano Leli - will introduce us to some of the basic concepts of using (and why using) an IoC/DI container to modularize your applications. &lt;/li&gt;    &lt;li&gt;Andrea Balducci - will show us some of the most used libraries (Castle Windsor, Unity,...) and other advanced features these frameworks offer. &lt;/li&gt;    &lt;li&gt;Giorgetti Alessandro (me :D) - will bring everything ‘live’ in a Silverlight 4 application; we’ll talk about the (in)famous service locator pattern and we’ll see some application examples: I took the demo application we’ve developed and used in the past workshops and refactored it to use a modular approach with an MVVM pattern for the UI...everything is configured and resolved through the IoC container. &lt;/li&gt;    &lt;li&gt;Gian Maria Ricci - will introduce some AOP techniques to improve the application and clean-up the design a bit. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;At the end of the workshop we’ll have the usual Q&amp;amp;A session (and the even more usual dinner after :D)...don’t loose your chance to embarrass us!&lt;/p&gt;  &lt;p&gt;For registration and more info head to our community website: &lt;a href="http://www.dotnetmarche.org"&gt;www.dotnetmarche.org&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET&lt;/a&gt; (03/09/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/ready-the14th-dotnetmarche-workshop-ioc-di-aop-related-techniques-lot-fun"&gt;&lt;strong&gt;More related document (15)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/ready-the14th-dotnetmarche-workshop-ioc-di-aop-related-techniques-lot-fun</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/ready-the14th-dotnetmarche-workshop-ioc-di-aop-related-techniques-lot-fun#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/ready-the14th-dotnetmarche-workshop-ioc-di-aop-related-techniques-lot-fun</guid><pubDate>Wed, 07 Apr 2010 16:18:00 GMT</pubDate><category>Dotnetmarche</category><category>Workshop</category><category>Ioc</category><category>Aop</category></item><item><title>NHibernate: a custom (parametric) UserType to truncate strings</title><description>&lt;p&gt;Developing Dexter I encountered again a usual usual error you have to deal with NHibernate and strings: we tried to persist en entity whose string field exceeded the limit imposed by the database table; Nhibernate rightfully complained with: &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;System.Data.SqlClient.SqlException: String or binary data would be truncated. The statement has been terminated.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Given the fact that having partial data for these fields was acceptable we decided to truncate the value itself. Instead of using the usual solution - that is: take care of this in the entity class or somewhere else during the validation - I decided to build some custom UserType and let NHibernate take care of the truncation if needed (this way we do not have to change anything in the logic of the application).&lt;/p&gt;  &lt;p&gt;Why this approach ? well digging into NHibernate code you can see that it uses a lot of structures very similar to a UserType to actually take care of the interaction between the mapped properties and the database (look at the NHibernate.Type namespace in the source code or with Reflector), adding another one isn’t a big issue so I decided to follow their approach and inherited directly from AbstractStringType:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4c358668-eb31-4868-ab39-93d84b42a513" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public abstract class AbstractTruncatedStringType : AbstractStringType
{
	internal AbstractTruncatedStringType()
		: base(new StringSqlType())
	{
	}

	internal AbstractTruncatedStringType(StringSqlType sqlType)
		: base(sqlType)
	{
	}

	public abstract int Length { get; }

	public override void Set(System.Data.IDbCommand cmd, object value, int index)
	{
		string str = (string)value;
		if (str.Length &amp;gt; Length)
			str = str.Substring(0, Length);
		base.Set(cmd, str, index);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;and then added some specializations:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:70982471-c44d-4e6c-86c2-60328dfdd88d" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class TruncatedString500 : AbstractTruncatedStringType
{
	public override int Length
	{
		get { return 500; }
	}

	public override string Name
	{
		get { return &amp;quot;TruncatedString500&amp;quot;; }
	}
}

public class TruncatedString100 : AbstractTruncatedStringType
{
	public override int Length
	{
		get { return 100; }
	}

	public override string Name
	{
		get { return &amp;quot;TruncatedString100&amp;quot;; }
	}
}

...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;you can use these classes writing your mapping like this:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:988dc3ba-3a93-4695-ac46-2f2690750416" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;...
&amp;lt;class name=&amp;quot;Data&amp;quot; table=&amp;quot;DATA&amp;quot;&amp;gt;
		&amp;lt;id name=&amp;quot;Id&amp;quot; column=&amp;quot;ID&amp;quot; type=&amp;quot;guid&amp;quot; unsaved-value=&amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;&amp;gt;
			&amp;lt;generator class=&amp;quot;guid&amp;quot; /&amp;gt;
		&amp;lt;/id&amp;gt;
		&amp;lt;property name=&amp;quot;Data1&amp;quot; column=&amp;quot;DATA1&amp;quot; type=&amp;quot;string&amp;quot; length=&amp;quot;100&amp;quot; /&amp;gt;
		&amp;lt;property name=&amp;quot;TruncatedString&amp;quot; column=&amp;quot;TruncatedString&amp;quot; length=&amp;quot;10&amp;quot; type=&amp;quot;Structura.NHibernate.UserTypes.TruncatedString10, Structura.NHibernate&amp;quot; /&amp;gt;
		...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Which is good...but not enough for me...you see we need to implement a lot of different versions of this class based on the limit we want to impose to the string, why not make this type parametric then !? We can do it just implementing the IParameterizedType interface.&lt;/p&gt;

&lt;p&gt;The code is quite straightforward to write:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:af291120-a114-4e81-a6d4-29e37b8e6ee1" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class TruncatedString : AbstractTruncatedStringType, IParameterizedType
{
	private const int DefaultLimit = 50;

	public override int Length
	{
		get { return _length; }
	}
	private int _length = DefaultLimit;

	public override string Name
	{
		get { return &amp;quot;TruncatedString&amp;quot;; }
	}

	public void SetParameterValues(System.Collections.Generic.IDictionary&amp;lt;string, string&amp;gt; parameters)
	{
		if (false == int.TryParse(parameters[&amp;quot;length&amp;quot;], out _length))
			_length = DefaultLimit;
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;And this is how you can use it in your mappings:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:1364abb9-919d-49b7-afb0-f98b945564e9" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;...
&amp;lt;property name=&amp;quot;TruncatedString&amp;quot; column=&amp;quot;TruncatedString&amp;quot; length=&amp;quot;10&amp;quot;&amp;gt;
	&amp;lt;type name=&amp;quot;Structura.NHibernate.UserTypes.TruncatedString, Structura.NHibernate&amp;quot;&amp;gt;
		&amp;lt;param name=&amp;quot;length&amp;quot;&amp;gt;10&amp;lt;/param&amp;gt;
	&amp;lt;/type&amp;gt;
&amp;lt;/property&amp;gt;
...&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;Yet not perfect...but it’s an improvement, so you have two choices: implement multiple versions of the abstract class (and keep your mapping cleaner) or use the parameterized version (and have extra flexibility).&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday"&gt;The NHibernate Day is coming...this Saturday!&lt;/a&gt; (10/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhday-event-thoughts"&gt;#nhday - after event thoughts&lt;/a&gt; (10/11/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/hands-conform-mixed-mapping-techniques"&gt;Hands on ConfORM: mixed mapping techniques&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-custom-parametric-usertype-truncate-strings"&gt;&lt;strong&gt;More related document (20)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-custom-parametric-usertype-truncate-strings</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-custom-parametric-usertype-truncate-strings#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-custom-parametric-usertype-truncate-strings</guid><pubDate>Fri, 26 Mar 2010 16:01:00 GMT</pubDate><category>Nhibernate</category><category>UserType</category><category>Truncate</category><category>String</category></item><item><title>Silverlight / Castle Windsor – how to use a logging framework properly</title><description>&lt;p&gt;
	In my last post I shown you how to build a simple logging framework for Silverlight applications and use it with an IoC container through &amp;lsquo;constructor injection&amp;rsquo;, well&amp;hellip;in my opinion I consider that a bad programming practice. In short when using a Dependency Injection library you have two types of DI mechanism:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Constructor Injection: DI through constructor parameters, the DI container try us the constructor that matches best all the modules it knows.&lt;/li&gt;
	&lt;li&gt;
		Property Injection: DI through properties, the DI container try to resolve each property based on the modules it knows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	Usually I use constructor injection for all the modules I consider mandatory and property injection for optional modules. A logging system does not add nor carry any &amp;lsquo;core level&amp;rsquo; feature to the application, it&amp;rsquo;s merely accessorial (even if extremely useful); so a good practice is to not use constructor injection to initialize it, use property injection instead.&lt;/p&gt;
&lt;p&gt;
	Consider something like this:&lt;/p&gt;
&lt;div class="wlWriterSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c40dc745-5eda-4a70-b2e3-4b8d9942152d" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class TestLoggingClass
{
 public TestLoggingClass()
 { }

 public ILogger Logger { get; set; }

 public void Operation()
 {
    Logger.Info(&amp;quot;Operation started&amp;quot;);
    Logger.Debug(&amp;quot;Operation started&amp;quot;);
 }
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	In this scenario we cannot call something like: Logger.Info()&amp;hellip;because Logger can be null (remember it&amp;rsquo;s optional now);&lt;/p&gt;
&lt;p&gt;
	We have two diffirent solution to this problem:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Register a default NullLogger instance that actually does nothing.&lt;/li&gt;
	&lt;li&gt;
		Another simple solution is the to write down some extension methods that checks for Logger nullability before actually making the call, each method will be just a wrapper around your framework call:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wlWriterSmartContent" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:3e90722d-5ce2-4334-9eaa-e92d14bd2b94" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
	&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public static class LoggingExtensions
{
  #region Debug

  public static void SafeDebug(this ILogger logger, string message)
  {
     if (logger != null)
        logger.Debug(message);
  }

  public static void SafeDebug(this ILogger logger, string message, Exception exception)
  {
     if (logger != null)
        logger.Debug(message, exception);
  }

  public static void SafeDebug(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.Debug(format, args);
  }

  public static void SafeDebugFormat(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.DebugFormat(format, args);
  }

  public static void SafeDebugFormat(this ILogger logger, Exception exception, string format, params object[] args)
  {
     if (logger != null)
        logger.DebugFormat(exception, format, args);
  }

  public static void SafeDebugFormat(this ILogger logger, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.DebugFormat(formatProvider, format, args);
  }

  public static void SafeDebugFormat(this ILogger logger, Exception exception, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.DebugFormat(exception, formatProvider, format, args);
  }

  #endregion

  #region Error

  public static void SafeError(this ILogger logger, string message)
  {
     if (logger != null)
        logger.Error(message);
  }

  public static void SafeError(this ILogger logger, string message, Exception exception)
  {
     if (logger != null)
        logger.Error(message, exception);
  }

  public static void SafeError(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.Error(format, args);
  }

  public static void SafeErrorFormat(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.ErrorFormat(format, args);
  }

  public static void SafeErrorFormat(this ILogger logger, Exception exception, string format, params object[] args)
  {
     if (logger != null)
        logger.ErrorFormat(exception, format, args);
  }

  public static void SafeErrorFormat(this ILogger logger, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.ErrorFormat(formatProvider, format, args);
  }

  public static void SafeErrorFormat(this ILogger logger, Exception exception, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.ErrorFormat(exception, formatProvider, format, args);
  }

  #endregion

  #region Fatal

  public static void SafeFatal(this ILogger logger, string message)
  {
     if (logger != null)
        logger.Fatal(message);
  }

  public static void SafeFatal(this ILogger logger, string message, Exception exception)
  {
     if (logger != null)
        logger.Fatal(message, exception);
  }

  public static void SafeFatal(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.Fatal(format, args);
  }

  public static void SafeFatalFormat(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.FatalFormat(format, args);
  }

  public static void SafeFatalFormat(this ILogger logger, Exception exception, string format, params object[] args)
  {
     if (logger != null)
        logger.FatalFormat(exception, format, args);
  }

  public static void SafeFatalFormat(this ILogger logger, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.FatalFormat(formatProvider, format, args);
  }

  public static void SafeFatalFormat(this ILogger logger, Exception exception, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.FatalFormat(exception, formatProvider, format, args);
  }

  #endregion

  #region Info

  public static void SafeInfo(this ILogger logger, string message)
  {
     if (logger != null)
        logger.Info(message);
  }

  public static void SafeInfo(this ILogger logger, string message, Exception exception)
  {
     if (logger != null)
        logger.Info(message, exception);
  }

  public static void SafeInfo(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.Info(format, args);
  }

  public static void SafeInfoFormat(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.InfoFormat(format, args);
  }

  public static void SafeInfoFormat(this ILogger logger, Exception exception, string format, params object[] args)
  {
     if (logger != null)
        logger.InfoFormat(exception, format, args);
  }

  public static void SafeInfoFormat(this ILogger logger, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.InfoFormat(formatProvider, format, args);
  }

  public static void SafeInfoFormat(this ILogger logger, Exception exception, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.InfoFormat(exception, formatProvider, format, args);
  }

  #endregion

  #region Warn

  public static void SafeWarn(this ILogger logger, string message)
  {
     if (logger != null)
        logger.Warn(message);
  }

  public static void SafeWarn(this ILogger logger, string message, Exception exception)
  {
     if (logger != null)
        logger.Warn(message, exception);
  }

  public static void SafeWarn(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.Warn(format, args);
  }

  public static void SafeWarnFormat(this ILogger logger, string format, params object[] args)
  {
     if (logger != null)
        logger.WarnFormat(format, args);
  }

  public static void SafeWarnFormat(this ILogger logger, Exception exception, string format, params object[] args)
  {
     if (logger != null)
        logger.WarnFormat(exception, format, args);
  }

  public static void SafeWarnFormat(this ILogger logger, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.WarnFormat(formatProvider, format, args);
  }

  public static void SafeWarnFormat(this ILogger logger, Exception exception, IFormatProvider formatProvider, string format, params object[] args)
  {
     if (logger != null)
        logger.WarnFormat(exception, formatProvider, format, args);
  }

  #endregion
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;p&gt;
	This way we can have our optional logging component with an &amp;lsquo;elegant&amp;rsquo; calling syntax (and we don&amp;rsquo;t pollute all our code with all those nullability checks).&lt;/p&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-logging-framework-properly"&gt;Silverlight / Castle – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-castle-windsor-logging-framework-properly"&gt;&lt;strong&gt;More related document (46)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly</guid><pubDate>Wed, 24 Mar 2010 16:52:00 GMT</pubDate><category>Castle windsor</category><category>Logging</category><category>Silverlight</category></item><item><title>Silverlight / Castle Windsor – implementing a simple logging framework</title><description>&lt;p&gt;As your Silverlight projects grow complex you’ll soon start to feel the need to have a solid logging system. In my WPF and Windows Forms project I’m now used to have Castle Windsor + Log4Net as my logging system and I really miss it in my Silverlight applications.&lt;/p&gt;  &lt;p&gt;We don’t have a porting of Log4Net in Silverlight yet, but we do have Castle Windsor now. Given the fact I’ll use it in my production environment I decided to roll my version of a simple logging framework that mimic some of the features that Log4Net have and it’s based on Castle Windsor logging capabilities (at first…then if I’ll have the need to switch my IoC/DI framework I can abstract the whole logging system and write the integration facilities).&lt;/p&gt;  &lt;p&gt;The goal is to have a simple system that can be configured adding and removing component to the Windsor container.&lt;/p&gt;  &lt;p&gt;The logger infrastructure will be like this:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/Logging_2.png" rel="shadowbox"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="Logging" border="0" alt="Logging" src="http://www.primordialcode.com/UserFiles/Guardian/Logging_thumb.png" width="504" height="383" /&gt;&lt;/a&gt;The Logger class derives directly from Castle’s LevelFilteredLogger (which implement the default ILogger interface). The logger also has a collection of appenders, each IAppender object simply exposes a simple Log() function which will accept some parameters and perform the logging operation.&lt;/p&gt;  &lt;p&gt;A simple implementation of the IAppender interface is given by the BrowserConsoleAppender class: this class will log the actions to the IE Developer’s Toolbar console script window, or to the Firebug console window.&lt;/p&gt;  &lt;p&gt;To simply the logging configuration I’ve added a LoggingFacility class that is able to configure a default application logger or can provide a simple way to configure multiple loggers and appenders if you need a fine grained configuration.&lt;/p&gt;  &lt;p&gt;Let’s start simple: in this first version we’ll reuse interfaces and members directly from the Castle namespaces. The IAppender interface will be like this:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:ea056783-612a-4825-8970-cc16fba5253a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;/// &amp;lt;summary&amp;gt;
/// interface for our custom appenders
/// &amp;lt;/summary&amp;gt;
public interface IAppender
{
	void Log(LoggerLevel loggerLevel, string loggerName, string message, Exception exception);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The BrowserConsoleAppender is quite simple too, with the actual code that logs to the browser’s console stolen from some articles around the web :D:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:377521f2-1f12-40a0-9363-ed1221e5efdb" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class BrowserConsoleAppender : IAppender
{
	public void Log(global::Castle.Core.Logging.LoggerLevel loggerLevel, string loggerName, string message, Exception exception)
	{
		HtmlWindow window = HtmlPage.Window;
		//only log is a console is available (IE and FF)
		var isConsoleAvailable = (bool)window.Eval(&amp;quot;typeof(console) != 'undefined' &amp;amp;&amp;amp; typeof(console.log) != 'undefined'&amp;quot;);
		if (isConsoleAvailable)
		{
			var console = (window.Eval(&amp;quot;console.log&amp;quot;) as ScriptObject);
			if (console != null)
			{
				DateTime dateTime = DateTime.Now;
				string output;
				if (exception == null)
					output = string.Format(&amp;quot;{0} [{1}] '{2}' {3}&amp;quot;, dateTime.ToString(&amp;quot;u&amp;quot;), loggerLevel, loggerName, message).SanitizeForBrowser();
				else
					output = string.Format(&amp;quot;{0} [{1}] '{2}' {3}:\n{4}\n{5}&amp;quot;, dateTime.ToString(&amp;quot;u&amp;quot;), loggerLevel, loggerName, exception.GetType().FullName,
					                       exception.Message, exception.StackTrace).SanitizeForBrowser();

				console.InvokeSelf(output);
			}
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The Logger implementation is simple too: &lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:8f0f7524-559d-4049-9d47-a1402925334c" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class Logger : LevelFilteredLogger
{
	public Logger()
	{
	}

	public Logger(string name)
		: base(name)
	{
	}

	public Logger(LoggerLevel loggerLevel)
		: base(loggerLevel)
	{
	}

	public Logger(string loggerName, LoggerLevel loggerLevel)
		: base(loggerName, loggerLevel)
	{
	}

	public Logger(LoggerLevel loggerLevel, IList&amp;lt;IAppender&amp;gt; appenders)
		: base(loggerLevel)
	{
		_appenders = appenders;
	}

	public Logger(string loggerName, LoggerLevel loggerLevel, IList&amp;lt;IAppender&amp;gt; appenders)
		: base(loggerName, loggerLevel)
	{
		_appenders = appenders;
	}

	public override ILogger CreateChildLogger(string loggerName)
	{
		if (loggerName == null)
			throw new ArgumentNullException(&amp;quot;loggerName&amp;quot;, &amp;quot;To create a child logger you must supply a non null name&amp;quot;);

		return new Logger(String.Format(CultureInfo.CurrentCulture, &amp;quot;{0}.{1}&amp;quot;, Name, loggerName), Level, Appenders);
	}

	private readonly IList&amp;lt;IAppender&amp;gt; _appenders = new List&amp;lt;IAppender&amp;gt; { new BrowserConsoleAppender() };
	public IList&amp;lt;IAppender&amp;gt; Appenders
	{
		get { return _appenders; }
	}

	protected override void Log(LoggerLevel loggerLevel, string loggerName, string message, Exception exception)
	{
		foreach (var appender in Appenders)
			appender.Log(loggerLevel, loggerName, message, exception);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It directly derives from the basic Castle implementation which will give us some logging methods for free (we just have to override the Log() function); we have a bunch of constructors that allows you to configure the logger, the most complete one will accept a threshold level, a logger name and an array of appenders.&lt;/p&gt;

&lt;p&gt;Basically this is all that you need to log something in Silverlight; to use this logging framework with Castle you can configure it like this:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:a4ff6c10-82e4-44d5-a8b0-026a64754683" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;Container = new WindsorContainer();
Container.Register(
// register one or more appenders
Component.For&amp;lt;IAppender&amp;gt;().ImplementedBy&amp;lt;BrowserConsoleAppender&amp;gt;().Named(&amp;quot;Default&amp;quot;),
// register and configure the loggers
Component.For&amp;lt;ILogger&amp;gt;().ImplementedBy&amp;lt;Logger&amp;gt;().DynamicParameters((k, d) =&amp;gt;
			                   	{
			                   		d[&amp;quot;loggerLevel&amp;quot;] = LoggerLevel.Debug;
			                   		IAppender[] appenders = k.ResolveAll&amp;lt;IAppender&amp;gt;();
			                   	})
);&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;And then use it with normal resolution or dependency injection.&lt;/p&gt;

&lt;p&gt;To simply the configuration stage I built up a LoggingFacility that if used without any parameter will configure a single unnamed Logger with the default console appender (if you register more appenders they will be automatically used the first time you resolve the Logger service); alternatively you can pre-configure the Logger services you want to have passing an array of LoggerConfig objects to the facility.&lt;/p&gt;

&lt;p&gt;Here’s the implementation code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:77e7d7ba-30c0-4951-bd58-8b7fbdeec06a" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public class LoggingFacility : AbstractFacility
{
	public LoggingFacility()
	{ }

	public LoggingFacility(LoggerConfig config)
	{
		_configuredLoggers = new[] { config };
	}

	public LoggingFacility(LoggerConfig[] configs)
	{
		_configuredLoggers = configs;
	}

	private const LoggerLevel DefaultLoggerLevel = LoggerLevel.Warn;
	private readonly LoggerConfig[] _configuredLoggers;

	protected override void Init()
	{
		// if we do not have any explicit configuration, we register a default logger
		if ((_configuredLoggers == null) || (_configuredLoggers.Length == 0))
			Kernel.Register(
				Component.For&amp;lt;ILogger&amp;gt;().ImplementedBy&amp;lt;Logger&amp;gt;()
					.DynamicParameters((k, d) =&amp;gt;
					                   	{
					                   		d[&amp;quot;loggerLevel&amp;quot;] = DefaultLoggerLevel;
					                   		IAppender[] appenders = k.ResolveAll&amp;lt;IAppender&amp;gt;();
					                   		// if we do not have registered any appender we provide a default console one
					                   		if (appenders.Length == 0)
					                   			appenders = new IAppender[] { new BrowserConsoleAppender() };
					                   		d[&amp;quot;appenders&amp;quot;] = appenders;
					                   	})
				);
		else
		{
			// we need to register more than one logger
			foreach (var loggerConfig in _configuredLoggers)
			{
				LoggerConfig config = loggerConfig;
				Kernel.Register(Component.For&amp;lt;ILogger&amp;gt;()
				                	.ImplementedBy&amp;lt;Logger&amp;gt;()
				                	.DynamicParameters((k, d) =&amp;gt;
				                	                   	{
				                	                   		if (!string.IsNullOrEmpty(config.Name))
				                	                   			d[&amp;quot;loggerName&amp;quot;] = config.Name;
				                	                   		d[&amp;quot;loggerLevel&amp;quot;] = config.Level;
				                	                   		IAppender[] appenders = null;
				                	                   		/* if we have appenders defined..resolve them */
				                	                   		if ((config.AppendersNames != null) &amp;amp;&amp;amp; (config.AppendersNames.Length &amp;gt; 0))
				                	                   		{
				                	                   			List&amp;lt;IAppender&amp;gt; aps = new List&amp;lt;IAppender&amp;gt;();
				                	                   			for (int i = 0; i &amp;lt; config.AppendersNames.Length; i++)
				                	                   				aps.Add(k.Resolve&amp;lt;IAppender&amp;gt;(config.AppendersNames[i]));
				                	                   			appenders = aps.ToArray();
				                	                   		}
				                	                   		/* if not..resolve all the available */
				                	                   		if ((appenders == null) || (appenders.Length == 0))
				                	                   			appenders = k.ResolveAll&amp;lt;IAppender&amp;gt;();
				                	                   		/* if we do not have registered any appender we provide a default console one */
				                	                   		if (appenders.Length == 0)
				                	                   			appenders = new IAppender[] { new BrowserConsoleAppender() };
				                	                   		d[&amp;quot;appenders&amp;quot;] = appenders;
				                	                   	}));
			}
		}
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;To use the facility:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:36cbc00e-4c65-45f9-8673-716396cbd629" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;Container = new WindsorContainer();

// simple configuraion: just set the facility (this ocnfigures a default logger)
Container.AddFacility&amp;lt;LoggingFacility&amp;gt;();

// advanced configuration: specify some options for the default logger
Container.Kernel.AddFacility(&amp;quot;LoggingFacility&amp;quot;, new LoggingFacility(new LoggerConfig { Level = LoggerLevel.Debug }));

// also if you specify some more appenders they will be used too
Container.Register(
            // register one or more appenders
            Component.For&amp;lt;IAppender&amp;gt;().ImplementedBy&amp;lt;BrowserConsoleAppender&amp;gt;().Named(&amp;quot;Appender1&amp;quot;),
				Component.For&amp;lt;IAppender&amp;gt;().ImplementedBy&amp;lt;BrowserConsoleAppender&amp;gt;().Named(&amp;quot;Appender2&amp;quot;),
				Component.For&amp;lt;IAppender&amp;gt;().ImplementedBy&amp;lt;BrowserConsoleAppender&amp;gt;().Named(&amp;quot;Appender3&amp;quot;),
				);

&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As usual it started as a short post and became quite long in the end…let’s see an example of usage, in a Silverlight application you can modify a Page to accept a constructor dependency on the logger (this isn’t a good design solution when it comes to logging services…but this is just an operational demo so it’s ok):&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:cd69e8f8-8eac-43d8-9d89-c32fceb32284" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;public partial class MainPage : UserControl
{
	public MainPage(ILogger logger)
	{
		InitializeComponent();
		_logger = logger;

		_logger.Info(&amp;quot;MainPage created&amp;quot;);
	}

	private ILogger _logger;

	private void button1_Click(object sender, RoutedEventArgs e)
	{
		_logger.Info(&amp;quot;Second action taken&amp;quot;);
	}

	private void button2_Click(object sender, RoutedEventArgs e)
	{
		_logger.Info(&amp;quot;First action taken&amp;quot;);
	}
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;You then need to rely on the container to configure the actual instance of the class:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:fd9c457b-eb7c-4ae4-a37c-1c715ea15104" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;// register the type in the container, so we can resolve it
Container.Register(
	Component.For&amp;lt;MainPage&amp;gt;()
	);
	
// later on: ask the container to build an instance of the page
private void Application_Startup(object sender, StartupEventArgs e)
{
	InitContainer();
	Container.Resolve&amp;lt;ILogger&amp;gt;().Info(&amp;quot;Application started&amp;quot;);
	this.RootVisual = Container.Resolve&amp;lt;MainPage&amp;gt;();
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;To see the Logging service in action I created a simple Silverlight project which configures and uses it, the solution is attached at the end of this article, here’s a screenshot of the IE8 Developer Toolbar script console window that shows how the actions are logged.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/SilverlightLogging_2.jpg" rel="shadowbox"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="SilverlightLogging" border="0" alt="SilverlightLogging" src="http://www.primordialcode.com/UserFiles/Guardian/SilverlightLogging_thumb.jpg" width="504" height="394" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can take this code and extends it with any other logging capabilities you like just implementing your own Appender classes, I have one that calls a WCF service and log the exception using Elmah for example; further extension to this system will include XML configuration support for the LoggingFacility and the introduction of Exception and Message formatters.&lt;/p&gt;

&lt;p&gt;Here is the complete solution project:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:bec76393-e04e-4740-80c9-95fb3b07de74" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/SilverlightCastleWindsorLogging.zip" target="_self"&gt;SilverlightCastleWindsorLogging.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-logging-framework-properly"&gt;Silverlight / Castle – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;&lt;strong&gt;More related document (46)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework</guid><pubDate>Mon, 22 Mar 2010 16:42:00 GMT</pubDate><category>Silverlight</category><category>Castle windsor</category><category>Logging</category></item><item><title>Dexter has been updated to Asp.NET MVC2</title><description>&lt;p&gt;
	Due to the recent release of Asp.NET MVC2 we&amp;rsquo;ve decided to port Dexter to the new engine; Ugo spent a couple of days reorganizing the repository and doing the porting (you can read more info on his Italian blog: &lt;a href="http://www.tostring.it" target="_blank"&gt;http://www.tostring.it&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
	We&amp;rsquo;ve just fixed some of the bugs that arose after the porting...one them will require some further investigation and will be the subject for a next post :)&lt;/p&gt;
&lt;p&gt;
	If you&amp;rsquo;re interested in giving a look to the project go to our Codeplex page (&lt;a href="http://dexterblogengine.codeplex.com/"&gt;http://dexterblogengine.codeplex.com/&lt;/a&gt;), I recommend you to perform a fresh checkout to a new directory because many things were relocated.&lt;/p&gt;
&lt;p&gt;
	We&amp;rsquo;ve switched the developing environment to Visual Studio 2010, if you have troubles in installing Asp.NET MVC2 in your developing machine, you can follow the guideline given in this post: &lt;a href="http://weblogs.asp.net/shijuvarghese/archive/2010/03/12/installing-asp-net-mvc-2-rtm-on-visual-studio-2010-rc.aspx" target="_blank"&gt;Installing ASP.NET MVC 2 RTM on Visual Studio 2010 RC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
	To see the new version of Dexter in action you don&amp;rsquo;t have to go too far: this blog (and Ugo&amp;rsquo;s blog too) now runs with the current Trunk version with supports MVC2!&lt;/p&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/working-on-dexter"&gt;Working on Dexter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/dexter-updated-aspnet-mvc2"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/dexter-updated-aspnet-mvc2</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/dexter-updated-aspnet-mvc2#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/dexter-updated-aspnet-mvc2</guid><pubDate>Mon, 15 Mar 2010 22:30:00 GMT</pubDate><category>Asp.net mvc 2</category><category>Dexter</category></item><item><title>Castle NHibernate Integration Facility: how to get the configuration object</title><description>&lt;p&gt;This is a simple tip, I’ve used the Castle Windsor NHibernate Integration Facility to build up the data access services in one of the projects I’m working on, I also wanted to use the NHibernate SchemaExport utilities to build up the database from scratch, this can be very useful when using SQLite in a testing environment.&lt;/p&gt;  &lt;p&gt;Since the facility is configured with XML files, I had the problem on how to access the NHibernate.Cfg.Configuration object; having a look at the source code of the Integration Facility it turns out that the Configuration object are registered in the container too along with the factories (one configuration and one factory for each element declared in the configuration file), an alias name is assigned to each configuration object in the form of: {factory_id}.cfg.&lt;/p&gt;  &lt;p&gt;So if you have the following settings:&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:7cb79d53-bcf7-4827-bfcf-34bdbad513d2" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;&amp;lt;facility id=&amp;quot;nhibernatefacility&amp;quot; isweb=&amp;quot;true&amp;quot;
			 type=&amp;quot;Castle.Facilities.NHibernateIntegration.NHibernateFacility,Castle.Facilities.NHibernateIntegration&amp;quot;&amp;gt;
	&amp;lt;factory id=&amp;quot;MainDatabase&amp;quot; alias=&amp;quot;nh.facility.default&amp;quot;&amp;gt;
		&amp;lt;settings&amp;gt;
			&amp;lt;item key=&amp;quot;connection.provider&amp;quot;&amp;gt;NHibernate.Connection.DriverConnectionProvider&amp;lt;/item&amp;gt;
			...
		&amp;lt;/settings&amp;gt;
		&amp;lt;assemblies&amp;gt;
			&amp;lt;assembly&amp;gt;YourAssembly&amp;lt;/assembly&amp;gt;
		&amp;lt;/assemblies&amp;gt;
	&amp;lt;/factory&amp;gt;
&amp;lt;/facility&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
You can access and use the configuration objects like this:

&lt;p&gt;&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:4f25c001-e79b-4b5b-b002-71810d97d079" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;[Test, Explicit]
public void CreateDatabaseSchema()
{
	NHibernate.Cfg.Configuration cfg = Container.Resolve&amp;lt;NHibernate.Cfg.Configuration&amp;gt;(&amp;quot;MainDatabase.cfg&amp;quot;);
	SchemaExport export = new SchemaExport(cfg);
	export.Execute(false, true, false);
}&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-wcf-services-resolution-facility"&gt;Castle Windsor WCF Services Resolution Facility&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-enabling-xml-configuration-files-silverlight"&gt;Castle Windsor enabling XML configuration files in Silverlight&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-resolve-dependencies-existing-object-instance"&gt;Castle Windsor - resolve dependencies on an existing object instance&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/castle-nhibernate-integration-facility-configuration-object"&gt;&lt;strong&gt;More related document (33)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/castle-nhibernate-integration-facility-configuration-object</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/castle-nhibernate-integration-facility-configuration-object#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/castle-nhibernate-integration-facility-configuration-object</guid><pubDate>Sun, 14 Mar 2010 17:05:26 GMT</pubDate><category>Castle windsor</category><category>Configuration</category><category>Facility</category><category>Nhibernate</category></item><item><title>Css and JavaScript file minification</title><description>&lt;p&gt;Performing the minification of your custom JavaScript and Css files is usually a good practice to follow when deploying your website in a production environment, but this usually makes doing ‘on the fly’ and ‘live’ modification to those files nearly impossible due to the very compact form they get.&lt;/p&gt;  &lt;p&gt;A common technique you can use when it comes to asp.net web sites is to develop an HttpHandler that handle the minification task on the fly.&lt;/p&gt;  &lt;p&gt;A very simple approach is to minify each file on a file per file basis, that is: every request of a .js or a .css file will be mapped to be processed by our handlers, the file read and compressed (using an appropriate library) and then stored in the cache (for any subsequent request) and streamed back to the client.&lt;/p&gt;  &lt;p&gt;To perform the minification I decided to use the &lt;a href="http://www.codeplex.com/YUICompressor" target="_blank"&gt;Yahoo! UI Library: YUI Compressor for .Net&lt;/a&gt;, but you can change it to whatever compressor you like.&lt;/p&gt;  &lt;p&gt;Here’s the code for the Css minification handler:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:d2fb6767-d683-409b-bca8-39406302ad35" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;   public class CssYuiCompressorHandler : IHttpHandler
   {
      private const int DefaultCacheDuration = 30;

      public bool IsReusable { get { return true; } }

      public void ProcessRequest(HttpContext context)
      {
			context.Response.ContentType = &amp;quot;text/css&amp;quot;;
			string filePath = context.Request.Url.AbsolutePath;
			filePath = context.Server.MapPath(filePath);
         // if the file is already minified (we use the .min.css naming convention)
			// read it as it is and deliver it to the client
      	if (File.Exists(filePath))
      	{
      		if (filePath.EndsWith(&amp;quot;.min.css&amp;quot;))
      			context.Response.WriteFile(filePath);
      		else
      			CompressCssAndWriteToResponseStream(context, filePath);
      	}
      	else
      		context.Response.StatusCode = 404;

      	context.Response.Flush();
         context.Response.End();
      }

   	static readonly object FileLock = new object();

		private static void CompressCssAndWriteToResponseStream(HttpContext context, string filePath)
      {
         string requestHash = context.Request.Url.AbsolutePath;
         if (context.Cache[requestHash] != null)
         {
            context.Response.Write((string)context.Cache[requestHash]);
            return;
         }
         lock (FileLock)
         {
            using (StreamReader sr = new StreamReader(filePath, true))
            {
               string compressed = CssCompressor.Compress(sr.ReadToEnd());
               context.Response.Write(compressed);

               context.Cache.Add(requestHash,
                                  compressed,
                                  null,
                                  System.Web.Caching.Cache.NoAbsoluteExpiration,
                                  new TimeSpan(DefaultCacheDuration, 0, 0),
                                  System.Web.Caching.CacheItemPriority.Normal,
                                  null);
               sr.Close();
            }
         }
      }
   }
&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;The JavaScript minification handler is quite similar:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:7c6ed3ed-a177-4aa1-9ddc-d1e4d4cfe7d0" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: csharp; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;   public class JsYuiCompressorHandler : IHttpHandler
   {
      private const int DefaultCacheDuration = 30;

      public bool IsReusable { get { return true; } }

      public void ProcessRequest(HttpContext context)
      {
			context.Response.ContentType = &amp;quot;application/x-javascript&amp;quot;;
			string filePath = context.Request.Url.AbsolutePath;
			filePath = context.Server.MapPath(filePath);
         // if the file is already minified (we use the .min.js naming convention)
			// read it as it is and deliver it to the client
      	if (File.Exists(filePath))
      	{
      		if (filePath.EndsWith(&amp;quot;.min.js&amp;quot;))
      			context.Response.WriteFile(filePath);
      		else
					CompressJsAndWriteToResponseStream(context, filePath);
      	}
      	else
      		context.Response.StatusCode = 404;

      	context.Response.Flush();
         context.Response.End();
      }

   	static readonly object FileLock = new object();

		private static void CompressJsAndWriteToResponseStream(HttpContext context, string filePath)
		{
			string requestHash = context.Request.Url.AbsolutePath; //.GetHashCode().ToString();
			if (context.Cache[requestHash] != null)
			{
				context.Response.Write((string)context.Cache[requestHash]);
				return;
			}
			lock (FileLock)
			{
				using (StreamReader sr = new StreamReader(filePath, true))
				{
					string compressed = JavaScriptCompressor.Compress(sr.ReadToEnd());
					context.Response.Write(compressed);

					context.Cache.Add(requestHash,
											 compressed,
											 null,
											 System.Web.Caching.Cache.NoAbsoluteExpiration,
											 new TimeSpan(DefaultCacheDuration, 0, 0),
											 System.Web.Caching.CacheItemPriority.Normal,
											 null);
					sr.Close();
				}
			}
		}
   }&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;To activate these two handlers you have to modify the web.config file:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:DFDE9937-D816-47f4-A306-7B60D5CE5AC0:c04993b8-1e42-4ef6-9552-41341d988fd1" class="wlWriterEditableSmartContent"&gt;&lt;pre class="brush: xml; gutter: false; first-line: 1; tab-size: 3;  toolbar: true; "&gt;		&amp;lt;httpHandlers&amp;gt;
			...
			&amp;lt;add verb=&amp;quot;*&amp;quot; path=&amp;quot;*.css&amp;quot; type=&amp;quot;Dexter.Web.HttpHandlers.CssYuiCompressorHandler, Dexter.Web, Version=1.0.0.0, Culture=neutral&amp;quot;/&amp;gt;
			&amp;lt;add verb=&amp;quot;*&amp;quot; path=&amp;quot;*.js&amp;quot; type=&amp;quot;Dexter.Web.HttpHandlers.JsYuiCompressorHandler, Dexter.Web, Version=1.0.0.0, Culture=neutral&amp;quot;/&amp;gt;
		&amp;lt;/httpHandlers&amp;gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;This approach allows you to deploy the files as they are and the minification is performed on the server during the first request.&lt;/p&gt;

&lt;p&gt;I tested this technique in Dexter (it’s actually working in this blog) and I noticed a good reduction in the size of the custom .css and .js files I had:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/UserFiles/Guardian/MinificationBefore_2.jpg" rel="shadowbox"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="MinificationBefore" border="0" alt="MinificationBefore" src="http://www.primordialcode.com/UserFiles/Guardian/MinificationBefore_thumb.jpg" width="294" height="254" /&gt;&lt;/a&gt; &lt;a href="http://www.primordialcode.com/UserFiles/Guardian/MinificationAfter_2.jpg" rel="shadowbox"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="MinificationAfter" border="0" alt="MinificationAfter" src="http://www.primordialcode.com/UserFiles/Guardian/MinificationAfter_thumb.jpg" width="266" height="254" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;for example:&lt;/p&gt;

&lt;p&gt;Site.css passed from 36.80 KB to 27.53 KB&lt;/p&gt;

&lt;p&gt;shCore.js passed from 19.22 KB to 18.17 KB&lt;/p&gt;

&lt;p&gt;customFunction.js passed from 5.44 KB to 3.77 KB&lt;/p&gt;

&lt;p&gt;The total reduction in size was something like 32 KB.&lt;/p&gt;

&lt;p&gt;In a more advanced solution you can look for a way to not only minify the single files, but also to merge them in a single file in order to minimize the number of requests made to the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: &lt;/strong&gt;fixed a bug in the cache usage.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples"&gt;WebNet European Conference, Slides and Samples&lt;/a&gt; (11/06/2012)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/aspnet-tagging-hiding-columns-gridview"&gt;ASP.NET - Tagging and Hiding the columns of a GridView&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/working-on-dexter"&gt;Working on Dexter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error"&gt;Tale of an ‘asp:Content control that do not correspond with asp:ContentPlaceHolder’ Master Page Error&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery"&gt;Passing JSON serialized objects to a WCF service with jQuery&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/css-and-javascript-file-minification"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/css-and-javascript-file-minification</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/css-and-javascript-file-minification#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/css-and-javascript-file-minification</guid><pubDate>Sun, 14 Mar 2010 16:27:18 GMT</pubDate><category>Asp net</category><category>Css</category><category>Javascript</category><category>Minification</category></item><item><title>PrimordialCode is now powered by the open source Dexter Blog Engine</title><description>&lt;p&gt;
	It&amp;#39;s time for another new beginning.&lt;/p&gt;
&lt;p&gt;
	Over a month ago I joined the Dexter&amp;#39;s Developers Team, cause I felt that the project was indeed good and I liked the idea to participate in developing something I could also have used.&lt;/p&gt;
&lt;p&gt;
	When I entered the project it was missing some features I considered vital for me to switch over:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		The ability to import all my previous data from Wordpress.&lt;/li&gt;
	&lt;li&gt;
		The support for multiple categories for every post.&lt;/li&gt;
	&lt;li&gt;
		A better integration with Windows Live Writer (the primary tool I always used to make my posts) to support hierarchical categories, tags and slugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	I&amp;#39;ve worked on all these in my spare time during the last month and now that all of them are implemented (there&amp;#39;s still some work to do to improve the import section and integrate it in the blog engine instead of using an external tool), I see no reason to not switch over.&lt;/p&gt;
&lt;p&gt;
	So let&amp;#39;s say good-bye to my Wordpress version of the blog that accompanied me during this almost two years of blogging experience and say welcome to the new PrimordialCode powered by Dexter (the actual skin is kindly stolen from Ugo&amp;rsquo;s blog).&lt;/p&gt;
&lt;p&gt;
	There&amp;#39;s still more room for improvements and we have a lots of new features on the horizon to implement.&lt;/p&gt;
&lt;p&gt;
	If you are curious about Dexter go check our feature list and download the source code from our &lt;br /&gt;
	project page on CodePlex: &lt;a href="http://dexterblogengine.codeplex.com/"&gt;http://dexterblogengine.codeplex.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
	A big thank to all the guys of the team for making this possible.&lt;/p&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/quibrowserit-powered-dexter-blog-engine"&gt;QuiBrowser.it powered by Dexter Blog Engine&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dexter-dynamic-pages-windows-live-writer-support"&gt;Dexter is growing: Dynamic Pages and better Windows Live Writer support&lt;/a&gt; (06/02/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/working-on-dexter"&gt;Working on Dexter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/primordialcode-powered-open-source-dexter-blog-engine"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/primordialcode-powered-open-source-dexter-blog-engine</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/primordialcode-powered-open-source-dexter-blog-engine#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/primordialcode-powered-open-source-dexter-blog-engine</guid><pubDate>Mon, 08 Mar 2010 18:06:00 GMT</pubDate><category>Dexter</category></item><item><title>JQuery, WCF and the JSON DateTime serialization</title><description>&lt;p&gt;Days ago I blogged about how to call a WCF service from a jQuery application to retrieve and send data to the server to realize a small interactive chatting application. Everything was working fine until it came to format any DateTime data passed from the server to the client.&lt;/p&gt;  &lt;p&gt;We ended up having a call like this:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;var msg3 = { &lt;span class="str"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;: { &lt;span class="str"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;Sender&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;Webpage&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;Sended Text&amp;quot;&lt;/span&gt; }, &lt;span class="str"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; };&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;$(document).ready(function() {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    $.ajax({&lt;/pre&gt;

    &lt;pre class="alt"&gt;        type: &lt;span class="str"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        url: serviceUrl + &lt;span class="str"&gt;&amp;quot;TestMessageModifyWithSuppliedContent&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// data: &amp;quot;{ \&amp;quot;msg\&amp;quot; : &amp;quot; + JSON.stringify(msg) + &amp;quot;, \&amp;quot;id\&amp;quot; : \&amp;quot;4\&amp;quot;}&amp;quot;,&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        data: JSON.stringify(msg3),&lt;/pre&gt;

    &lt;pre class="alt"&gt;        contentType: &lt;span class="str"&gt;&amp;quot;application/json; charset=utf-8&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        dataType: &lt;span class="str"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;        success: function(data) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;//debugger;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            var text = data.d.Timestamp + &lt;span class="str"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; + data.d.Sender + &lt;span class="str"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; + data.d.Text;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            alert(text);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        },&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        error: function(XMLHttpRequest, textStatus, errorThrown) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            debugger;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            alert(&lt;span class="str"&gt;&amp;quot;Error Occured!&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    });&lt;/pre&gt;

    &lt;pre class="alt"&gt;});&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;the output of this code is a Message Box with the following text:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="str"&gt;&amp;quot;/Date(1267695086938+0100)/ - Webpage - 3 - Second parameter passed: 1&amp;quot;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Looking at fiddler for the request and the response we have:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;POST http:&lt;span class="rem"&gt;//localhost.:58817/Services/ChatService.svc/TestMessageModifyWithSuppliedContent HTTP/1.1&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;...Request plumbing goes here...&lt;/pre&gt;

    &lt;pre class="alt"&gt;Pragma: no-cache&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;span class="str"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;:{&lt;span class="str"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;,&lt;span class="str"&gt;&amp;quot;Sender&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;Webpage&amp;quot;&lt;/span&gt;,&lt;span class="str"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;Sended Text&amp;quot;&lt;/span&gt;},&lt;span class="str"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;HTTP/1.1 200 OK&lt;/pre&gt;

    &lt;pre class="alteven"&gt;...Response plumbing goes here...&lt;/pre&gt;

    &lt;pre class="alt"&gt;Content-Type: application/json; charset=utf-8&lt;/pre&gt;

    &lt;pre class="alteven"&gt;Content-Length: 160&lt;/pre&gt;

    &lt;pre class="alt"&gt;Connection: Close&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;span class="str"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;:{&lt;span class="str"&gt;&amp;quot;__type&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;Message:#LiveAssistance.Entities&amp;quot;&lt;/span&gt;,&lt;span class="str"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;:2,&lt;span class="str"&gt;&amp;quot;Sender&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;Webpage&amp;quot;&lt;/span&gt;,&lt;span class="str"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;3 - Second parameter passed: 1&amp;quot;&lt;/span&gt;,&lt;span class="str"&gt;&amp;quot;Timestamp&amp;quot;&lt;/span&gt;:&lt;span class="str"&gt;&amp;quot;\/Date(1267694873788+0100)\/&amp;quot;&lt;/span&gt;}}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I was surprised at fist, then a quick research show that this is the way WCF serializes the DateTime object in JSON. In short the first number represent the number of milliseconds in the GMT time zone, regular (non-daylight savings) time since midnight, January 1, 1970. The number may be negative to represent earlier times. The second is the time zone (more info here: &lt;a href="http://msdn.microsoft.com/en-us/library/bb412170.aspx" target="_blank"&gt;Stand-Alone JSON Serialization&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So we have to do something to convert this string representation in a JavaScript Date() object. To do so we can use the ‘dataFilter’ feature of the jQuery ajax() call that allows us to modify and alter the returned JSON string representation before it’s passed on to the parser.&lt;/p&gt;

&lt;p&gt;We basically want to change the string “/Date(1267695086938+0100)/” to 
  &lt;br /&gt;“new Date(Date(1267695086938+0100)”; to do so we can rewrite our ajax call like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; $(document).ready(function() {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;         $.ajax({&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;             type: &lt;span class="str"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;             url: serviceUrl + &lt;span class="str"&gt;&amp;quot;TestMessageModifyWithSuppliedContent&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;             &lt;span class="rem"&gt;// data: &amp;quot;{ \&amp;quot;msg\&amp;quot; : &amp;quot; + JSON.stringify(msg) + &amp;quot;, \&amp;quot;id\&amp;quot; : \&amp;quot;4\&amp;quot;}&amp;quot;,&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;             data: JSON.stringify(msg3),&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;             contentType: &lt;span class="str"&gt;&amp;quot;application/json; charset=utf-8&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;             dataType: &lt;span class="str"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             dataFilter: function(data, type) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;                 var d = data.replace(/&lt;span class="str"&gt;&amp;quot;\\\/(Date\(.*?\))\\\/&amp;quot;&lt;/span&gt;/gi, &lt;span class="str"&gt;'new $1'&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                 &lt;span class="kwrd"&gt;return&lt;/span&gt; d;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;             },&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;             success: function(data) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                 &lt;span class="rem"&gt;//debugger;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;             var text = data.d.Timestamp.format(&lt;span class="str"&gt;&amp;quot;yyyy/mm/dd - HH:MM:ss&amp;quot;&lt;/span&gt;) + &lt;span class="str"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; + data.d.Sender + &lt;span class="str"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; + data.d.Text;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;                 alert(text);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;             },&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;             error: function(XMLHttpRequest, textStatus, errorThrown) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;                 debugger;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;                 alert(&lt;span class="str"&gt;&amp;quot;Error Occured!&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;             }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;         });&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;     });&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lines 9 - 12 shows our filtering function with the Regex we use to convert the returned JSON string representation to this one:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;FROM:&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="str"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;d&lt;span class="str"&gt;&amp;quot;:{&amp;quot;&lt;/span&gt;__type&lt;span class="str"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;Message:#Entities&lt;span class="str"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;Id&lt;span class="str"&gt;&amp;quot;:2,&amp;quot;&lt;/span&gt;Sender&lt;span class="str"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;Webpage&lt;span class="str"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;Text&lt;span class="str"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;3 - Second parameter passed: 1&lt;span class="str"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;Timestamp&lt;span class="str"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;\/Date(1267696301237+0100)\/&lt;span class="str"&gt;&amp;quot;}}&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;TO:&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="str"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;d&lt;span class="str"&gt;&amp;quot;:{&amp;quot;&lt;/span&gt;__type&lt;span class="str"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;Message:#Entities&lt;span class="str"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;Id&lt;span class="str"&gt;&amp;quot;:2,&amp;quot;&lt;/span&gt;Sender&lt;span class="str"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;Webpage&lt;span class="str"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;Text&lt;span class="str"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;3 - Second parameter passed: 1&lt;span class="str"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;Timestamp&lt;span class="str"&gt;&amp;quot;:new Date(1267696301237+0100)}}&amp;quot;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Everthing is now working and the Timestamp field contains a Date object...if you use jQuery 1.3.x...&lt;/p&gt;

&lt;p&gt;If (like me) you use jQuery 1.4.x you will get an error from the JSON serializer with an ‘invalid JSON format’ message...and guess...he’s right because “new Date(something)” isn’t a valid representation...so why the hell it all worked before?&lt;/p&gt;

&lt;p&gt;It turned out that jQuery 1.3.x used the JavaScript eval() function to internally deserialize objects (so using the method above we used in reality a trick), jQuery 1.4.x relies on the browser capabilities to deserialize JSON streams (in particular it uses the window.JSON object if the browser has support for it).&lt;/p&gt;

&lt;p&gt;It does this way mainly for performances and security reasons. So we have 2 ways now to get a Date object from our string representation:&lt;/p&gt;

&lt;p&gt;1- process each object with a function that (using the previously pointed regex and the eval() function) convert each date field to the corresponding object.&lt;/p&gt;

&lt;p&gt;2- change the way the data are parsed (client-side) and do our own JSON deserialization using eval(), to act this way we need to change the ‘dataType’ returned from ‘json’ to ‘text’ - this way we disable the automatic deserialization - then we have to call the eval() function on the returned and modified data stream:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; $(document).ready(function() {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;         $.ajax({&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;             type: &lt;span class="str"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;             url: serviceUrl + &lt;span class="str"&gt;&amp;quot;TestMessageModifyWithSuppliedContent&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;             &lt;span class="rem"&gt;// data: &amp;quot;{ \&amp;quot;msg\&amp;quot; : &amp;quot; + JSON.stringify(msg) + &amp;quot;, \&amp;quot;id\&amp;quot; : \&amp;quot;4\&amp;quot;}&amp;quot;,&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;             data: JSON.stringify(msg3),&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;             contentType: &lt;span class="str"&gt;&amp;quot;application/json; charset=utf-8&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;             dataType: &lt;span class="str"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             dataFilter: function(data, type) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;                 var d = data.replace(/&lt;span class="str"&gt;&amp;quot;\\\/(Date\(.*?\))\\\/&amp;quot;&lt;/span&gt;/gi, &lt;span class="str"&gt;'new $1'&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                 &lt;span class="kwrd"&gt;return&lt;/span&gt; d;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;             },&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;             success: function(data) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                 &lt;span class="rem"&gt;//debugger;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                 data = eval(&lt;span class="str"&gt;'('&lt;/span&gt; + data + &lt;span class="str"&gt;')'&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;                 var text = data.d.Timestamp.format(&lt;span class="str"&gt;&amp;quot;yyyy/mm/dd - HH:MM:ss&amp;quot;&lt;/span&gt;) + &lt;span class="str"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; + data.d.Sender + &lt;span class="str"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; + data.d.Text;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;                 alert(text);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;             },&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;             error: function(XMLHttpRequest, textStatus, errorThrown) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;                 debugger;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;                 alert(&lt;span class="str"&gt;&amp;quot;Error Occured!&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;             }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;         });&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;     });&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lines 8, 15 and 16 shows the modifications we made. As you can see in line 16 now you can use the Timestamp field as a data object and format it using any JavaScript DateTime formatting library you like.&lt;/p&gt;

&lt;p&gt;As a note: using this second method you are obviously loosing in performance and security, cause eval() is slower than the native JSON deserialization, and even worse you are subject to code injection attacks.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery"&gt;Passing JSON serialized objects to a WCF service with jQuery&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/unity-wcf-service-resolution-container-extension"&gt;Unity: WCF service resolution container extension&lt;/a&gt; (06/08/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator"&gt;Silverlight / WCF: fixing the Custom WCF Proxy Generator&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation"&gt;Silverlight / WCF : Writing your own Custom WCF Proxy Generator to support validation&lt;/a&gt; (12/09/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-wcf-services-resolution-facility"&gt;Castle Windsor WCF Services Resolution Facility&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/jquery-wcf-json-datetime-serialization"&gt;&lt;strong&gt;More related document (2)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization</guid><pubDate>Thu, 04 Mar 2010 19:10:00 GMT</pubDate><category>Datetime</category><category>Jquery</category><category>Json</category><category>Wcf</category></item><item><title>Working on Dexter</title><description>&lt;p&gt;
	I&amp;rsquo;m not writing many posts in the last days and the main reason is I&amp;rsquo;ve actively joined the development of Dexter a new open source blog engine written in ASP.NET MVC, you can find it on Codeplex at this link: &lt;a href="http://dexterblogengine.codeplex.com/" target="_blank"&gt;http://dexterblogengine.codeplex.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
	When my friend Andrea Balducci, talked to me about this project I was so excited I decided to give it a try...and it was good (there&amp;rsquo;s always room for improvement, but it was good!).&lt;/p&gt;
&lt;p&gt;
	I do love Wordpress, it&amp;rsquo;s a great product and works very well, why working on another blog engine then? well the answer is short: I&amp;rsquo;m a developer and I don&amp;rsquo;t know how to put my hands on the WP engine...simply cause I hate php and never spent more than a couple of hours trying to learn it.&lt;/p&gt;
&lt;p&gt;
	With Dexter is all another story...C#, ASP.NET MVC, NHibernate, Castle etc etc I feel home and (even better) I have the freedom to make experiments on the core engine too.&lt;/p&gt;
&lt;p&gt;
	Since I joined I focused on looking at the implementation and adding the features I needed first. So what I was working on the past days:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Improve the import engine to support Wordpress (I&amp;rsquo;m very close to fix all that I need), you can see a live version of my blog using Dexter at this link: &lt;a href="http://dexter.primordialcode.com/"&gt;http://dexter.primordialcode.com/&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		Adding a better support for Windows Live Writer improving the different Metaweblog APIs support. &lt;br /&gt;
		I just added the hierarchical visualization of category (no more flattening out) and the ability to post the tags related to each post using WLW (no more need to add them at the body of the message).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	Here&amp;rsquo;s a screenshot of the thing:&lt;/p&gt;
&lt;p&gt;
	&lt;a href="/UserFiles/Guardian/2010/02/DexterLive.jpg"&gt;&lt;img alt="DexterLive" border="0" height="274" src="/UserFiles/Guardian/2010/02/DexterLive_thumb.jpg" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="DexterLive" width="388" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
	What I&amp;rsquo;m working on now:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Adding the ability to tie a single Post to more than a single category.&lt;/li&gt;
	&lt;li&gt;
		Improving the import routines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	All the changes are actually in my private Branch and will be merged to the main trunk once all the developers have reviewed them.&lt;/p&gt;
&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples"&gt;WebNet European Conference, Slides and Samples&lt;/a&gt; (11/06/2012)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/css-and-javascript-file-minification"&gt;Css and JavaScript file minification&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/aspnet-tagging-hiding-columns-gridview"&gt;ASP.NET - Tagging and Hiding the columns of a GridView&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error"&gt;Tale of an ‘asp:Content control that do not correspond with asp:ContentPlaceHolder’ Master Page Error&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/primordialcode-powered-open-source-dexter-blog-engine"&gt;PrimordialCode is now powered by the open source Dexter Blog Engine&lt;/a&gt; (03/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/working-on-dexter"&gt;&lt;strong&gt;More related document (11)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/working-on-dexter</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/working-on-dexter#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/working-on-dexter</guid><pubDate>Thu, 18 Feb 2010 02:24:00 GMT</pubDate><category>Asp net mvc</category><category>Blog engine</category><category>Dexter</category></item><item><title>Passing JSON serialized objects to a WCF service with jQuery</title><description>&lt;p&gt;You can find a lot of posts on the web on the subject, why writing another one then? Simply because despite all the documentation I’ve already found on the web, while trying to put it in action I’ve spent a couple of hours in making that work, so I’ll use this post to recap all the action I made as a reference guide for my future implementations.&lt;/p&gt;  &lt;p&gt;The scenario is: we have a WCF service that is able to accept call to methods with complex parameters (like Messages object in a simple web chat project) and we want to be able to use those methods with jQuery with the minimal impact on the service implementation.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;WCF Service setup&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;We consider a very simple implementation, you don’t have to use any ‘strange’ or unusual attribute here:&lt;/p&gt;  &lt;p&gt;The message class we are sending back and forth:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// a single message in a conversation&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;[DataContract]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Message : Entity&amp;lt;&lt;span class="kwrd"&gt;int&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// the nickname of who is sending the message&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [DataMember]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Sender { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// this will be assigned when the object get persisted into the storage, not before&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// once assigned it's likely to not be modified again&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [DataMember]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; DateTime Timestamp { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [DataMember]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Text { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A test service implementation&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// service used to serialize/desierialize the data in JSon for JQuery&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;[ServiceContract]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;interface&lt;/span&gt; IChatService&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// return a simple message&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [OperationContract]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    Message TestMessage();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// a test function that takes a message and returns it modified&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;msg&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [OperationContract]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    Message TestMessageModify(Message msg);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// a test function that get multiple parameters and return a message&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// modified&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;msg&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;id&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [OperationContract]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    Message TestMessageModifyWithSuppliedContent(Message msg, &lt;span class="kwrd"&gt;int&lt;/span&gt; id);&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ChatService : IChatService&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; Message TestMessage()&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; Message() { Id = 1, Sender = &lt;span class="str"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;, Text = &lt;span class="str"&gt;&amp;quot;1 - Text message.&amp;quot;&lt;/span&gt;, Timestamp = DateTime.Now };&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; Message TestMessageModify(Message msg)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        msg.Text = &lt;span class="str"&gt;&amp;quot;2 - Modified message&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        msg.Timestamp = DateTime.Now;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; msg;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; Message TestMessageModifyWithSuppliedContent(Message msg, &lt;span class="kwrd"&gt;int&lt;/span&gt; id)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        msg.Text = &lt;span class="str"&gt;&amp;quot;3 - Second parameter passed: &amp;quot;&lt;/span&gt; + id;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        msg.Timestamp = DateTime.Now;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; msg;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The only thing needed is the ‘AspNetCompatibilityRequirements’ attribute. &lt;/p&gt;

&lt;p&gt;All the magic is done in the WCF configuration section:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;system.serviceModel&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;serviceHostingEnvironment&lt;/span&gt; &lt;span class="attr"&gt;aspNetCompatibilityEnabled&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;services&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;service&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;RemoteAssistance.Services.Impl.ChatService&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;                  &lt;span class="attr"&gt;behaviorConfiguration&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;DebugJSonBehavior&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;endpoint&lt;/span&gt; &lt;span class="attr"&gt;address&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;&amp;quot;&lt;/span&gt; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;                       &lt;span class="attr"&gt;binding&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;webHttpBinding&amp;quot;&lt;/span&gt; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;                       &lt;span class="attr"&gt;behaviorConfiguration&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;DebugJSonBehavior&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;                       &lt;span class="attr"&gt;contract&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;RemoteAssistance.Services.IChatService&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;identity&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;dns&lt;/span&gt; &lt;span class="attr"&gt;value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;localhost&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;identity&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;endpoint&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;endpoint&lt;/span&gt; &lt;span class="attr"&gt;address&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mex&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;binding&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mexHttpBinding&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;contract&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IMetadataExchange&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;service&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;services&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;behaviors&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;endpointBehaviors&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;behavior&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;DebugJSonBehavior&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;enableWebScript&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;behavior&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;endpointBehaviors&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;serviceBehaviors&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;behavior&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;DebugJSonBehavior&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;serviceMetadata&lt;/span&gt; &lt;span class="attr"&gt;httpGetEnabled&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;serviceDebug&lt;/span&gt; &lt;span class="attr"&gt;httpHelpPageEnabled&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;includeExceptionDetailInFaults&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;behavior&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;serviceBehaviors&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;behaviors&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;system.serviceModel&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To activate JSON serialization and deserialization for an end point we have to supply some information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in line 7 we set the binding to ‘webHttpBinding’, this is the main actor the inject the JSON DataContract Serializer into the WCF stack. &lt;/li&gt;

  &lt;li&gt;in line 8 we set a specific endpoint behavior for this end point &lt;/li&gt;

  &lt;li&gt;lines 18-22 enable the endpoint behavior that makes it possible to consume the service from ASP.NET AJAX web pages. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consuming the web service is the real ‘tricky’ point, calling a function without parameter is extremely easy, you can use code like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; $(document).ready(&lt;span class="kwrd"&gt;function&lt;/span&gt;() {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     $.ajax({&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;         type: &lt;span class="str"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         url: &lt;span class="str"&gt;&amp;quot;http://localhost:58829/ChatService.svc/TestMessage&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         data: &lt;span class="str"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         contentType: &lt;span class="str"&gt;&amp;quot;application/json; charset=utf-8&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         dataType: &lt;span class="str"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         success: &lt;span class="kwrd"&gt;function&lt;/span&gt;(data) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             &lt;span class="rem"&gt;//debugger;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;             alert(data.d.Text);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         },&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         error: &lt;span class="kwrd"&gt;function&lt;/span&gt;(XMLHttpRequest, textStatus, errorThrown) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                 debugger;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;            alert(&lt;span class="str"&gt;&amp;quot;Error Occured!&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;     });&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt; });&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Things get a bit ‘complicated’ when you actually have to pass parameters (special tanks here go to my fellow &lt;a href="http://www.codewrecks.com" target="_blank"&gt;Alkampfer&lt;/a&gt; for helping me find the solution). To pass a parameter successfully you have to supply as the data argument (line 5) a string that is the JSON representation of a JS object which properties matches the parameter name of the function you are calling, the parameters’ values are the actual values that will be sent to the server. If the parameter itself is a complex object (that is a class) you need to supply the JSON representation of the object, Let’s use an example to clarify:&lt;/p&gt;

&lt;p&gt;if we want to call the TestMessageModify(Message msg) function we need to supply ad data parameter a JS object made like this:&lt;/p&gt;

&lt;div style="border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px"&gt;
  &lt;div style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;
    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   1:&lt;/span&gt; var msg2 = { &lt;span style="color: #006080"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;: { &lt;span style="color: #006080"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;: &lt;span style="color: #006080"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;Sender&amp;quot;&lt;/span&gt;: &lt;span style="color: #006080"&gt;&amp;quot;Webpage&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;: &lt;span style="color: #006080"&gt;&amp;quot;Sended Text&amp;quot;&lt;/span&gt;} };&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We’re defining an object that contains a ‘msg’ property (same name of the function parameter) which in turn contains another object (defined by the same properties that our Message object have, to allow JSON deserialization to work). What we need to pass to the ‘data’ argument of the function call is the string representation of object:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="str"&gt;'{&amp;quot;msg&amp;quot;:{&amp;quot;Id&amp;quot;:&amp;quot;2&amp;quot;,&amp;quot;Sender&amp;quot;:&amp;quot;Webpage&amp;quot;,&amp;quot;Text&amp;quot;:&amp;quot;Sended Text&amp;quot;}}'&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To have the JSON representation of JavaScript object we can use an external library like this one: &lt;a title="http://www.JSON.org/json2.js" href="http://www.JSON.org/json2.js"&gt;http://www.JSON.org/json2.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, to call TestMessageModify(Message msg) and TestMessageModifyWithSuppliedContent(Message msg, int id), we can use the following code:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;var&lt;/span&gt; msg2 = { &lt;span class="str"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;: { &lt;span class="str"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;Sender&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;Webpage&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;Sended Text&amp;quot;&lt;/span&gt;} };&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;$(document).ready(&lt;span class="kwrd"&gt;function&lt;/span&gt;() {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    $.ajax({&lt;/pre&gt;

    &lt;pre class="alt"&gt;        type: &lt;span class="str"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        url: &lt;span class="str"&gt;&amp;quot;http://localhost:58829/ChatService.svc/TestMessageModify&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;        data: JSON.stringify(msg2),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        contentType: &lt;span class="str"&gt;&amp;quot;application/json; charset=utf-8&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;        dataType: &lt;span class="str"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        success: &lt;span class="kwrd"&gt;function&lt;/span&gt;(data) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            alert(data.d.Text);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        },&lt;/pre&gt;

    &lt;pre class="alt"&gt;        error: &lt;span class="kwrd"&gt;function&lt;/span&gt;(XMLHttpRequest, textStatus, errorThrown) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            debugger;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            alert(&lt;span class="str"&gt;&amp;quot;Error Occured!&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    });&lt;/pre&gt;

    &lt;pre class="alteven"&gt;});&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;var&lt;/span&gt; msg3 = { &lt;span class="str"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;: { &lt;span class="str"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;Sender&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;Webpage&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;: &lt;span class="str"&gt;&amp;quot;Sended Text&amp;quot;&lt;/span&gt;}, &lt;span class="str"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; : &lt;span class="str"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; };&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;$(document).ready(&lt;span class="kwrd"&gt;function&lt;/span&gt;() {&lt;/pre&gt;

    &lt;pre class="alt"&gt;    $.ajax({&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        type: &lt;span class="str"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;        url: &lt;span class="str"&gt;&amp;quot;http://localhost:58829/ChatService.svc/TestMessageModifyWithSuppliedContent&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        data: JSON.stringify(msg3),&lt;/pre&gt;

    &lt;pre class="alt"&gt;        contentType: &lt;span class="str"&gt;&amp;quot;application/json; charset=utf-8&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        dataType: &lt;span class="str"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;        success: &lt;span class="kwrd"&gt;function&lt;/span&gt;(data) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            alert(data.d.Text);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        },&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        error: &lt;span class="kwrd"&gt;function&lt;/span&gt;(XMLHttpRequest, textStatus, errorThrown) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            debugger;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            alert(&lt;span class="str"&gt;&amp;quot;Error Occured!&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    });&lt;/pre&gt;

    &lt;pre class="alt"&gt;});&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;
It ended up being a quite long post for something that should have been much more simple.&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization"&gt;JQuery, WCF and the JSON DateTime serialization&lt;/a&gt; (03/04/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/invoking-javaaxis-web-service-net-return-null-issue"&gt;Invoking a Java/AXIS Web Service from .NET: the ‘return null’ issue&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/unity-wcf-service-resolution-container-extension"&gt;Unity: WCF service resolution container extension&lt;/a&gt; (06/08/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator"&gt;Silverlight / WCF: fixing the Custom WCF Proxy Generator&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation"&gt;Silverlight / WCF : Writing your own Custom WCF Proxy Generator to support validation&lt;/a&gt; (12/09/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/passing-json-serialized-objects-wcf-service-jquery"&gt;&lt;strong&gt;More related document (3)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery</guid><pubDate>Wed, 27 Jan 2010 22:40:00 GMT</pubDate><category>Javascript</category><category>Jquery</category><category>Json</category><category>Wcf</category><category>Wcf service</category></item><item><title>Castle Windsor enabling XML configuration files in Silverlight</title><description>&lt;p&gt;When a version of Castle Windsor able to run in Silverlight was released I started to play with it, basically because I have a lot of code that use it inside my line of business infrastructure framework. I’m working on a WPF/Silverlight solution and I’ve developed a framework that work in both the environments.&lt;/p&gt;  &lt;p&gt;One of the biggest thing I miss in every ‘Silverlight-enables’ IoC system I tried is the ability to read and parse XML configuration files.&lt;/p&gt;  &lt;p&gt;The current release does not allow Silverlight to parse XML configuration file, because all the parser is based on classes that are in the System.Xml namespace and that weren’t included in the Silverlight runtime.&lt;/p&gt;  &lt;p&gt;The good news is Silverlight has a very good support for Linq To Xml, so I decided to do a ‘test of feasibility’ and switched the current implementation from using the XmlDom to Linq To Xml.&lt;/p&gt;  &lt;p&gt;I have to admit it was more complex than I thought at start (mainly because I had to understand how the parser was written), here are the steps I followed:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Download the ‘Inversion of control’ portion the Castle Windsor trunk an check the project to find the classes to modify: the good news is: all of them are inside a single folder ‘Castle.Windsor\Configuration\Interpreters’ &lt;/li&gt;    &lt;li&gt;Start with the .Net solution and replace the usages of the ‘old’ XmlDom classes (XmlDocument, XmlNode, etc...) with the new one from System.Xml.Linq (XDocument, XElement, XNode...). Beware it’s not that easy!      &lt;br /&gt;Both these systems act in slightly and sometime subtle different ways so I had to make ‘heavy’ modifications to all the class of the parser. &lt;/li&gt;    &lt;li&gt;Keep modifying and fixing the XmlInterpreter and all the other classes until all the tests for the .Net solution pass. At this stage the major modification were the introduction of a LinqToXmlConfigurationDeserializer to replace the standard one and a LinqExtensions class that contains extensions methods to mimic functionalities present in System.Xml.* classes and not directly exposed by Linq classes. &lt;/li&gt;    &lt;li&gt;Open up the Silverlight solution, include the new files and verifies it compiles...here some more minor modification were needed to exclude a couple of portions of code that really aren’t available in Silverlight.      &lt;br /&gt;Good! It compiles! &lt;/li&gt;    &lt;li&gt;Let’s see an overview of all the files that were modified:      &lt;br /&gt;&lt;a href="/UserFiles/Guardian/2010/01/CastleSilverlightInterpreters.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="CastleSilverlightInterpreters" border="0" alt="CastleSilverlightInterpreters" src="/UserFiles/Guardian/2010/01/CastleSilverlightInterpreters_thumb.png" width="240" height="335" /&gt;&lt;/a&gt; All the files we touched are inside the Configuration/Interpreters folders, no other section was modified. &lt;/li&gt;    &lt;li&gt;Let’s create a very simple Silverlight Test Application and check it on the ‘Field of Glory’:      &lt;div class="csharpcode-wrapper"&gt;       &lt;div class="csharpcode"&gt;         &lt;pre class="alt"&gt;[TestClass]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Tests&lt;/pre&gt;

        &lt;pre class="alt"&gt;{&lt;/pre&gt;

        &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; config = &lt;span class="str"&gt;&amp;quot;&amp;lt;configuration&amp;gt;&amp;lt;components&amp;gt;&amp;quot;&lt;/span&gt; +&lt;/pre&gt;

        &lt;pre class="alt"&gt;                            &lt;span class="str"&gt;&amp;quot;&amp;lt;component id=\&amp;quot;child\&amp;quot; &amp;quot;&lt;/span&gt; +&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                                       &lt;span class="str"&gt;&amp;quot;service=\&amp;quot;SilverlightTest.Domain.IChild, SilverlightTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\&amp;quot; &amp;quot;&lt;/span&gt; +&lt;/pre&gt;

        &lt;pre class="alt"&gt;                                       &lt;span class="str"&gt;&amp;quot;type=\&amp;quot;SilverlightTest.Domain.Child, SilverlightTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\&amp;quot; /&amp;gt;&amp;quot;&lt;/span&gt; +&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                            &lt;span class="str"&gt;&amp;quot;&amp;lt;component id=\&amp;quot;parent\&amp;quot; &amp;quot;&lt;/span&gt; +&lt;/pre&gt;

        &lt;pre class="alt"&gt;                                       &lt;span class="str"&gt;&amp;quot;service=\&amp;quot;SilverlightTest.Domain.IParent, SilverlightTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\&amp;quot; &amp;quot;&lt;/span&gt; +&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                                       &lt;span class="str"&gt;&amp;quot;type=\&amp;quot;SilverlightTest.Domain.Parent, SilverlightTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\&amp;quot; /&amp;gt;&amp;quot;&lt;/span&gt; +&lt;/pre&gt;

        &lt;pre class="alt"&gt;                            &lt;span class="str"&gt;&amp;quot;&amp;lt;/components&amp;gt;&amp;lt;/configuration&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

        &lt;pre class="alt"&gt;    [TestMethod]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; ComponentRegistrationString()&lt;/pre&gt;

        &lt;pre class="alt"&gt;    {&lt;/pre&gt;

        &lt;pre class="alteven"&gt;        WindsorContainer container = &lt;span class="kwrd"&gt;new&lt;/span&gt; WindsorContainer(&lt;span class="kwrd"&gt;new&lt;/span&gt; XmlInterpreter(&lt;span class="kwrd"&gt;new&lt;/span&gt; StaticContentResource(config)));&lt;/pre&gt;

        &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// resolve the object&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;        IParent p = container.Resolve&amp;lt;IParent&amp;gt;();&lt;/pre&gt;

        &lt;pre class="alt"&gt;        Assert.IsNotNull(p);&lt;/pre&gt;

        &lt;pre class="alteven"&gt;        Assert.IsInstanceOfType(p, &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(Parent));&lt;/pre&gt;

        &lt;pre class="alt"&gt;        Assert.IsNotNull(p.ChildConstructorDependency);&lt;/pre&gt;

        &lt;pre class="alteven"&gt;        Assert.IsInstanceOfType(p.ChildConstructorDependency, &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(Child));&lt;/pre&gt;

        &lt;pre class="alt"&gt;        Assert.IsNotNull(p.ChildProperty);&lt;/pre&gt;

        &lt;pre class="alteven"&gt;        Assert.IsInstanceOfType(p.ChildProperty, &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(Child));&lt;/pre&gt;

        &lt;pre class="alt"&gt;    }&lt;/pre&gt;

        &lt;pre class="alteven"&gt;}&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and let’s run it:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2010/01/CastleSilverlightXmlFileResult.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="CastleSilverlightXmlFileResult" border="0" alt="CastleSilverlightXmlFileResult" src="/UserFiles/Guardian/2010/01/CastleSilverlightXmlFileResult_thumb.png" width="335" height="320" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Cool! It works: you can now feed up the configuration even from an XML file to the Silverlight version of Castle Windsor too (you can his file from a database a web service or download it directly..that’s up to you).&lt;/p&gt;

&lt;p&gt;What’s left to do: as I said before this whole thing started as an experiment and the code is not clean, not optimized nor checked for memory leaks. Plus actually I modified the parser classes and ‘lost’ the previous implementation (I was lazy and I didn’t wanted to write some new tests...I just reused the old ones :D). Some more work is needed to create a full new implementation (parallel to the old one) and write some additional tests for it.&lt;/p&gt;

&lt;p&gt;Actually I see only a potential problem and that is how to deal with configuration file inclusion: we should be able to inject an external handler that tells to the processor how to retrieve the resource (we cannot have access to physical files directly (except for those on the Isolated Storage)...so this feature still need some more thinking.&lt;/p&gt;

&lt;p&gt;Plus the actual code it’s not very clean and contains a couple of hacks I’m not very proud of and would like to get rid of :D&lt;/p&gt;

&lt;p&gt;I think that a good move can be to create a new ‘Castle.Windsor.Configuration’ project and move the configuration code there.&lt;/p&gt;

&lt;p&gt;Here is the full source code of this sample if you want to download and try it, it contains the full trunk portion of the Inversion Of Control section in Castle Windsor:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:9fb8ac36-2e74-4d41-821a-b9a77704157d" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2010/01/InversionOfControl_Linq.zip" target="_self"&gt;InversionOfControl_Linq.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;I will submit this code to the Castle Dev Team and see what they think about it.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-nhibernate-integration-facility-configuration-object"&gt;Castle NHibernate Integration Facility: how to get the configuration object&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/castle-windsor-enabling-xml-configuration-files-silverlight"&gt;&lt;strong&gt;More related document (47)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/castle-windsor-enabling-xml-configuration-files-silverlight</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/castle-windsor-enabling-xml-configuration-files-silverlight#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/castle-windsor-enabling-xml-configuration-files-silverlight</guid><pubDate>Fri, 22 Jan 2010 19:07:00 GMT</pubDate><category>Castle windsor</category><category>Configuration</category><category>File</category><category>Silverlight</category><category>Xml</category></item><item><title>Castle DynamicProxy - a dirty trick to call invocation Proceed() multiple times in an interceptor</title><description>&lt;p&gt;This is a typical scenario: you have a remote service (a database a web service...anything) which can have connection problems; obviously you don’t want your application to crash the desired behavior can be to retry the operation for a couple of times and then ask the user what to do (with a message box maybe).&lt;/p&gt;  &lt;p&gt;Implementing this in Spring.Net is quite easy, here is some ugly code that build up a skeleton for the feature:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;[System.CLSCompliant(&lt;span class="kwrd"&gt;false&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ExceptionHandlerDaoAroundAdvice : IMethodInterceptor&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Invoke(IMethodInvocation invocation)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="rem"&gt;// endless loop to let the user retry the operation in case of db error&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;int&lt;/span&gt; tries = 0;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;while&lt;/span&gt; (&lt;span class="kwrd"&gt;true&lt;/span&gt;) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;try&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; tries += 1;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;object&lt;/span&gt; o = invocation.Proceed();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;return&lt;/span&gt; o;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;catch&lt;/span&gt; (SqlClient.SqlException ex) {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; HandleDbException(ex, tries);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;catch&lt;/span&gt; (NHibernate.ADOException ex) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; HandleDbException(ex, tries);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span class="rem"&gt;// log the error and ask user if they want to retry, if not abort program&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; HandleDbException(Exception ex, &lt;span class="kwrd"&gt;int&lt;/span&gt; tries)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// examine the exception and&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// in case of connection problems&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="rem"&gt;// use your session or connection manager to close any pending connection, thay are not valid anymore;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;if&lt;/span&gt; (tries &amp;lt; 4) {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// let's wait a bit before retry&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Threading.Thread.Sleep(2000);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="kwrd"&gt;else&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span class="rem"&gt;// todo: call here the service that have to ask the user what to do: wait more and retry,&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// contact the network administrator or close the application for example&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&amp;#160;&amp;#160; }&amp;#160;&amp;#160;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;to wire it to a proxy generated around your object you can write something like:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;ProxyFactory factory = &lt;span class="kwrd"&gt;new&lt;/span&gt; ProxyFactory(YOUROBJECT);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;factory.AddAdvice(&lt;span class="kwrd"&gt;new&lt;/span&gt; ExceptionHandlerDaoAroundAdvice());&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;return&lt;/span&gt; factory.GetProxy();&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But since I already use Castle Windsor as my IoC system and DynamicProxy for the lazy loading with NHibernate, in order to reduce the number of assemblies and external library my application uses, inspired by this &lt;a href="http://kozmic.pl/archive/2009/04/27/castle-dynamic-proxy-tutorial.aspx" target="_blank"&gt;great series of articles&lt;/a&gt; by Krzysztof Kozmic I decided to swap out Spring.Aop and use Castle’s Dynamic proxies.&lt;/p&gt;

&lt;p&gt;The first implementation was more or less a plain translation of the code shown above and surprisingly I got an InvalidOperationException for calling invocation.Proceed() multiple times inside the Intercept() method of the interceptor.&lt;/p&gt;

&lt;p&gt;To verify this I setup a simple test case with an adhoc interceptor that called invocation.Proceed() multiple times:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;interface&lt;/span&gt; ITestClass&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;void&lt;/span&gt; TestMethod();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TestClass : ITestClass&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TestMethod()&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        Console.WriteLine(&lt;span class="str"&gt;&amp;quot;Test Method Called&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; FailingRetryInterceptor : IInterceptor&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="preproc"&gt;#region&lt;/span&gt; IInterceptor Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Intercept(IInvocation invocation)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        invocation.Proceed();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// we want to call proceed multiple times to simulate maybe something&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// like retrying a connection to a database or a remote service&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// after having informed the user&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// let's try to call the proced again, we expect a big time&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// failure here cause the standard implementation does&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// not allow the proceed method to be called multiple times&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        invocation.Proceed();&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;[TestFixture]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; InterceptorsTest&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;readonly&lt;/span&gt; ProxyGenerator _generator = &lt;span class="kwrd"&gt;new&lt;/span&gt; ProxyGenerator();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [Test]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TestFailingRetryInterceptor()&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        Assert.Throws(&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;typeof&lt;/span&gt; (InvalidOperationException),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            () =&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                    ITestClass sut =&lt;/pre&gt;

    &lt;pre class="alt"&gt;                        _generator.CreateInterfaceProxyWithTarget&amp;lt;ITestClass&amp;gt;(&lt;span class="kwrd"&gt;new&lt;/span&gt; TestClass(),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                                                                              &lt;span class="kwrd"&gt;new&lt;/span&gt; FailingRetryInterceptor());&lt;/pre&gt;

    &lt;pre class="alt"&gt;                    sut.TestMethod();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                });&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If you run this test it passes, which means we get the InvalidOperationException. This operation is perfectly legal in Spring while it’s not allowed in Castle, to investigate the issue I got the source code for DynamicProxy and looked at the implementation of the Proceed() method inside the AbstractInvocation class:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Proceed()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; (interceptors == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         &lt;span class="rem"&gt;// not yet fully initialized? probably, an intercepted method is called while we are being deserialized&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         InvokeMethodOnTarget();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;     execIndex++;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; (execIndex == interceptors.Length)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;         InvokeMethodOnTarget();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;     &lt;span class="kwrd"&gt;else&lt;/span&gt; &lt;span class="kwrd"&gt;if&lt;/span&gt; (execIndex &amp;gt; interceptors.Length)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;         &lt;span class="kwrd"&gt;string&lt;/span&gt; interceptorsCount;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (interceptors.Length &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;             interceptorsCount = &lt;span class="str"&gt;&amp;quot; each one of &amp;quot;&lt;/span&gt; + interceptors.Length + &lt;span class="str"&gt;&amp;quot; interceptors&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;         &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;             interceptorsCount = &lt;span class="str"&gt;&amp;quot; interceptor&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;         var message = &lt;span class="str"&gt;&amp;quot;This is a DynamicProxy2 error: invocation.Proceed() has been called more times than expected.&amp;quot;&lt;/span&gt; +&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;                       &lt;span class="str"&gt;&amp;quot;This usually signifies a bug in the calling code. Make sure that&amp;quot;&lt;/span&gt; + interceptorsCount +&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;                       &lt;span class="str"&gt;&amp;quot; selected for this method '&amp;quot;&lt;/span&gt; + Method + &lt;span class="str"&gt;&amp;quot;'&amp;quot;&lt;/span&gt; +&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;                       &lt;span class="str"&gt;&amp;quot;calls invocation.Proceed() at most once.&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;         &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; InvalidOperationException(message);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  34:&lt;/span&gt;     &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  36:&lt;/span&gt;         interceptors[execIndex].Intercept(&lt;span class="kwrd"&gt;this&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  37:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  38:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the implementation is pretty easy to understand why we cannot call the proceed more than one time per interceptor: if we do the we increment the execIndex outside the bound of the interceptors array.&lt;/p&gt;

&lt;p&gt;In my application I have full control over which interceptors get injected on each proxy, so a simple hack would be to allow me to reset the ‘execIndex’ variable to -1; doing this way the next time you call invocation.Proceed() from an interceptor the whole chain start from the beginning allowing you to recover and retry the operation.&lt;/p&gt;

&lt;p&gt;I don’t like to modify the library code, cause at every update I have to reapply the path again, the Hack here is to use some reflection and write an extension method for the IInvocation interface:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; IInvocationExtensions&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; FieldInfo _resetInvocationInterceptorsCall;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Reset(&lt;span class="kwrd"&gt;this&lt;/span&gt; IInvocation invocation)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (_resetInvocationInterceptorsCall == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            Type invoc = FindBaseType(invocation.GetType(), &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(AbstractInvocation));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (invoc == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="str"&gt;&amp;quot;IInvocationExtensions - Cannot find AbstractInvocation as base class.&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            _resetInvocationInterceptorsCall = invoc.GetField(&lt;span class="str"&gt;&amp;quot;execIndex&amp;quot;&lt;/span&gt;, BindingFlags.Instance |&lt;/pre&gt;

    &lt;pre class="alt"&gt;                                                                                              BindingFlags.NonPublic);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// reinitialize the index of execution, so when we call Proceed() again&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// the whole chain of interceptors start again from the first element&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        _resetInvocationInterceptorsCall.SetValue(invocation, -1);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; Type FindBaseType(Type src, Type lookingFor)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;while&lt;/span&gt; (!(src == &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(&lt;span class="kwrd"&gt;object&lt;/span&gt;)) &amp;amp;&amp;amp; (src != lookingFor))&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            src = src.BaseType;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (src == lookingFor)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; src;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can now update our test and write another interceptor that call the newly created Reset() method to allow us to recover and start the execution again:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; SuccessRetryInterceptor : IInterceptor&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="preproc"&gt;#region&lt;/span&gt; IInterceptor Members&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; firstcall = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Intercept(IInvocation invocation)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        invocation.Proceed();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (firstcall)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            {&lt;/pre&gt;

    &lt;pre class="alt"&gt;                firstcall = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// we want to call proceed multiple times to simulate maybe something&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// like retrying a connection to a database or a remote service&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// after having informed the user&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// we ask to reset the current call and start it again from the beginning of the&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// interceptors chain&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                invocation.Reset();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// let's try to call the proced again, we expect a big failure here cause the standard implementation does&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// not allow the proceed method to be called multiple times&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                invocation.Proceed();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// note that in this test we used the firstcall variable to stop the recursive calls&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// of this interceptor.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;[TestFixture]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; InterceptorsTest&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;readonly&lt;/span&gt; ProxyGenerator _generator = &lt;span class="kwrd"&gt;new&lt;/span&gt; ProxyGenerator();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [Test]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TestSuccessRetryInterceptor()&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        Assert.DoesNotThrow(() =&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            ITestClass sut = _generator.CreateInterfaceProxyWithTarget&amp;lt;ITestClass&amp;gt;(&lt;span class="kwrd"&gt;new&lt;/span&gt; TestClass(), &lt;span class="kwrd"&gt;new&lt;/span&gt; SuccessRetryInterceptor());&lt;/pre&gt;

    &lt;pre class="alt"&gt;            sut.TestMethod();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        });&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If you execute this test you can see that it passes and that the TestMethod() of the test class gets called two times.&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2010/01/CastleInterceptorsProceed.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="CastleInterceptorsProceed" border="0" alt="CastleInterceptorsProceed" src="/UserFiles/Guardian/2010/01/CastleInterceptorsProceed_thumb.png" width="604" height="228" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BEWARE!&lt;/strong&gt; This is a dangerous technique and you have to be absolutely aware of what you are doing, cause you are executing the whole interceptors’ chain from the beginning..so if some of your interceptors modify the data or perform some advanced operations you have to know exactly what they do in order to not alter/invalidate the data of your application.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-resolve-dependencies-existing-object-instance"&gt;Castle Windsor - resolve dependencies on an existing object instance&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/castle-dynamicproxy-dirty-trick-call-invocation-proceed-multiple-times-interceptor"&gt;&lt;strong&gt;More related document (7)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/castle-dynamicproxy-dirty-trick-call-invocation-proceed-multiple-times-interceptor</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/castle-dynamicproxy-dirty-trick-call-invocation-proceed-multiple-times-interceptor#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/castle-dynamicproxy-dirty-trick-call-invocation-proceed-multiple-times-interceptor</guid><pubDate>Tue, 19 Jan 2010 19:49:00 GMT</pubDate><category>Castle windsor</category><category>Dynamicproxy</category><category>Multiple</category><category>Proceed</category></item><item><title>DotNetMarche January Workshop - WPF, MVVM, UI</title><description>&lt;p&gt;If you live in Marche (Italy), get ready and don’t miss the next DotNetMarche workshop! Our local community group is working to setup the event. You can see the actual agenda and register for it at: &lt;a href="http://dotnetmarche.org/eventi/Default.aspx?IDevento=33"&gt;http://dotnetmarche.org/eventi/Default.aspx?IDevento=33&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;We will have an ‘all around’ event on WPF from a basic introduction to some advanced patterns for building application (MVVM and UI composition), plus - for those who last till the end - some nice features like 3D and Naturally User Interfaces. &lt;/p&gt;  &lt;p&gt;This time will also be a ‘cross-community’ event, the speakers will be:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a href="http://dotnetumbria.org/members/Andrea-Cruciani/default.aspx" target="_blank"&gt;Andrea Cruciani&lt;/a&gt;, from DotNetUmbria. &lt;/li&gt;    &lt;li&gt;&lt;a href="http://dotnetumbria.org/members/Paolo-Possanzini/default.aspx" target="_blank"&gt;Paolo Possanzini&lt;/a&gt;, from DotNetUmbria. &lt;/li&gt;    &lt;li&gt;&lt;a href="http://blogs.ugidotnet.org/topics/Default.aspx" target="_blank"&gt;Mauro Servienti&lt;/a&gt;, Microsoft MVP and member of UgiDotNet. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The event will take place on January 29; Time is running out, Go sign up now!&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET&lt;/a&gt; (03/09/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;&lt;strong&gt;More related document (23)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui</guid><pubDate>Tue, 12 Jan 2010 21:49:00 GMT</pubDate><category>Dotnetmarche</category><category>Workshop</category><category>Wpf</category></item><item><title>Optimizing WMI query performances - avoid the nasty ‘select *’</title><description>&lt;p&gt;These days I’m working to improve the startup time of an application my company develop, using some profiling tool you can easily isolate that functions that are eating up more time during the application startup.&lt;/p&gt;  &lt;p&gt;Aside the database connections, I’ve saw that our custom protection and registration system was consuming more or less 3 seconds (it varies each run in the range from 2.5 to 3.5 seconds) to generate a unique hash code for the machine on which the program is installed.&lt;/p&gt;  &lt;p&gt;The code internally uses some WMI queries to pickup system and hardware information, the first run was something like this:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2010/01/WMI_BeforeQueryOptimization.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="WMI_BeforeQueryOptimization" border="0" alt="WMI_BeforeQueryOptimization" src="/UserFiles/Guardian/2010/01/WMI_BeforeQueryOptimization_thumb.png" width="654" height="201" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;One of the functions that is used to generate part of the hash requires 2.6 seconds to run...which is unacceptable to gather some hardware information.&lt;/p&gt;  &lt;p&gt;All those functions basically use some WMI queries to get the data we need the implementation was something like:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;Friend&lt;/span&gt; &lt;span class="kwrd"&gt;Shared&lt;/span&gt; &lt;span class="kwrd"&gt;Function&lt;/span&gt; GetProcessorInfo() &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;       Using query1 &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;New&lt;/span&gt; ManagementObjectSearcher(&lt;span class="str"&gt;&amp;quot;SELECT * FROM Win32_Processor&amp;quot;&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;           Using queryCollection1 &lt;span class="kwrd"&gt;As&lt;/span&gt; ManagementObjectCollection = query1.&lt;span class="kwrd"&gt;Get&lt;/span&gt;()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;               &lt;span class="kwrd"&gt;Dim&lt;/span&gt; sb &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;New&lt;/span&gt; StringBuilder&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;               &lt;span class="kwrd"&gt;For&lt;/span&gt; &lt;span class="kwrd"&gt;Each&lt;/span&gt; mo &lt;span class="kwrd"&gt;As&lt;/span&gt; ManagementObject &lt;span class="kwrd"&gt;In&lt;/span&gt; queryCollection1&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;processorid&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;architecture&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;revision&amp;quot;&lt;/span&gt;))) &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;level&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;stepping&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;uniqueid&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;maxclockspeed&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                   sb.Append(Convert.ToString(mo(&lt;span class="str"&gt;&amp;quot;manufacturer&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                   &lt;span class="kwrd"&gt;Return&lt;/span&gt; sb.ToString&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;               &lt;span class="kwrd"&gt;Next&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;           &lt;span class="kwrd"&gt;End&lt;/span&gt; Using&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;       &lt;span class="kwrd"&gt;End&lt;/span&gt; Using&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;   &lt;span class="kwrd"&gt;End&lt;/span&gt; Function&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here you can see the source of all evil: in line 2 we ask the system to get EVERY information about the Processor and when we start enumeration the ManagementObjectCollection the WMI subsystem start gathering the data and populating the ManagementObject with all the information it can get regarding the Processors...even those we are not interested into. And this slows down everything in a terrible way.&lt;/p&gt;

&lt;p&gt;So, the first thing you have to do when dealing with WMI is to reduce to the minimum the information that are returned from each query. I modified all the queries we made to look like:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;Using query1 As New ManagementObjectSearcher(&lt;span class="str"&gt;&amp;quot;SELECT processorid,family,architecture,revision,level,stepping,uniqueid,maxclockspeed,manufacturer FROM Win32_Processor&amp;quot;&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Running again the profiler on the function we obtain:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2010/01/WMI_AfterQueryOptimization.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="WMI_AfterQueryOptimization" border="0" alt="WMI_AfterQueryOptimization" src="/UserFiles/Guardian/2010/01/WMI_AfterQueryOptimization_thumb.png" width="654" height="196" /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;As you can see the execution time was cut in half! and the GetProcessorInfo() function alone passed from 1043ms to 12ms. The only function we wasn’t able to improve specifying the fields to return was the one that deals with the Ethernet interfaces to get their MAC address.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/missing-net-performance-counters-solve"&gt;Missing .NET Performance Counters: how to solve it&lt;/a&gt; (10/07/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/optimizing-wmi-query-performances-avoid-nasty-select"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/optimizing-wmi-query-performances-avoid-nasty-select</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/optimizing-wmi-query-performances-avoid-nasty-select#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/optimizing-wmi-query-performances-avoid-nasty-select</guid><pubDate>Fri, 08 Jan 2010 21:41:00 GMT</pubDate><category>Performance</category><category>Select</category><category>Wmi</category></item><item><title>Linq to NHibernate: how to query on a property without setter</title><description>&lt;p&gt;Recently I’ve started to play with Linq to NHibernate and I have to say it work pretty well for the scenarios I’m facing. It also helped me to ‘re-learn’ some things on NHibernate I usually forget.&lt;/p&gt;  &lt;p&gt;Let’s consider the case in which we have a class that have some properties without setters, the usual way to map them is using the access=’field’ modifier and tell NHibernate to not use the property by the internal field of the implementation; you can then write your HQL queries on that field, here’s an example:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Class&lt;/span&gt; IDGEN&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;Private&lt;/span&gt; mID &lt;span class="kwrd"&gt;As&lt;/span&gt; Int64 = -1&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Overridable&lt;/span&gt; &lt;span class="kwrd"&gt;ReadOnly&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt; ID() &lt;span class="kwrd"&gt;As&lt;/span&gt; Int64&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;Get&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;Return&lt;/span&gt; mID&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Get&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;Private&lt;/span&gt; mYear &lt;span class="kwrd"&gt;As&lt;/span&gt; Int16&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Overridable&lt;/span&gt; &lt;span class="kwrd"&gt;ReadOnly&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt; Year() &lt;span class="kwrd"&gt;As&lt;/span&gt; Int16&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;Get&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;Return&lt;/span&gt; mYear&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Get&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;End&lt;/span&gt; Class&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here is the mapping I was used to have:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&amp;lt;?xml version=&lt;span class="str"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class="str"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;lt;hibernate-mapping xmlns=&lt;span class="str"&gt;&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;  &amp;lt;&lt;span class="kwrd"&gt;class&lt;/span&gt; name=&lt;span class="str"&gt;&amp;quot;Entities.IDGEN, CommunicationModule&amp;quot;&lt;/span&gt; table=&lt;span class="str"&gt;&amp;quot;tblPROTOCOL_ID_GENERATOR&amp;quot;&lt;/span&gt; lazy=&lt;span class="str"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &amp;lt;id name=&lt;span class="str"&gt;&amp;quot;mID&amp;quot;&lt;/span&gt; column=&lt;span class="str"&gt;&amp;quot;ID&amp;quot;&lt;/span&gt; type=&lt;span class="str"&gt;&amp;quot;Int64&amp;quot;&lt;/span&gt; access=&lt;span class="str"&gt;&amp;quot;field&amp;quot;&lt;/span&gt; unsaved-&lt;span class="kwrd"&gt;value&lt;/span&gt;=&lt;span class="str"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &amp;lt;generator &lt;span class="kwrd"&gt;class&lt;/span&gt;=&lt;span class="str"&gt;&amp;quot;native&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &amp;lt;/id&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &amp;lt;property name=&lt;span class="str"&gt;&amp;quot;mYear&amp;quot;&lt;/span&gt; column=&lt;span class="str"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt; type=&lt;span class="str"&gt;&amp;quot;Int16&amp;quot;&lt;/span&gt; access=&lt;span class="str"&gt;&amp;quot;field&amp;quot;&lt;/span&gt; insert=&lt;span class="str"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; update=&lt;span class="str"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;  &amp;lt;/&lt;span class="kwrd"&gt;class&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You see we refer to the internal implementation members and our HQL queries will look like:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;select max(id.mID) from IDGEN id &lt;span class="kwrd"&gt;where&lt;/span&gt; id.mYear = :year&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As an experiment I’m porting this code to use Linq to NHibernate, the link query I would like to write is this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;long&lt;/span&gt; idgen = Session.Linq&amp;lt;Idgen&amp;gt;().Where(i =&amp;gt; i.Year == year).Max(i =&amp;gt; i.ID);&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can easily see the problem here: in code I cannot refer to the private mYear or mID fields, so when the query translator tries to parse my expression I get a wonderful exception.&lt;/p&gt;

&lt;p&gt;How to make this work ? The answer is simple and built into NHibernate we can use Access and Naming strategies, look at &lt;a href="http://nhforge.org/doc/nh/en/index.html#mapping-declaration-property" target="_blank"&gt;'Chapter 5.1.9 property'&lt;/a&gt; of the NHibernate reference documentation.&lt;/p&gt;

&lt;p&gt;There you can see how to tell NHibernate to use the Getter of the properties to retrieve values from the class, and how the internal field is called so it can use that when assigning values to object.&lt;/p&gt;

&lt;p&gt;In the end it’s just a matter of writing the right mappings, with something like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&amp;lt;?xml version=&lt;span class="str"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class="str"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;lt;hibernate-mapping xmlns=&lt;span class="str"&gt;&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;  &amp;lt;&lt;span class="kwrd"&gt;class&lt;/span&gt; name=&lt;span class="str"&gt;&amp;quot;SID.Gestione.RefertiDocumenti.Neurologia.Entities.Idgen, SID.Gestione.RefertiDocumenti.Neurologia&amp;quot;&lt;/span&gt; table=&lt;span class="str"&gt;&amp;quot;IncrementalNumberGenerator&amp;quot;&lt;/span&gt; lazy=&lt;span class="str"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &amp;lt;id name=&lt;span class="str"&gt;&amp;quot;ID&amp;quot;&lt;/span&gt; column=&lt;span class="str"&gt;&amp;quot;ID&amp;quot;&lt;/span&gt; type=&lt;span class="str"&gt;&amp;quot;Int64&amp;quot;&lt;/span&gt; access=&lt;span class="str"&gt;&amp;quot;nosetter.pascalcase-m&amp;quot;&lt;/span&gt; unsaved-&lt;span class="kwrd"&gt;value&lt;/span&gt;=&lt;span class="str"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &amp;lt;generator &lt;span class="kwrd"&gt;class&lt;/span&gt;=&lt;span class="str"&gt;&amp;quot;native&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &amp;lt;/id&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &amp;lt;property name=&lt;span class="str"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt; column=&lt;span class="str"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt; access=&lt;span class="str"&gt;&amp;quot;nosetter.pascalcase-m&amp;quot;&lt;/span&gt; type=&lt;span class="str"&gt;&amp;quot;Int16&amp;quot;&lt;/span&gt; insert=&lt;span class="str"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; update=&lt;span class="str"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;  &amp;lt;/&lt;span class="kwrd"&gt;class&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;we are now able to make the former Linq query work. &lt;/p&gt;

&lt;p&gt;We now refer to the actual property of the class, we specify we don’t have setter and we use the pascalcase-m notation for the internal fields.&lt;/p&gt;

&lt;p&gt;So fixing all your previous mapping that used access=’field’ attribute to a more correct notation you can easily perform Linq queries on all your classes.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-linq-dynamic-filtering-lambda-expressions"&gt;NHibernate Linq provider: dynamic filtering using lambda expressions&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-3-extending-linq-provider-fix-notsupportedexception"&gt;NHibernate 3 - Extending the Linq Provider to fix some System.NotSupportedException&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-to-nhibernate-string.equals-with-stringcomparison-option"&gt;Linq to NHibernate - String.Equals with StringComparison option&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vsewss-solve-securityexception-access-denied-issue"&gt;VSeWSS: how to solve the ‘SecurityException: Access denied’ issue&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/linq-nhibernate-query-property-setter"&gt;&lt;strong&gt;More related document (22)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter</guid><pubDate>Tue, 22 Dec 2009 19:20:00 GMT</pubDate><category>Access</category><category>Field</category><category>Linq</category><category>Nhibernate</category><category>Nosetter</category><category>Setter</category></item><item><title>Silverlight / WCF: fixing the Custom WCF Proxy Generator</title><description>&lt;p&gt;Some days ago I blogged about how you can build your own Custom WCF Proxy generator to extend the classes it generates and add some validation logic (or whatever you like).&lt;/p&gt;  &lt;p&gt;Well playing with the MusicStore sample and making some changes to my domain classes there I’ve found a bug in the previous version of the proxy generator, let’s say your domain classes are like these:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;[DataContract]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;abstract&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; DomainObject&amp;lt;TKey&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [DataMember]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; TKey Id { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;[DataContract]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Album : DomainObject&amp;lt;&lt;span class="kwrd"&gt;int&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; Album()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        Tracks = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;Track&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;//[DataMember]&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;//public virtual int Id { get; set; }&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [DataMember]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Title { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [DataMember]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Author { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;...&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Not only plain objects, like I had before, but you have inheritance from different classes, actually the previous proxy generator was going to extend only the classes that directly inherited from object, so in the proxy generated in the Silverlight project you could find the added code only in the ‘DomainObjectOfInt’ generated class (the base of the hierarchy).&lt;/p&gt;

&lt;p&gt;To overcome this issue we have to modify the function FindAllProxyClasses() that identifies the proxy classes to extend, the new behavior will be like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; CodeTypeDeclarationCollection FindAllProxyClasses(CodeCompileUnit compileUnit)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   CodeTypeDeclarationCollection result = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeTypeDeclarationCollection();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;// search for all the proxy class (the one that inherits from ClientBase)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeNamespace ns &lt;span class="kwrd"&gt;in&lt;/span&gt; compileUnit.Namespaces)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeDeclaration type &lt;span class="kwrd"&gt;in&lt;/span&gt; ns.Types)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// does this type inherit from ClientBase?&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (type.IsClass &amp;amp;&amp;amp; type.IsPartial)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeReference baseType &lt;span class="kwrd"&gt;in&lt;/span&gt; type.BaseTypes)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            {&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="rem"&gt;// if (baseType.BaseType == &amp;quot;System.Object&amp;quot;)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                      &lt;span class="rem"&gt;// we need to take into account even model classes derived from other classes&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;if&lt;/span&gt; ((!IsInterface(baseType)) &amp;amp;&amp;amp;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                           (baseType.BaseType != &lt;span class="str"&gt;&amp;quot;System.ComponentModel.AsyncCompletedEventArgs&amp;quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;/pre&gt;

    &lt;pre class="alt"&gt;                          (!baseType.BaseType.Contains(&lt;span class="str"&gt;&amp;quot;System.ServiceModel.ClientBase&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               {&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  &lt;span class="rem"&gt;// we have found the proxy!&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  result.Add(type);&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               }&lt;/pre&gt;

    &lt;pre class="alt"&gt;            }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;return&lt;/span&gt; result;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This way we exclude from our list all the classes that are: interfaces, derive from AsyncCompletedEventArgs (arguments of async events), derive from ClientBase (the class that actually handles the calls to the web service).&lt;/p&gt;

&lt;p&gt;If you ask yourself why I had to write an IsInterface() function to check if a CodeTypeReference is an interface, the answer is: the framework already provides this information...but in an internal member of the class :(.&lt;/p&gt;

&lt;p&gt;Here is the full code of the fixed Custom WCF Proxy Generator:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;[GuidAttribute(&lt;span class="str"&gt;&amp;quot;64205D39-7D51-4c6d-8C0F-237E6FE2BD70&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; StructuraWcfProxyGenerator : WCFProxyGenerator&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CallCodeGeneratorExtensions(CodeCompileUnit compileUnit)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//todo: we can implement the mapping of validation attributes using an external xml file placed inside the current project&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;//      this way we can use the annotation objects even with wcf services&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//EnvDTE.DTE vs = (EnvDTE.DTE)this.ServiceProvider.GetService(typeof(EnvDTE.DTE));&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;//EnvDTE.Project prj = vs.SelectedItems.Item(1).ProjectItem.ContainingProject;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//System.Diagnostics.Debug.WriteLine(prj.FullName);&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.CallCodeGeneratorExtensions(compileUnit);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// find all classes that inherit from ClientBase (all proxies)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      var proxies = FindAllProxyClasses(compileUnit);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// add impersonation code to their constructors&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeDeclaration proxy &lt;span class="kwrd"&gt;in&lt;/span&gt; proxies)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         AddPartialMethods(proxy);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         AddValidationToProperties(proxy);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; CodeTypeDeclarationCollection FindAllProxyClasses(CodeCompileUnit compileUnit)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      CodeTypeDeclarationCollection result = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeTypeDeclarationCollection();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// search for all the proxy class (the one that inherits from ClientBase)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeNamespace ns &lt;span class="kwrd"&gt;in&lt;/span&gt; compileUnit.Namespaces)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeDeclaration type &lt;span class="kwrd"&gt;in&lt;/span&gt; ns.Types)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// does this type inherit from ClientBase?&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (type.IsClass &amp;amp;&amp;amp; type.IsPartial)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeReference baseType &lt;span class="kwrd"&gt;in&lt;/span&gt; type.BaseTypes)&lt;/pre&gt;

    &lt;pre class="alt"&gt;               {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="rem"&gt;// if (baseType.BaseType == &amp;quot;System.Object&amp;quot;)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                         &lt;span class="rem"&gt;// we need to take into account even model classes derived from other classes&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;if&lt;/span&gt; ((!IsInterface(baseType)) &amp;amp;&amp;amp;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                              (baseType.BaseType != &lt;span class="str"&gt;&amp;quot;System.ComponentModel.AsyncCompletedEventArgs&amp;quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;                             (!baseType.BaseType.Contains(&lt;span class="str"&gt;&amp;quot;System.ServiceModel.ClientBase&amp;quot;&lt;/span&gt;)))&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                     &lt;span class="rem"&gt;// we have found the proxy!&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                     result.Add(type);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                     &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               }&lt;/pre&gt;

    &lt;pre class="alt"&gt;            }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; result;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsInterface(CodeTypeReference reference)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// try to create the type and see if it's an interface&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;try&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; Type.GetType(reference.BaseType).IsInterface;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;catch&lt;/span&gt; (Exception)&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; AddPartialMethods(CodeTypeDeclaration type)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      IVsSingleFileGenerator ivs = (IVsSingleFileGenerator)&lt;span class="kwrd"&gt;this&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// ugly, but it's the only way I found to identify the language used&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;string&lt;/span&gt; ext;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      ivs.DefaultExtension(&lt;span class="kwrd"&gt;out&lt;/span&gt; ext);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      CodeSnippetTypeMember literalMember;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (ext.Contains(&lt;span class="str"&gt;&amp;quot;cs&amp;quot;&lt;/span&gt;))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="rem"&gt;// csharp&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         literalMember = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeSnippetTypeMember(&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="str"&gt;&amp;quot;partial void ValidateProperty(string propertyName, object value);&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="rem"&gt;// vb &lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         literalMember = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeSnippetTypeMember(&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="str"&gt;&amp;quot;Partial Sub ValidateProperty(byval propertyName as String, byval value as Object)&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      type.Members.Add(literalMember);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// the codedom do not support partial methods yet&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//CodeMemberMethod MyMethod = new CodeMemberMethod();&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;//MyMethod.Name = &amp;quot;ValidateProperty&amp;quot;;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//MyMethod.ReturnType = new CodeTypeReference(&amp;quot;partial void&amp;quot;);&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;//MyMethod.Attributes = MemberAttributes.ScopeMask;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//MyMethod.Parameters.Add(new CodeParameterDeclarationExpression(&amp;quot;System.String&amp;quot;, &amp;quot;propertyName&amp;quot;));&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;//MyMethod.Parameters.Add(new CodeParameterDeclarationExpression(&amp;quot;System.Object&amp;quot;, &amp;quot;value&amp;quot;));&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//type.Members.Add(MyMethod);&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; AddValidationToProperties(CodeTypeDeclaration type)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeMember member &lt;span class="kwrd"&gt;in&lt;/span&gt; type.Members)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         CodeMemberProperty ctor = member &lt;span class="kwrd"&gt;as&lt;/span&gt; CodeMemberProperty;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (ctor != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// create a code statement like:&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// this.ValidateProperty(&amp;quot;Title&amp;quot;, value)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            CodeMethodInvokeExpression method = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeMethodInvokeExpression(&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeThisReferenceExpression(),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="str"&gt;&amp;quot;ValidateProperty&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeExpression[] { &lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;new&lt;/span&gt; CodePrimitiveExpression(ctor.Name), &lt;/pre&gt;

    &lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;new&lt;/span&gt; CodePropertySetValueReferenceExpression() &lt;/pre&gt;

    &lt;pre class="alteven"&gt;               });&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// we got a constructor&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            ctor.SetStatements.Insert(0, &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeExpressionStatement(method));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can take this code and replace the old version in my previous post, regenerate your proxies and voila...you have the validation code spammed on all your new proxy class hierarchy.&lt;/p&gt;

&lt;p&gt;With some more customization you can easily buildup a code generator that closely resembles the one provided by the new RIA services without any modification to you current up and running WCF services.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation"&gt;Silverlight / WCF : Writing your own Custom WCF Proxy Generator to support validation&lt;/a&gt; (12/09/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity"&gt;NHibernate.Envers - Customize the Revision Entity&lt;/a&gt; (08/05/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery"&gt;Passing JSON serialized objects to a WCF service with jQuery&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization"&gt;JQuery, WCF and the JSON DateTime serialization&lt;/a&gt; (03/04/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-wcf-fixing-custom-wcf-proxy-generator"&gt;&lt;strong&gt;More related document (49)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator</guid><pubDate>Wed, 16 Dec 2009 21:05:00 GMT</pubDate><category>Custom</category><category>Generator</category><category>Proxy</category><category>Silverlight</category><category>Wcf</category></item><item><title>Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop</title><description>For all my Italian readers (especially all that reside in Marche) these are the last few days to sign up and participate at our last workshop of the year.&lt;br /&gt;&lt;br /&gt;To sign-up visit the DotNetMarche website: &lt;a href="http://www.dotnetmarche.org" target="_blank"&gt;www.dotnetmarche.org&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The technical sessions will be devoted to the technologies you can use TODAY to write a web application, focusing especially on the UI.&lt;br /&gt;&lt;br /&gt;We decided to create our own MusicStore sample and build it ground-up with 3 different technologies: Asp.Net classic / Asp.Net MVC + jQuery / Silverlight 3.&lt;br /&gt;&lt;br /&gt;The Silverlight version of MusicStore will also use the following technologies:
&lt;ul&gt;
	&lt;li&gt;The server side components will use a SQL Express + NHiberante for the data access layer&lt;/li&gt;
	&lt;li&gt;WCF service / HTTP handler : this is the ‘data provider’ of the application to deal with the database and upload files&lt;/li&gt;
	&lt;li&gt;Silverlight 3 for the UI.&lt;/li&gt;
&lt;/ul&gt;
We will focus on some feature related to UI building (and patterns if we have time), I’ll show you how to use:
&lt;ul&gt;
	&lt;li&gt;Data binding - for displaying and acquiring data&lt;/li&gt;
	&lt;li&gt;Validation - how you can do preventive validation on the UI&lt;/li&gt;
	&lt;li&gt;Control Temples - to skin and change the appearance of control without touching the code&lt;/li&gt;
&lt;/ul&gt;
Here are some screenshots of the working application:

&lt;a href="/UserFiles/Guardian/2009/12/MusicStore1.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="MusicStore1" src="/UserFiles/Guardian/2009/12/MusicStore1_thumb.png" border="0" alt="MusicStore1" width="312" height="254" /&gt;&lt;/a&gt; &lt;a href="/UserFiles/Guardian/2009/12/MusicStore2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="MusicStore2" src="/UserFiles/Guardian/2009/12/MusicStore2_thumb.png" border="0" alt="MusicStore2" width="297" height="254" /&gt;&lt;/a&gt;

Why Silverlight 3 and not Silverlight 4 ? well as I said before I wanted to show you how you can resolve some problems related to building business application with the technologies you have today. If you have to write something that MUST work and be deployed to a production environment in the next 3-4 months, you cannot rely on software that is still in beta stage, you cannot ask to your customers to install an alpha or beta version or a core component like the SL runtime.&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/ready-upcoming-dotnetmarche-workshop-july-16"&gt;Are you ready for the upcoming DotNetMarche workshop on July 16 ?&lt;/a&gt; (07/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;&lt;strong&gt;More related document (49)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop</guid><pubDate>Tue, 15 Dec 2009 00:59:00 GMT</pubDate><category>Dotnetmarche</category><category>Silverlight</category><category>Workshop</category></item><item><title>Silverlight: how to fix the Silverlight Toolkit templates to add Validation States</title><description>&lt;p&gt;Using the control templates provided by the Silverlight toolkit I just noticed that those style do not support the validation states for displaying validation errors.&lt;/p&gt;  &lt;p&gt;Since you have access to the templates adding them is a quite easy - but boring - job. First of we need to open the template of the standard controls and extract the pieces related to data validation display, then we can modify the provided templates inserting these pieces of code back. We can do this so easily because of the nice way the controls skins work in Silverlight and WPF (there are plenty of resources over the net on this subject so I will not dig into that) and thanks to the Visual State Manager that handles the display state changes without any logic to be added to the control, this link from Jesse Liberty gives a clear picture of the thing: &lt;a href="http://blogs.silverlight.net/blogs/jesseliberty/archive/2009/07/18/what-s-new-in-silverlight-3-validation.aspx" target="_blank"&gt;Quick overview of Silverlight validation&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;In short to modify the - let’s say - the Textbox template you just have to:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Look for the VisualStateManage.VisualStateGroups section of the template and add a VisualStateGroup with the following states in it: &lt;strong&gt;Valid&lt;/strong&gt;, &lt;strong&gt;InvalidUnfocused&lt;/strong&gt;, &lt;strong&gt;InvalidFocused&lt;/strong&gt;. All the data validation framewrok relies on the presence of these 3 states do change the appearance of the control:       &lt;br /&gt;      &lt;div class="csharpcode-wrapper"&gt;       &lt;div class="csharpcode"&gt;         &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;VisualStateGroup&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ValidationStates&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;VisualState&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Valid&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;VisualState&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;InvalidUnfocused&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Storyboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ValidationErrorElement&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetProperty&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Visibility&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt; &lt;span class="attr"&gt;KeyTime&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Visibility&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Visible&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Visibility&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Storyboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;VisualState&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;VisualState&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;InvalidFocused&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Storyboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ValidationErrorElement&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetProperty&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Visibility&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt; &lt;span class="attr"&gt;KeyTime&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Visibility&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Visible&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Visibility&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;validationTooltip&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetProperty&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IsOpen&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt; &lt;span class="attr"&gt;KeyTime&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;System:Boolean&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;System:Boolean&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Storyboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;VisualState&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;VisualStateGroup&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;These states operate on some framework elements (validationErrorElement and validationErrorToolTip) so we have to add those too, so at the end of the control template - just before the closing &amp;lt;/Grid&amp;gt; tag - add the following piece of code: 
    &lt;br /&gt;

    &lt;div class="csharpcode-wrapper"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Border&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ValidationErrorElement&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Visibility&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Collapsed&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;BorderBrush&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;#FFDB000C&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;BorderThickness&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;CornerRadius&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ToolTipService.ToolTip&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ToolTip&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;validationTooltip&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;DataContext&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding RelativeSource={RelativeSource TemplatedParent}}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Template&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{StaticResource ValidationToolTipTemplate}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Placement&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Right&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;PlacementTarget&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding RelativeSource={RelativeSource TemplatedParent}}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ToolTip.Triggers&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;EventTrigger&lt;/span&gt; &lt;span class="attr"&gt;RoutedEvent&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Canvas.Loaded&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;BeginStoryboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Storyboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;validationTooltip&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Storyboard&lt;/span&gt;.&lt;span class="attr"&gt;TargetProperty&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IsHitTestVisible&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;                        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt; &lt;span class="attr"&gt;KeyTime&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                           &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;                              &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;System:Boolean&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;System:Boolean&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                           &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;                        &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;                     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Storyboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;BeginStoryboard&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;EventTrigger&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ToolTip.Triggers&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ToolTip&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ToolTipService.ToolTip&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;12&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Right&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1,-4,-4,0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Top&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;12&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Background&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Transparent&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Path&lt;/span&gt; &lt;span class="attr"&gt;Fill&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;#FFDC000C&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1,3,0,0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Data&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Path&lt;/span&gt; &lt;span class="attr"&gt;Fill&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;#ffffff&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1,3,0,0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Data&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;M 0,0 L2,0 L 8,6 L8,8&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Border&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You must add this after all the other framework element to be sure that when enabled those controls are displayed over any other element that form the template.&lt;/p&gt;

&lt;p&gt;This way you have standard way to display the validation error messages in your templated control. Actually you can use these pieces of codes in you own controls to give them the same look and feel. Also rewriting these pieces of code and applying them to the controls you can totally change the way validation error messages are shown.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed"&gt;WPF: force all the validation rules attached to an object to be executed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wp7-adding-fade-black-effect-listbox"&gt;WP7 - adding a ‘Fade to Black’ effect to a ListBox&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-available"&gt;Silverlight 2 RC0 Available&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-fix-silverlight-toolkit-templates-add-validation-states"&gt;&lt;strong&gt;More related document (43)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-fix-silverlight-toolkit-templates-add-validation-states</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-fix-silverlight-toolkit-templates-add-validation-states#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-fix-silverlight-toolkit-templates-add-validation-states</guid><pubDate>Sat, 12 Dec 2009 20:10:00 GMT</pubDate><category>Silverlight</category><category>Style</category><category>Template</category><category>Toolkit</category><category>Validation</category></item><item><title>Silverlight / WCF : Writing your own Custom WCF Proxy Generator to support validation</title><description>Working on the data validation section of different projects in Silverlight we usually have to face the standard problem: basically in Silverlight 3 the data validation framework relies on exceptions thrown in the setter of objects properties.&lt;br /&gt;&lt;br /&gt;In a real-world application our data will surely come from a Web Service (we are not using RIA Services yet), if we do not have control over the service itself we are forced to use the proxy classes generated by svcutil or Visual Studio as part of our domain model.&lt;br /&gt;&lt;br /&gt;The main problem is we do not have huge control over the classes that are generated by the standard WCF Proxy Generator that Visual Studio provide, and the classes it generates are pretty simple (they only support the INotifyPropertyChanged interface).&lt;br /&gt;&lt;br /&gt;Using the RIA services framework can help solving the validation problem because the proxy classes it generate have a richer set of functionalities built in.&lt;br /&gt;&lt;br /&gt;However if we are stuck with plain WCF services we have several ways to overcome this problem and add validation logic (or any other business logic) to these classes.&lt;br /&gt;&lt;br /&gt;One of the possible approach (not the simplest one I have to admit) is to write you own WCF Proxy Class Generator and alter the code that the standard generator provide; I had this idea looking at this post that explains the basis of customizing the generator: &lt;a href="http://blogs.msdn.com/pedram/archive/2007/08/10/customising-wcf-proxy-generation-in-visual-studio-2008.aspx"&gt;Customizing WCF Proxy Generation in Visual Studio 2008&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;For a first implementation we want to be able to generate a class like this:
&lt;div id="codeSnippetWrapper" class="csharpcode-wrapper"&gt;
&lt;div id="codeSnippet" class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span id="lnum1" class="lnum"&gt;   1:&lt;/span&gt; [System.Diagnostics.DebuggerStepThroughAttribute()]&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum2" class="lnum"&gt;   2:&lt;/span&gt; [System.CodeDom.Compiler.GeneratedCodeAttribute(&lt;span class="str"&gt;"System.Runtime.Serialization"&lt;/span&gt;, &lt;span class="str"&gt;"3.0.0.0"&lt;/span&gt;)]&lt;/pre&gt;
&lt;code&gt;&lt;/code&gt;
&lt;pre class="alt"&gt;&lt;span id="lnum3" class="lnum"&gt;   3:&lt;/span&gt; [System.Runtime.Serialization.DataContractAttribute(Name=&lt;span class="str"&gt;"CompositeType"&lt;/span&gt;, Namespace=&lt;span class="str"&gt;"http://schemas.datacontract.org/2004/07/MusicStore.WebService"&lt;/span&gt;)]&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum4" class="lnum"&gt;   4:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; CompositeType : &lt;span class="kwrd"&gt;object&lt;/span&gt;, System.ComponentModel.INotifyPropertyChanged {&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum5" class="lnum"&gt;   5:&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum6" class="lnum"&gt;   6:&lt;/span&gt;     &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; BoolValueField;&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum7" class="lnum"&gt;   7:&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum8" class="lnum"&gt;   8:&lt;/span&gt;     &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; StringValueField;&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum9" class="lnum"&gt;   9:&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum10" class="lnum"&gt;  10:&lt;/span&gt;     &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; ValidateProperty(&lt;span class="kwrd"&gt;string&lt;/span&gt; propertyName, &lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum11" class="lnum"&gt;  11:&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum12" class="lnum"&gt;  12:&lt;/span&gt;     [System.Runtime.Serialization.DataMemberAttribute()]&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum13" class="lnum"&gt;  13:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; BoolValue {&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum14" class="lnum"&gt;  14:&lt;/span&gt;         get {&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum15" class="lnum"&gt;  15:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;this&lt;/span&gt;.BoolValueField;&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum16" class="lnum"&gt;  16:&lt;/span&gt;         }&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum17" class="lnum"&gt;  17:&lt;/span&gt;         set {&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum18" class="lnum"&gt;  18:&lt;/span&gt;             &lt;span class="kwrd"&gt;this&lt;/span&gt;.ValidateProperty(&lt;span class="str"&gt;"BoolValue"&lt;/span&gt;, &lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum19" class="lnum"&gt;  19:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; ((&lt;span class="kwrd"&gt;this&lt;/span&gt;.BoolValueField.Equals(&lt;span class="kwrd"&gt;value&lt;/span&gt;) != &lt;span class="kwrd"&gt;true&lt;/span&gt;)) {&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum20" class="lnum"&gt;  20:&lt;/span&gt;                 &lt;span class="kwrd"&gt;this&lt;/span&gt;.BoolValueField = &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum21" class="lnum"&gt;  21:&lt;/span&gt;                 &lt;span class="kwrd"&gt;this&lt;/span&gt;.RaisePropertyChanged(&lt;span class="str"&gt;"BoolValue"&lt;/span&gt;);&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum22" class="lnum"&gt;  22:&lt;/span&gt;             }&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum23" class="lnum"&gt;  23:&lt;/span&gt;         }&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span id="lnum24" class="lnum"&gt;  24:&lt;/span&gt;     }&lt;/pre&gt;

&lt;pre class="alt"&gt;&lt;span id="lnum25" class="lnum"&gt;  25:&lt;/span&gt;     ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
The key points here are lines 10 and 18: we ‘declare’ a partial method and we use it to validate the property value before assigning it. Partial methods are very useful especially for code generators and designers, because if you do not provide an implementation in a partial class they are removed at compile time (that is the method declaration and its usage disappear).&lt;br /&gt;&lt;br /&gt;We chose this approach to leave you the freedom to implement the validation rules the way you like most.&lt;br /&gt;&lt;br /&gt;To extend the WCF Proxy Generator we basically have to inherit from the WCFProxyGenerator class and override the CallCodeGeneratorExtensions(CodeCompileUnit compileUnit), here we have access to the CodeDom representation of the class that was generated, we can then inspect it looking for the business entity classes (those that directly inherit from object) and, playing with the CodeDom classes, modify them adding the partial method declaration and the method call:
&lt;div id="codeSnippetWrapper" class="csharpcode-wrapper"&gt;
&lt;div id="codeSnippet" class="csharpcode"&gt;
&lt;pre class="alt"&gt;[GuidAttribute(&lt;span class="str"&gt;"64205D39-7D51-4c6d-8C0F-237E6FE2BD70"&lt;/span&gt;)]&lt;/pre&gt;

&lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; StructuraWcfProxyGenerator : WCFProxyGenerator&lt;/pre&gt;

&lt;pre class="alt"&gt;{&lt;/pre&gt;

&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CallCodeGeneratorExtensions(CodeCompileUnit compileUnit)&lt;/pre&gt;

&lt;pre class="alt"&gt;   {&lt;/pre&gt;

&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.CallCodeGeneratorExtensions(compileUnit);&lt;/pre&gt;



&lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// find all classes that inherit from ClientBase (all proxies)&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;      var proxies = FindAllProxyClasses(compileUnit);&lt;/pre&gt;

&lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// add impersonation code to their constructors&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeDeclaration proxy &lt;span class="kwrd"&gt;in&lt;/span&gt; proxies)&lt;/pre&gt;

&lt;pre class="alteven"&gt;      {&lt;/pre&gt;

&lt;pre class="alt"&gt;         AddPartialMethods(proxy);&lt;/pre&gt;

&lt;pre class="alteven"&gt;         AddValidationToProperties(proxy);&lt;/pre&gt;

&lt;pre class="alt"&gt;      }&lt;/pre&gt;

&lt;pre class="alteven"&gt;   }&lt;/pre&gt;



&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; CodeTypeDeclarationCollection FindAllProxyClasses(CodeCompileUnit compileUnit)&lt;/pre&gt;

&lt;pre class="alt"&gt;   {&lt;/pre&gt;

&lt;pre class="alteven"&gt;      CodeTypeDeclarationCollection result = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeTypeDeclarationCollection();&lt;/pre&gt;



&lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// search for all the proxy class (the one that inherits from ClientBase)&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeNamespace ns &lt;span class="kwrd"&gt;in&lt;/span&gt; compileUnit.Namespaces)&lt;/pre&gt;

&lt;pre class="alteven"&gt;      {&lt;/pre&gt;

&lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeDeclaration type &lt;span class="kwrd"&gt;in&lt;/span&gt; ns.Types)&lt;/pre&gt;

&lt;pre class="alteven"&gt;         {&lt;/pre&gt;

&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// does this type inherit from ClientBase?&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (type.IsClass &amp;amp;&amp;amp; type.IsPartial)&lt;/pre&gt;

&lt;pre class="alt"&gt;            {&lt;/pre&gt;

&lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeReference baseType &lt;span class="kwrd"&gt;in&lt;/span&gt; type.BaseTypes)&lt;/pre&gt;

&lt;pre class="alt"&gt;               {&lt;/pre&gt;

&lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;if&lt;/span&gt; (baseType.BaseType == &lt;span class="str"&gt;"System.Object"&lt;/span&gt;)&lt;/pre&gt;

&lt;pre class="alt"&gt;                  {&lt;/pre&gt;

&lt;pre class="alteven"&gt;                     &lt;span class="rem"&gt;// we have found the proxy!&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;                     result.Add(type);&lt;/pre&gt;

&lt;pre class="alteven"&gt;                     &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

&lt;pre class="alt"&gt;                  }&lt;/pre&gt;

&lt;pre class="alteven"&gt;               }&lt;/pre&gt;

&lt;pre class="alt"&gt;            }&lt;/pre&gt;

&lt;pre class="alteven"&gt;         }&lt;/pre&gt;

&lt;pre class="alt"&gt;      }&lt;/pre&gt;

&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; result;&lt;/pre&gt;

&lt;pre class="alt"&gt;   }&lt;/pre&gt;



&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; AddPartialMethods(CodeTypeDeclaration type)&lt;/pre&gt;

&lt;pre class="alteven"&gt;   {&lt;/pre&gt;

&lt;pre class="alt"&gt;      IVsSingleFileGenerator ivs = (IVsSingleFileGenerator)&lt;span class="kwrd"&gt;this&lt;/span&gt;;&lt;/pre&gt;

&lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// ugly, but it's the only way I found to identify the language used&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;string&lt;/span&gt; ext;&lt;/pre&gt;

&lt;pre class="alteven"&gt;      ivs.DefaultExtension(&lt;span class="kwrd"&gt;out&lt;/span&gt; ext);&lt;/pre&gt;

&lt;pre class="alt"&gt;      CodeSnippetTypeMember literalMember;&lt;/pre&gt;

&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (ext.Contains(&lt;span class="str"&gt;"cs"&lt;/span&gt;))&lt;/pre&gt;

&lt;pre class="alt"&gt;      {&lt;/pre&gt;

&lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// csharp&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;         literalMember = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeSnippetTypeMember(&lt;/pre&gt;

&lt;pre class="alteven"&gt;            &lt;span class="str"&gt;"partial void ValidateProperty(string propertyName, object value);"&lt;/span&gt;);&lt;/pre&gt;

&lt;pre class="alt"&gt;      }&lt;/pre&gt;

&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;      {&lt;/pre&gt;

&lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// vb &lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;         literalMember = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeSnippetTypeMember(&lt;/pre&gt;

&lt;pre class="alteven"&gt;            &lt;span class="str"&gt;"Partial Sub ValidateProperty(byval propertyName as String, byval value as Object)"&lt;/span&gt;);&lt;/pre&gt;

&lt;pre class="alt"&gt;      }&lt;/pre&gt;

&lt;pre class="alteven"&gt;      type.Members.Add(literalMember);&lt;/pre&gt;

&lt;pre class="alt"&gt;   }&lt;/pre&gt;



&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; AddValidationToProperties(CodeTypeDeclaration type)&lt;/pre&gt;

&lt;pre class="alteven"&gt;   {&lt;/pre&gt;

&lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (CodeTypeMember member &lt;span class="kwrd"&gt;in&lt;/span&gt; type.Members)&lt;/pre&gt;

&lt;pre class="alteven"&gt;      {&lt;/pre&gt;

&lt;pre class="alt"&gt;         CodeMemberProperty ctor = member &lt;span class="kwrd"&gt;as&lt;/span&gt; CodeMemberProperty;&lt;/pre&gt;

&lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (ctor != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

&lt;pre class="alt"&gt;         {&lt;/pre&gt;

&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// create a code statement like:&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// this.ValidateProperty("Title", value)&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alteven"&gt;            CodeMethodInvokeExpression method = &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeMethodInvokeExpression(&lt;/pre&gt;

&lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeThisReferenceExpression(),&lt;/pre&gt;

&lt;pre class="alteven"&gt;                &lt;span class="str"&gt;"ValidateProperty"&lt;/span&gt;,&lt;/pre&gt;

&lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeExpression[] {&lt;/pre&gt;

&lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;new&lt;/span&gt; CodePrimitiveExpression(ctor.Name),&lt;/pre&gt;

&lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;new&lt;/span&gt; CodePropertySetValueReferenceExpression()&lt;/pre&gt;

&lt;pre class="alteven"&gt;               });&lt;/pre&gt;



&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// we got a constructor&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alt"&gt;            ctor.SetStatements.Insert(0, &lt;span class="kwrd"&gt;new&lt;/span&gt; CodeExpressionStatement(method));&lt;/pre&gt;

&lt;pre class="alteven"&gt;         }&lt;/pre&gt;

&lt;pre class="alt"&gt;      }&lt;/pre&gt;

&lt;pre class="alteven"&gt;   }&lt;/pre&gt;

&lt;pre class="alt"&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
The tricky part here is the AddPartialMethods() function: the CodeDom do not have support for partial methods so, we have to provide the full string with the method signature.&lt;br /&gt;&lt;br /&gt;To use this extension you have to do 4 things:

1- compile the project and deploy the signed assembly to the GAC

2- double click the attached .reg file to register the extension in Visual Studio 2008

3- add a Service Reference to your project

4- navigate to the Reference.svcmap file and change the custom tool to use the brand new ‘Structura WCF Proxy Generator’ (the name must match the keys added in the reg file), optionally rerun the tool.&lt;br /&gt;&lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/12/WCFProxyGeneratorCustomTool.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="WCFProxyGeneratorCustomTool" src="/UserFiles/Guardian/2009/12/WCFProxyGeneratorCustomTool_thumb.png" border="0" alt="WCFProxyGeneratorCustomTool" width="236" height="244" /&gt;&lt;/a&gt;

Then you can just implement the partial method in your partial class to throw an exception in the setter if the value violate your client-side validation rule, this way you get the standard validation framework to work with proxy generated classes:
&lt;div id="codeSnippetWrapper" class="csharpcode-wrapper"&gt;
&lt;div id="codeSnippet" class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Album&lt;/pre&gt;

&lt;pre class="alteven"&gt;  {&lt;/pre&gt;

&lt;pre class="alt"&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; &lt;span class="str"&gt;"exception validation methods"&lt;/span&gt;&lt;/pre&gt;



&lt;pre class="alt"&gt;     &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; ValidateProperty(&lt;span class="kwrd"&gt;string&lt;/span&gt; propertyName, &lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

&lt;pre class="alteven"&gt;     {&lt;/pre&gt;

&lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// Validator.ValidateProperty(value, new ValidationContext(this, null, null) { MemberName = propertyName });&lt;/span&gt;&lt;/pre&gt;

&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;switch&lt;/span&gt; (propertyName)&lt;/pre&gt;

&lt;pre class="alt"&gt;        {&lt;/pre&gt;

&lt;pre class="alteven"&gt;           &lt;span class="kwrd"&gt;case&lt;/span&gt; &lt;span class="str"&gt;"Title"&lt;/span&gt;:&lt;/pre&gt;

&lt;pre class="alt"&gt;              &lt;span class="kwrd"&gt;if&lt;/span&gt; (!ValidateTitle(&lt;span class="kwrd"&gt;value&lt;/span&gt;))&lt;/pre&gt;

&lt;pre class="alteven"&gt;                 &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; SystemException(&lt;span class="str"&gt;"The field is Required"&lt;/span&gt;);&lt;/pre&gt;

&lt;pre class="alt"&gt;              &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

&lt;pre class="alteven"&gt;           &lt;span class="kwrd"&gt;case&lt;/span&gt; &lt;span class="str"&gt;"PublicationDate"&lt;/span&gt;:&lt;/pre&gt;

&lt;pre class="alt"&gt;              &lt;span class="kwrd"&gt;if&lt;/span&gt; (!ValidatePublicationDate(&lt;span class="kwrd"&gt;value&lt;/span&gt;))&lt;/pre&gt;

&lt;pre class="alteven"&gt;                 &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; SystemException(&lt;span class="str"&gt;"Invalid date (must be &amp;gt; 1900)"&lt;/span&gt;);&lt;/pre&gt;

&lt;pre class="alt"&gt;              &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

&lt;pre class="alteven"&gt;        }&lt;/pre&gt;

&lt;pre class="alt"&gt;     }&lt;/pre&gt;

&lt;pre class="alteven"&gt;...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
This isn’t the cleanest solution in the world, but we can easily use this project as a base to add the full support for validation using the new data annotations.&lt;br /&gt;&lt;br /&gt;Side note: if you want to create your own custom WCF Proxy Generator you need the reference to some assemblies related to visual studio that are actually deployed in the GAC, I haven’t found any way to add them using the Visual Studio designers and I had to edit the project file in the Notepad and add the following references manually:
&lt;div id="codeSnippetWrapper" class="csharpcode-wrapper"&gt;
&lt;div id="codeSnippet" class="csharpcode"&gt;
&lt;pre class="alt"&gt;&amp;lt;Reference Include=&lt;span class="str"&gt;"envdte, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&amp;lt;Reference Include=&lt;span class="str"&gt;"Microsoft.VisualStudio.Editors, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&amp;lt;Reference Include=&lt;span class="str"&gt;"Microsoft.VisualStudio.OLE.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&amp;lt;Reference Include=&lt;span class="str"&gt;"Microsoft.VisualStudio.Shell.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&amp;lt;Reference Include=&lt;span class="str"&gt;"Microsoft.VisualStudio.Shell.Interop.8.0, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
Sample project:
&lt;div id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:31e45a1f-bf43-4dcb-aead-e3c8d19a29f8" class="wlWriterEditableSmartContent" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;div&gt;&lt;a href="/UserFiles/Guardian/2009/12/Structura.WCF_.StructuraWcfProxyGenerator.zip" target="_self"&gt;Structura.WCF.StructuraWcfProxyGenerator.zip&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator"&gt;Silverlight / WCF: fixing the Custom WCF Proxy Generator&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity"&gt;NHibernate.Envers - Customize the Revision Entity&lt;/a&gt; (08/05/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery"&gt;Passing JSON serialized objects to a WCF service with jQuery&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization"&gt;JQuery, WCF and the JSON DateTime serialization&lt;/a&gt; (03/04/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation"&gt;&lt;strong&gt;More related document (49)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation</guid><pubDate>Wed, 09 Dec 2009 21:14:00 GMT</pubDate><category>Custom</category><category>Generator</category><category>Proxy</category><category>Silverlight</category><category>Wcf</category></item><item><title>Silverlight and the AG_E_NETWORK_ERROR - a thrilling story!</title><description>&lt;p&gt;Working on the MusicStore project for the next DotNetMarche workshop I had the following scenario:&lt;/p&gt;  &lt;p&gt;- A Web Service used to provide some data and images to the application.&lt;/p&gt;  &lt;p&gt;- A Silverlight application (on a different website) that consumes the data and the images binding some absolute urls to Silverlight’s image controls.&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;here Image contains an absolute uri like: &amp;quot;http://localhost.:50671/Images/1.jpg&amp;quot;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Image&lt;/span&gt; &lt;span class="attr"&gt;Source&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Image}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The whole thing is pretty simple and easy to setup and I expected it work at the first run...and I was very surprised when it did not. I did these things often in the past and I am pretty sure that downloading an image is an allowed operation (even without a client access policy).&lt;/p&gt;

&lt;p&gt;No errors were reported, nothing on my logs, no binding errors. So I started investigate and I opened up Fiddler to track what’s happening on the wire, I modified the addresses of any request I wanted to analyze to add a ‘.’ after the localhost keyword (otherwise Fiddler won’t track them and here are the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/12/AG_E_NETWORK_ERROR1.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="AG_E_NETWORK_ERROR1" border="0" alt="AG_E_NETWORK_ERROR1" src="/UserFiles/Guardian/2009/12/AG_E_NETWORK_ERROR1_thumb.png" width="458" height="142" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can see the request to the policy file and the request at the web service to gather some data, but...nothing about the images that should be downloaded after...something strange is going on, further investigations are needed, the binding infrastructure is eating my error is some way.&lt;/p&gt;

&lt;p&gt;Now, when you bind an image to a URI under the hood the engine automatically creates a BitmapImage object that is responsible for loading the image and passing the data to the control. The BitmapImage have an event - ImageFailed - that you can subscribe to get a notification of a failure loading the image. We can just write our own BitmapImageConverter and use it in the binding to get some more info:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Use this converter for converting a URI to a BitmapImage object&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// Example:&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Text=&amp;quot;{Binding Path=Image, Converter={StaticResource BitmapImageConverter}&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; BitmapImageConverter : IValueConverter&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="preproc"&gt;#region&lt;/span&gt; IValueConverter Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Convert(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;, Type targetType, &lt;span class="kwrd"&gt;object&lt;/span&gt; parameter, System.Globalization.CultureInfo culture)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;value&lt;/span&gt; != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            BitmapImage convert = &lt;span class="kwrd"&gt;new&lt;/span&gt; BitmapImage(&lt;span class="kwrd"&gt;new&lt;/span&gt; Uri(&lt;span class="kwrd"&gt;value&lt;/span&gt;.ToString(), UriKind.Absolute));&lt;/pre&gt;

    &lt;pre class="alt"&gt;            convert.ImageFailed += (sender, e) =&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                                            {&lt;/pre&gt;

    &lt;pre class="alt"&gt;                                                System.Diagnostics.Debug.WriteLine(e.ErrorException.ToString());&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                                            };&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; convert;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; ConvertBack(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;, Type targetType, &lt;span class="kwrd"&gt;object&lt;/span&gt; parameter, System.Globalization.CultureInfo culture)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; NotImplementedException();&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And we use it like:&lt;/p&gt;

&lt;div style="border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px"&gt;
  &lt;div style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;
    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   1:&lt;/span&gt; In the resources section:&lt;/pre&gt;

    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   2:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   3:&lt;/span&gt; &amp;lt;converters:BitmapImageConverter x:Key=&lt;span style="color: #006080"&gt;&amp;quot;UrlToBitmap&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;

    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   4:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   5:&lt;/span&gt; The binding &lt;span style="color: #0000ff"&gt;is&lt;/span&gt; like:&lt;/pre&gt;

    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   6:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre style="border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"&gt;&lt;span style="color: #606060"&gt;   7:&lt;/span&gt; &amp;lt;Image Source=&lt;span style="color: #006080"&gt;&amp;quot;{Binding Path=Image, Converter={StaticResource UrlToBitmap}}&amp;quot;&lt;/span&gt; Width=&lt;span style="color: #006080"&gt;&amp;quot;40&amp;quot;&lt;/span&gt; Height=&lt;span style="color: #006080"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can now set a breakpoint on the Debug.WriteLine() call and look at the exception:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/12/AG_E_NETWORK_ERROR2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="AG_E_NETWORK_ERROR2" border="0" alt="AG_E_NETWORK_ERROR2" src="/UserFiles/Guardian/2009/12/AG_E_NETWORK_ERROR2_thumb.png" width="674" height="145" /&gt;&lt;/a&gt;&amp;#160; &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;AG_E_NETWORK_ERROR!!! this is a pretty generic error and you usually you this it (dealing with media elements like images, videos, and such) when Silverlight cannot find or understand the resource you trying to load, no more details are given here; but I couldn’t even see the request for the resource being made, something very bad is going on here.&lt;/p&gt;

&lt;p&gt;I spent some time doing other esoteric investigations when I saw HOW the application was requested in the browser and started hammering my head on the wall for having lost time in a stupid way!&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/12/AG_E_NETWORK_ERROR3.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="AG_E_NETWORK_ERROR3" border="0" alt="AG_E_NETWORK_ERROR3" src="/UserFiles/Guardian/2009/12/AG_E_NETWORK_ERROR3_thumb.png" width="680" height="93" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can see it: “file://”, when I created the project I chose to NOT create an Asp.Net web project to host the Silverlight application and let Visual Studio create a default test page for me; BUT it open this page direcly pointing to the page on the file system so the request scheme is ‘file://’.&lt;/p&gt;

&lt;p&gt;If you take a look at the &lt;a href="http://msdn.microsoft.com/en-us/library/cc189008(VS.95).aspx" target="_blank"&gt;URL Access Restrictions in Silverlight&lt;/a&gt; (and if you are a Silverlight developer you should know at least some of them) you see that cross-scheme calls are not allowed for images! I opened the application with ‘file://’ scheme, but was requesting something with ‘http://’ scheme.&lt;/p&gt;

&lt;p&gt;The solution was to create the ‘damned’ Asp.Net web project to host the Silverlight application and start that instead, everything started to work fine as it should!&lt;/p&gt;

&lt;p&gt;To be honest getting an AG_E_NETWORK_ERROR is quite misleading here, something that reported a SECURITY error or failure would have been more suited to the situation and could lead to the problem resolution faster.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-available"&gt;Silverlight 2 RC0 Available&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed"&gt;WPF: force all the validation rules attached to an object to be executed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error"&gt;Tale of an ‘asp:Content control that do not correspond with asp:ContentPlaceHolder’ Master Page Error&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-ag_e_network_error-thrilling-story"&gt;&lt;strong&gt;More related document (44)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-ag_e_network_error-thrilling-story</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-ag_e_network_error-thrilling-story#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-ag_e_network_error-thrilling-story</guid><pubDate>Mon, 07 Dec 2009 18:00:00 GMT</pubDate><category>Ag_e_network_error</category><category>Silverlight</category></item><item><title>Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”</title><description>&lt;p&gt;We at &lt;a href="http://www.dotnetmarche.org" target="_blank"&gt;DotNetMarche&lt;/a&gt; (our local, Italian .Net user group) are currently working on the last workshop for this year, it will be just before the Christmas Holidays on December 18th. The event will be divided in 2 different trances: in the morning we will have a presentation of Windows 7, Windows Server 2008 R2 and Hyper V virtualization and IIS7.5 for the IT managers and IT architects (these sessions will be presented by Piergiorgio Malusardi). &lt;/p&gt;  &lt;p&gt;In the afternoon there will be a session entirely devoted to the Web Development using the 3 different technologies that the .Net world offers to the web developers: Asp.NET Classic (presented by Roberto Sileoni), Asp.NET MVC + jQuery (presented by Andrea Balducci), SIlverlight 3 (presented by Alessandro Giorgetti -myself :D).&lt;/p&gt;  &lt;p&gt;We will show how you can build some portions of a simple MusicStore application using the 3 different technologies and which approach you can follow, the emphasis will be placed on the facilities that each technologies has in building the UI rather than the architecture of the whole project itself.&lt;/p&gt;  &lt;p&gt;Here are some mockups of the&amp;#160; interface we will implement:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/12/RicercaCD.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px" title="Ricerca CD" border="0" alt="Ricerca CD" align="left" src="/UserFiles/Guardian/2009/12/RicercaCD_thumb.png" width="248" height="201" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/12/Inserimentomodifica.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Inserimento - modifica" border="0" alt="Inserimento - modifica" src="/UserFiles/Guardian/2009/12/Inserimentomodifica_thumb.png" width="324" height="203" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;If you are interested - I know you are! - go and subscribe at the event at: &lt;a href="http://www.dotnetmarche.org"&gt;www.dotnetmarche.org&lt;/a&gt;. &lt;/p&gt;  &lt;p&gt;As usual, for those that will stay with us after the workshop, we will organize a dinner and we will be at your service for further questions, jokes, boar ribs eating or whatever you like.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/ready-upcoming-dotnetmarche-workshop-july-16"&gt;Are you ready for the upcoming DotNetMarche workshop on July 16 ?&lt;/a&gt; (07/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;&lt;strong&gt;More related document (49)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009</guid><pubDate>Fri, 04 Dec 2009 00:04:00 GMT</pubDate><category>December</category><category>Dotnetmarche</category><category>Silverlight</category><category>Workshop</category></item><item><title>A very dirty trick to open a Popup after a PostBack operation</title><description>&lt;p&gt;I’m not very proud of this cause it indicates a very poor interface design, but in a legacy project I’m working on we had the following scenario:&lt;/p&gt;  &lt;p&gt;1- the user interact on some elements of the UI&lt;/p&gt;  &lt;p&gt;2- the user clicks a button, at the PostBack operation information are gathered about the UI status and what the user done on some elements&lt;/p&gt;  &lt;p&gt;3- at the end of the processing we needed to open a popup showing the result of the operation.&lt;/p&gt;  &lt;p&gt;The problem is: &lt;strong&gt;opening a popup is a client-side operation, while all the processing is done server-side&lt;/strong&gt;.&lt;/p&gt;  &lt;p&gt;The trick is simple: at the end of the PostBack operation just inject some Javascript code that when executed at the client side (after all the DOM of the page has been constructed) open the popup with the usual window.open() function call.&lt;/p&gt;  &lt;p&gt;You do that using the Page.ClientScript.RegisterStartupScript() call, but this one will not work if you try to use it inside an Ajax UpdatePanel; to solve the problem you have to use the ‘new’ ScriptManager.RegisterStartupScript() call, here’s an example:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Function&lt;/span&gt; CreateWindowsOpenFunction(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; link &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt;) &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    link = Navigation.AdjustLinkForVirtualPath(link)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;Return&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt;.Format(&lt;span class="str"&gt;&amp;quot;javascript: window.open('{0}', '_blank');&amp;quot;&lt;/span&gt;, link)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Function&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; OpenInAnotherWindow(&lt;span class="kwrd"&gt;byval&lt;/span&gt; url &lt;span class="kwrd"&gt;as&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;Dim&lt;/span&gt; script &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt; = CreateWindowsOpenFunction(url)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    ScriptManager.RegisterStartupScript(&lt;span class="kwrd"&gt;Me&lt;/span&gt;, &lt;span class="kwrd"&gt;Me&lt;/span&gt;.&lt;span class="kwrd"&gt;GetType&lt;/span&gt;(), &lt;span class="str"&gt;&amp;quot;navigation&amp;quot;&lt;/span&gt;, script, &lt;span class="kwrd"&gt;True&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;End&lt;/span&gt; Sub&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can call the OpenInAnotherWindow() function at the end of your processing, when the page will be reloaded by the browser (after the PostBack) the window.open() script will be executed.&lt;/p&gt;

&lt;p&gt;By the way, in the example above I used GetType() as the second argument of the call, but you really should avoid doing it, take a look at this post: &lt;a href="http://blogs.ipona.com/james/archive/2006/10/03/6710.aspx" target="_blank"&gt;Don't use GetType() with Page.ClientScript.RegisterClientScriptBlock()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have to start using tricks like these, maybe it’s better to start rethinking the UI and the data flow of your application.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/dirty-trick-open-popup-postback-operation</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/dirty-trick-open-popup-postback-operation#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/dirty-trick-open-popup-postback-operation</guid><pubDate>Mon, 30 Nov 2009 21:38:00 GMT</pubDate><category>Popup</category><category>Postback</category><category>Registerclientscript</category></item><item><title>Changing the blog RSS feed</title><description>&lt;p&gt;I’m changing this blog feed to conform it to the new domain name, you can subscribe to the new feed using these addresses:&lt;/p&gt;  &lt;p&gt;&lt;a title="http://www.primordialcode.com/index.php/feed/" href="http://www.primordialcode.com/index.php/feed/"&gt;http://www.primordialcode.com/index.php/feed/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title="http://feeds.feedburner.com/PrimordialCode" href="http://feeds.feedburner.com/PrimordialCode"&gt;http://feeds.feedburner.com/PrimordialCode&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The old feed will be redirected to this new one and continue to exists anyway (at least for some time), if you follow my blog I would really appreciate if you can subscribe to this new one, thanks in advance.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/code-analysis-refactoring-utilities"&gt;Some Code Analysis and Refactoring Utilities you may like&lt;/a&gt; (11/03/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/changing-the-blog-rss-feed"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/changing-the-blog-rss-feed</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/changing-the-blog-rss-feed#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/changing-the-blog-rss-feed</guid><pubDate>Fri, 27 Nov 2009 21:04:00 GMT</pubDate><category>Primordial code</category><category>Rss</category></item><item><title>Windows Forms: Closeable TabControl</title><description>Today I needed to modify the UI of an application built by my company to enable the support for a multi-tabbed document interface (like the standard Visual Studio interface); since there’s no default support for displaying a close button (or context menu specific to each opened tab, or any other action button you may like to have on the tabs) I needed to implement my own version of this control.&lt;br /&gt;&lt;br /&gt;It isn’t too hard to do once you read the documentation: basically you need to inform the control you will be going to render the content of each tab header by yourself (instead of using the default rendering) setting the value of the property &lt;em&gt;DrawMode&lt;/em&gt; to &lt;em&gt;TabDrawMode.OwnerDrawFixed&lt;/em&gt;. Then you can write your own rendering logic overriding the &lt;em&gt;OnDrawItem&lt;/em&gt; function.&lt;br /&gt;&lt;br /&gt;The main problem is: you can’t place other controls inside the Tab Header and you have to do all by hand; the same goes for the hit tests to see if you clicked on the custom action buttons you placed there, so you just need to do some basic math calculations to see if the mouse if over the buttons’ sensitive areas.&lt;br /&gt;&lt;br /&gt;In my example I decided to render the close button using some standard GDI calls at first, but you can modify the code and use bitmaps or whatever you like.&lt;br /&gt;&lt;br /&gt;here’s the full code:
&lt;div class="csharpcode-wrapper"&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// A tab control that can be used to close tabs with a custom drawn button.&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; SidTabControl : System.Windows.Forms.TabControl&lt;/pre&gt;
&lt;pre class="alt"&gt;{&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; SidTabControl()&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        SetStyle(ControlStyles.DoubleBuffer, &lt;span class="kwrd"&gt;true&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class="alt"&gt;        TabStop = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alteven"&gt;        DrawMode = TabDrawMode.OwnerDrawFixed;&lt;/pre&gt;
&lt;pre class="alt"&gt;        _closeButtonBrush = &lt;span class="kwrd"&gt;new&lt;/span&gt; SolidBrush(_closeButtonColor);&lt;/pre&gt;
&lt;pre class="alteven"&gt;        ItemSize = &lt;span class="kwrd"&gt;new&lt;/span&gt; Size(ItemSize.Width, 24);&lt;/pre&gt;
&lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// used to expand the tab header, find a better way&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;        Padding = &lt;span class="kwrd"&gt;new&lt;/span&gt; Point(16, 0);&lt;/pre&gt;
&lt;pre class="alteven"&gt;    }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Dispose(&lt;span class="kwrd"&gt;bool&lt;/span&gt; disposing)&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (disposing)&lt;/pre&gt;
&lt;pre class="alt"&gt;        {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            _stringFormat.Dispose();&lt;/pre&gt;
&lt;pre class="alt"&gt;            _closeButtonBrush.Dispose();&lt;/pre&gt;
&lt;pre class="alteven"&gt;        }&lt;/pre&gt;
&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;base&lt;/span&gt;.Dispose(disposing);&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;delegate&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TabClosedDelegate(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, ClosedEventArgs e);&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;delegate&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TabClosingDelegate(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, ClosingEventArgs e);&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; TabClosedDelegate TabClosed;&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; TabClosingDelegate TabClosing;&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; _buttonWidth = 16;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    [DefaultValue(16), Category(&lt;span class="str"&gt;"Action Buttons"&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; ButtonWidth&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _buttonWidth; }&lt;/pre&gt;
&lt;pre class="alteven"&gt;        set { _buttonWidth = &lt;span class="kwrd"&gt;value&lt;/span&gt;; }&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; _crossOffset = 3;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    [DefaultValue(3), Category(&lt;span class="str"&gt;"Action Buttons"&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; CrossOffset&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _crossOffset; }&lt;/pre&gt;
&lt;pre class="alteven"&gt;        set { _crossOffset = &lt;span class="kwrd"&gt;value&lt;/span&gt;; }&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; StringFormat _stringFormat = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringFormat&lt;/pre&gt;
&lt;pre class="alteven"&gt;                                        {&lt;/pre&gt;
&lt;pre class="alt"&gt;                                            Alignment = StringAlignment.Near,&lt;/pre&gt;
&lt;pre class="alteven"&gt;                                            LineAlignment = StringAlignment.Center&lt;/pre&gt;
&lt;pre class="alt"&gt;                                        };&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; Color _closeButtonColor = Color.Red;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; Brush _closeButtonBrush;&lt;/pre&gt;
&lt;pre class="alt"&gt;    [Category(&lt;span class="str"&gt;"Action Buttons"&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; Color CloseButtonColor&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _closeButtonColor; }&lt;/pre&gt;
&lt;pre class="alt"&gt;        set&lt;/pre&gt;
&lt;pre class="alteven"&gt;        {&lt;/pre&gt;
&lt;pre class="alt"&gt;            _closeButtonBrush.Dispose();&lt;/pre&gt;
&lt;pre class="alteven"&gt;            _closeButtonColor = &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;            _closeButtonBrush = &lt;span class="kwrd"&gt;new&lt;/span&gt; SolidBrush(_closeButtonColor);&lt;/pre&gt;
&lt;pre class="alteven"&gt;            Invalidate();&lt;/pre&gt;
&lt;pre class="alt"&gt;        }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnDrawItem(DrawItemEventArgs e)&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (e.Bounds != RectangleF.Empty)&lt;/pre&gt;
&lt;pre class="alt"&gt;        {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;for&lt;/span&gt; (&lt;span class="kwrd"&gt;int&lt;/span&gt; nIndex = 0; nIndex &amp;lt; TabCount; nIndex++)&lt;/pre&gt;
&lt;pre class="alt"&gt;            {&lt;/pre&gt;
&lt;pre class="alteven"&gt;                Rectangle tabArea = GetTabRect(nIndex);&lt;/pre&gt;
&lt;pre class="alt"&gt;                Rectangle closeBtnRect = GetCloseBtnRect(tabArea);&lt;/pre&gt;
&lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;if&lt;/span&gt; (nIndex != SelectedIndex)&lt;/pre&gt;
&lt;pre class="alteven"&gt;                {&lt;/pre&gt;
&lt;pre class="alt"&gt;                    e.Graphics.DrawRectangle(Pens.DarkGray, closeBtnRect);&lt;/pre&gt;
&lt;pre class="alteven"&gt;                    DrawCross(e, closeBtnRect, Color.DarkGray);&lt;/pre&gt;
&lt;pre class="alt"&gt;                }&lt;/pre&gt;
&lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;                {&lt;/pre&gt;
&lt;pre class="alteven"&gt;                    &lt;span class="rem"&gt;//Drawing Close Button&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;                    e.Graphics.FillRectangle(_closeButtonBrush, closeBtnRect);&lt;/pre&gt;
&lt;pre class="alteven"&gt;                    e.Graphics.DrawRectangle(Pens.White, closeBtnRect);&lt;/pre&gt;
&lt;pre class="alt"&gt;                    DrawCross(e, closeBtnRect, Color.White);&lt;/pre&gt;
&lt;pre class="alteven"&gt;                }&lt;/pre&gt;
&lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;string&lt;/span&gt; str = TabPages[nIndex].Text;&lt;/pre&gt;
&lt;pre class="alt"&gt;                e.Graphics.DrawString(str, Font, &lt;span class="kwrd"&gt;new&lt;/span&gt; SolidBrush(TabPages[nIndex].ForeColor), tabArea, _stringFormat);&lt;/pre&gt;
&lt;pre class="alteven"&gt;            }&lt;/pre&gt;
&lt;pre class="alt"&gt;        }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; DrawCross(DrawItemEventArgs e, Rectangle btnRect, Color color)&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;using&lt;/span&gt; (Pen pen = &lt;span class="kwrd"&gt;new&lt;/span&gt; Pen(color, 2))&lt;/pre&gt;
&lt;pre class="alt"&gt;        {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;float&lt;/span&gt; x1 = btnRect.X + CrossOffset;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;float&lt;/span&gt; x2 = btnRect.Right - CrossOffset;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;float&lt;/span&gt; y1 = btnRect.Y + CrossOffset;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;float&lt;/span&gt; y2 = btnRect.Bottom - CrossOffset;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            e.Graphics.DrawLine(pen, x1, y1, x2, y2);&lt;/pre&gt;
&lt;pre class="alt"&gt;            e.Graphics.DrawLine(pen, x1, y2, x2, y1);&lt;/pre&gt;
&lt;pre class="alteven"&gt;        }&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; Rectangle GetCloseBtnRect(Rectangle tabRect)&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        Rectangle rect = &lt;span class="kwrd"&gt;new&lt;/span&gt; Rectangle(tabRect.X + tabRect.Width - ButtonWidth - 4, (tabRect.Height - ButtonWidth) / 2, ButtonWidth, ButtonWidth);&lt;/pre&gt;
&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; rect;&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnMouseDown(MouseEventArgs e)&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (!DesignMode)&lt;/pre&gt;
&lt;pre class="alteven"&gt;        {&lt;/pre&gt;
&lt;pre class="alt"&gt;            Rectangle rect = GetTabRect(SelectedIndex);&lt;/pre&gt;
&lt;pre class="alteven"&gt;            rect = GetCloseBtnRect(rect);&lt;/pre&gt;
&lt;pre class="alt"&gt;            Point pt = &lt;span class="kwrd"&gt;new&lt;/span&gt; Point(e.X, e.Y);&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (rect.Contains(pt))&lt;/pre&gt;
&lt;pre class="alt"&gt;            {&lt;/pre&gt;
&lt;pre class="alteven"&gt;                CloseTab(SelectedTab);&lt;/pre&gt;
&lt;pre class="alt"&gt;            }&lt;/pre&gt;
&lt;pre class="alteven"&gt;        }&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CloseTab(&lt;span class="kwrd"&gt;int&lt;/span&gt; tabindex)&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        CloseTab(TabPages[tabindex]);&lt;/pre&gt;
&lt;pre class="alteven"&gt;    }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CloseTab(TabPage tp)&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        ClosingEventArgs args = &lt;span class="kwrd"&gt;new&lt;/span&gt; ClosingEventArgs(TabPages.IndexOf(tp));&lt;/pre&gt;
&lt;pre class="alt"&gt;        OnTabClosing(args);&lt;/pre&gt;
&lt;pre class="alt"&gt;        &lt;span class="rem"&gt;//Remove the tab and fir the event tot he client&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (!args.Cancel)&lt;/pre&gt;
&lt;pre class="alt"&gt;        {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// close and remove the tab, dispose it too&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            TabPages.Remove(tp);&lt;/pre&gt;
&lt;pre class="alteven"&gt;            OnTabClosed(&lt;span class="kwrd"&gt;new&lt;/span&gt; ClosedEventArgs(tp));&lt;/pre&gt;
&lt;pre class="alt"&gt;            tp.Dispose();&lt;/pre&gt;
&lt;pre class="alteven"&gt;        }&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnTabClosed(ClosedEventArgs e)&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (TabClosed != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre class="alteven"&gt;        {&lt;/pre&gt;
&lt;pre class="alt"&gt;            TabClosed(&lt;span class="kwrd"&gt;this&lt;/span&gt;, e);&lt;/pre&gt;
&lt;pre class="alteven"&gt;        }&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnTabClosing(ClosingEventArgs e)&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (TabClosing != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre class="alteven"&gt;            TabClosing(&lt;span class="kwrd"&gt;this&lt;/span&gt;, e);&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alteven"&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
Some support classes:
&lt;div class="csharpcode-wrapper"&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ClosingEventArgs&lt;/pre&gt;
&lt;pre class="alteven"&gt;{&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; _nTabIndex = -1;&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; ClosingEventArgs(&lt;span class="kwrd"&gt;int&lt;/span&gt; nTabIndex)&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        _nTabIndex = nTabIndex;&lt;/pre&gt;
&lt;pre class="alteven"&gt;        Cancel = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; Cancel { get; set; }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// Get/Set the tab index value where the close button is clicked&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; TabIndex&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        get&lt;/pre&gt;
&lt;pre class="alt"&gt;        {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; _nTabIndex;&lt;/pre&gt;
&lt;pre class="alt"&gt;        }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;}&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ClosedEventArgs : EventArgs&lt;/pre&gt;
&lt;pre class="alteven"&gt;{&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; TabPage _tab;&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; ClosedEventArgs(TabPage tab)&lt;/pre&gt;
&lt;pre class="alteven"&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;        _tab = tab;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// Get/Set the tab index value where the close button is clicked&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; TabPage Tab&lt;/pre&gt;
&lt;pre class="alt"&gt;    {&lt;/pre&gt;
&lt;pre class="alteven"&gt;        get&lt;/pre&gt;
&lt;pre class="alt"&gt;        {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; _tab;&lt;/pre&gt;
&lt;pre class="alt"&gt;        }&lt;/pre&gt;
&lt;pre class="alteven"&gt;    }&lt;/pre&gt;
&lt;pre class="alteven"&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
And this is how this control looks like in action:

&lt;a href="/UserFiles/Guardian/2009/11/CloseableTabControl.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="CloseableTabControl" src="/UserFiles/Guardian/2009/11/CloseableTabControl_thumb.png" border="0" alt="CloseableTabControl" width="256" height="194" /&gt;&lt;/a&gt;

Actually you have very limited possibilities to configure/change the way it renders the Tabs and the Button (you can play with the custom ItemSize, Padding, Margin and some custom properties I’ve added like ButtonWidth and CloseButtonColor). Two events are raised when a tab is about to close (TabClosing) and when it has been closed and removed (TabClosed).&lt;br /&gt;&lt;br /&gt;I have to admit that the same thing was much easy to do in WPF due to its fully support for control templates and the extensibility was absolutely higher than creating the same control in Windows Form.&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/build-windows-8"&gt;Build: Windows 8&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication"&gt;SharePoint Services - Setting up a Website with Forms Authentication&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out.hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...hot to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...how to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/windows-forms-closeable-tabcontrol"&gt;&lt;strong&gt;More related document (18)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/windows-forms-closeable-tabcontrol</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/windows-forms-closeable-tabcontrol#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/windows-forms-closeable-tabcontrol</guid><pubDate>Tue, 24 Nov 2009 21:32:00 GMT</pubDate><category>Net</category><category>Closeable</category><category>Tab</category><category>Tabcontrol</category><category>Windows forms</category></item><item><title>Technorati Claiming</title><description>&lt;p&gt;This is a post for Technorati claim: GXJ4WMJNGAMF&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/technorati-claiming</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/technorati-claiming#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/technorati-claiming</guid><pubDate>Mon, 23 Nov 2009 19:13:00 GMT</pubDate><category>Technorati</category></item><item><title>ASP.NET - Tagging and Hiding the columns of a GridView</title><description>&lt;p&gt;This is a simple trick that came into my mind working on a legacy ASP.NET application, the scenario is: we have a series of components that use a GridView to show some data, each GridView have several columns and according to the situation some have to be hidden and some shown (depending on the client configuration).&lt;/p&gt;  &lt;p&gt;The problem here is that you can access the GridView.Columns[] collection using only an integer indexer, the implementation I found just stored in the database a list of the integer corresponding to the columns to hide, and use a for cycle to do the job:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;For&lt;/span&gt; &lt;span class="kwrd"&gt;Each&lt;/span&gt; id &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Integer&lt;/span&gt; &lt;span class="kwrd"&gt;In&lt;/span&gt; indexes&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    gv.Columns(id).Visible = &lt;span class="kwrd"&gt;False&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;Next&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It works, but it have a major drawback...if you add or remove columns from the control you have to update the index list...and if the application stores the information for each customer or user...that goes for all of them too.&lt;/p&gt;

&lt;p&gt;The solution is simple, we just want to add an ID string field to the BoundField, TemplateField, etc...that a GridView uses to define its columns, to do the job we can inherit from those classes and add the required behaviour. We do not have multiple inheritance, so we are forced to use an interface to give a common aspect to all our inherited classes.&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;interface&lt;/span&gt; IExtendedBoundField&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;string&lt;/span&gt; Id { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ExtendedBoundField : BoundField, IExtendedBoundField&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Id { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ExtendedTemplateField : TemplateField, IExtendedBoundField&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Id { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The Asp.NET code that uses this new fields will be like:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;asp:GridView&lt;/span&gt; &lt;span class="attr"&gt;ID&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;GridView1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;runat&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;server&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;AllowPaging&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;AutoGenerateColumns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;False&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="attr"&gt;PageSize&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;30&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;DataKeyNames&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;cvcr_id&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;meta:resourcekey&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;GridView1Resource1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;AllowSorting&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Columns&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;avc:ExtendedBoundField&lt;/span&gt; &lt;span class="attr"&gt;Id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;cognome&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HeaderText&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Cognome&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;DataField&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;cvcr_surname&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;SortExpression&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;cvcr_surname&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="attr"&gt;meta:resourcekey&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;BoundFieldResource2&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;avc:ExtendedBoundField&lt;/span&gt; &lt;span class="attr"&gt;Id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;DataField&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;cvcr_name&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;SortExpression&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;cvcr_name&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HeaderText&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Nome&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="attr"&gt;meta:resourcekey&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;BoundFieldResource3&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;avc:ExtendedTemplateField&lt;/span&gt; &lt;span class="attr"&gt;Id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;eta&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HeaderText&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Et&amp;amp;#224;&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;SortExpression&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ItemTemplate&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;asp:Label&lt;/span&gt; &lt;span class="attr"&gt;ID&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;lblAge&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;runat&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;server&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Text&lt;/span&gt;&lt;span class="kwrd"&gt;='&amp;lt;%# Databinder.Eval(Container.DataItem, &amp;quot;age&amp;quot;) %&amp;gt;'&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="attr"&gt;ToolTip&lt;/span&gt;&lt;span class="kwrd"&gt;='&amp;lt;%# Databinder.Eval(Container.DataItem,&amp;quot;cvcr_birthdate&amp;quot;, &amp;quot;{0:dd/MM/yyyy}&amp;quot;) %&amp;gt;'&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;asp:Label&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ItemTemplate&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;avc:ExtendedTemplateField&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;...&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In the end you need to write an extension method that allows you to access the DataControlField given the Id&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; GridViewExtensions&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; DataControlField GetColumn(&lt;span class="kwrd"&gt;this&lt;/span&gt; GridView grid, &lt;span class="kwrd"&gt;string&lt;/span&gt; id)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (var column &lt;span class="kwrd"&gt;in&lt;/span&gt; grid.Columns)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (column &lt;span class="kwrd"&gt;is&lt;/span&gt; IExtendedBoundField)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (((IExtendedBoundField) column).Id == id)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;return&lt;/span&gt; (DataControlField) column;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;
You are now able to show and hide columns (or do whatever you want with them) given you know the Id used to tag the column, this way we can save the Ids instead of the ordinal position of the column and the problem of the first implementation is gone.&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples"&gt;WebNet European Conference, Slides and Samples&lt;/a&gt; (11/06/2012)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/css-and-javascript-file-minification"&gt;Css and JavaScript file minification&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/working-on-dexter"&gt;Working on Dexter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tale-content-correspond-contentplaceholder-master-page-error"&gt;Tale of an ‘asp:Content control that do not correspond with asp:ContentPlaceHolder’ Master Page Error&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/missing-net-performance-counters-solve"&gt;Missing .NET Performance Counters: how to solve it&lt;/a&gt; (10/07/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/aspnet-tagging-hiding-columns-gridview"&gt;&lt;strong&gt;More related document (7)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/aspnet-tagging-hiding-columns-gridview</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/aspnet-tagging-hiding-columns-gridview#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/aspnet-tagging-hiding-columns-gridview</guid><pubDate>Wed, 18 Nov 2009 19:45:00 GMT</pubDate><category>Asp net</category><category>Columns</category><category>Gridview</category><category>Hide</category><category>Id</category><category>Tag</category></item><item><title>Season of Change - goodbye Guardian’s Home, welcome PrimordialCode</title><description>&lt;p&gt;Due to the recent problems with our web site host we were forced to do some changes to our blogs and we ended up registering our own domains. After some thinking I also decided to change the name of the blog to reflect the domain name I chosen.&lt;/p&gt;  &lt;p&gt;I will keep on using the ‘Guardian’ nickname, as I always did in the past (for those that are curious it derives directly from my name, Alessandro in fact means &lt;em&gt;protector&lt;/em&gt;, &lt;em&gt;defender&lt;/em&gt; in short... a Guardian).&lt;/p&gt;  &lt;p&gt;Then why choosing ‘Primordial Code’ as the name of the blog? Well, my personal moniker (created by my beloved lady) has been the ‘Pig-tailed Mammoth’ for so long! And I like it a lot it always gave me an impression of ‘raw and blinded fury’ something very hard to stop or move aside...like me :D (I’m not properly a small guy in real life). So I wanted a name somewhat related to it.&lt;/p&gt;  &lt;p&gt;This will be a new beginning and I planned some other changes to this blog too, I just hope to find the time to do them :D. For the rest, except the name change, this blog will have the same content as before and links to the old blog should continue to work through redirection. I want to thank all the people that spent time in reading my articles, and I hope you will keep following me.&lt;/p&gt;  &lt;p&gt;As an ending note, good luck to my good old friend and co-worker Alkampfer, go visit his blog at the new domain &lt;a href="http://www.codewrecks.com"&gt;www.codewrecks.com&lt;/a&gt; for some good pieces of code and information!&lt;/p&gt;  &lt;p&gt;Alessandro “Guardian” Giorgetti&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/season-of-change-goodbye-guardians-home-welcome-primordial-code</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/season-of-change-goodbye-guardians-home-welcome-primordial-code#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/season-of-change-goodbye-guardians-home-welcome-primordial-code</guid><pubDate>Mon, 16 Nov 2009 19:58:00 GMT</pubDate></item><item><title>The Permalink problem continues</title><description>&lt;p&gt;It seems that out current hosting provider (IxWebHosting) is not able to identify the cause of the problem and is not able to fix it...we cannot apply any of the standard redirection hacks usually used in an IIS6 hosting cause they say they aren’t able to provide a custom redirection service due to how they install and run the php module under IIS6.&lt;/p&gt;  &lt;p&gt;The strange thing is that anything worked well since a couple of days ago...then something happened and no one is able to tell what...we haven’t modified our blogs configuration and the service provider claims nothing was changed on the server.&lt;/p&gt;  &lt;p&gt;We are working on a solution and moving the blogs and websites to a virtual server under a different provider. we have also registered some new domains to give a new ‘look and feel’ at our blogs.&lt;/p&gt;  &lt;p&gt;In the meanwhile we had to disable the permalink support to allow anyone interested to navigate inside our blogs, the sad drawback is that the search engines have indexed our links using the permalink format and those links will be unreachable for some time.&lt;/p&gt;  &lt;p&gt;We apologize for the inconvenience.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/troubles-with-permalinks-blog-unusable"&gt;Troubles with Permalinks, blog unusable&lt;/a&gt; (11/11/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/the-permalink-problem-continues"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/the-permalink-problem-continues</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/the-permalink-problem-continues#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/the-permalink-problem-continues</guid><pubDate>Sat, 14 Nov 2009 02:50:00 GMT</pubDate><category>Ixwebhosting</category><category>Permalinks</category><category>Wordpress</category></item><item><title>Troubles with Permalinks, blog unusable</title><description>&lt;p&gt;Since yesterday’s night we have troubles with the permalinks we use on our blogs, we asked our current host to investigate the issues and we hope for a quick and fast solution; however the first feedbacks we had weren’t so good.&lt;/p&gt;  &lt;p&gt;Meanwhile I’m sad but all the links on this blog will be broken and unusable, we are evaluating if it’s the case of change the hosting service at all.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-permalink-problem-continues"&gt;The Permalink problem continues&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/troubles-with-permalinks-blog-unusable"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/troubles-with-permalinks-blog-unusable</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/troubles-with-permalinks-blog-unusable#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/troubles-with-permalinks-blog-unusable</guid><pubDate>Wed, 11 Nov 2009 23:47:00 GMT</pubDate><category>Not working</category><category>Permalinks</category><category>Wordpress</category></item><item><title>WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart - Filter Chain Fixed</title><description>I had a lot of good feedbacks on that SharePoint filtering articles series, the guys that wrote me spotted on a nasty bug on how I was building the chain of filters in CAML.&lt;br /&gt;&lt;br /&gt;In my code I did something like: &amp;lt;or&amp;gt;&amp;lt;eq&amp;gt;...&amp;lt;/eq&amp;gt;&amp;lt;eq&amp;gt;...&amp;lt;/eq&amp;gt;&amp;lt;eq&amp;gt;...&amp;lt;/eq&amp;gt;&amp;lt;/or&amp;gt; which is WRONG!

Due to the lack of a good testing (I worked with only two values I didn’t get it at start).&lt;br /&gt;&lt;br /&gt;The correct chain should be: &amp;lt;or&amp;gt;&amp;lt;or&amp;gt;&amp;lt;eq&amp;gt;...&amp;lt;/eq&amp;gt;&amp;lt;eq&amp;gt;...&amp;lt;/eq&amp;gt;&amp;lt;/or&amp;gt;&amp;lt;eq&amp;gt;...&amp;lt;/eq&amp;gt;&amp;lt;/or&amp;gt;.&lt;br /&gt;&lt;br /&gt;Today I found 1 hour to fix the problem which was present in two pieces of the code: once when building the single filters and once when concatenating the multiple filters to obtain the final query.&lt;br /&gt;&lt;br /&gt;Here’s the code that contains the bug fixes. As a note to all my readers: again I did not had time to test it deeply (I checked the algorithm to generate the query, but I didn’t tested it against a SharePoint database due to the lack of time), so check it before using it in a production environment.
&lt;div class="csharpcode-wrapper"&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;[Guid(&lt;span class="str"&gt;"b7ea3f7d-b260-4ce8-9fd0-3af5aee8e0d6"&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; CustomListViewWebPart : System.Web.UI.WebControls.WebParts.WebPart&lt;/pre&gt;
&lt;pre class="alt"&gt;{&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="preproc"&gt;#region&lt;/span&gt; Properties&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; ILogger _logger = LoggerFactory.GetLogger();&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// The List we are displaying&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alteven"&gt;   WebBrowsable,&lt;/pre&gt;
&lt;pre class="alt"&gt;   WebPartStorage(Storage.Shared),&lt;/pre&gt;
&lt;pre class="alteven"&gt;   SPWebCategoryName(&lt;span class="str"&gt;"Settings"&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alt"&gt;   WebDisplayName(&lt;span class="str"&gt;"Source List Name"&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alteven"&gt;   WebDescription(&lt;span class="str"&gt;"Pass the name of the List to show"&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; SourceList { get; set; }&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// The Default View of the list&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alt"&gt;   WebBrowsable,&lt;/pre&gt;
&lt;pre class="alteven"&gt;   WebPartStorage(Storage.Shared),&lt;/pre&gt;
&lt;pre class="alt"&gt;   SPWebCategoryName(&lt;span class="str"&gt;"Settings"&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alteven"&gt;   WebDisplayName(&lt;span class="str"&gt;"View"&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alt"&gt;   WebDescription(&lt;span class="str"&gt;"Pass the name of the View that you want to apply to the List"&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ViewOfSourceList { get; set; }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// a CAML query to filter the object&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// in a later revision we will use one or more filter providers to set this&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alt"&gt;   WebBrowsable,&lt;/pre&gt;
&lt;pre class="alteven"&gt;   WebPartStorage(Storage.Shared),&lt;/pre&gt;
&lt;pre class="alt"&gt;   SPWebCategoryName(&lt;span class="str"&gt;"Settings"&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alteven"&gt;   WebDisplayName(&lt;span class="str"&gt;"Query"&lt;/span&gt;),&lt;/pre&gt;
&lt;pre class="alt"&gt;   WebDescription(&lt;span class="str"&gt;"Pass the Filter Query, if you wire up some Filter WebParts they have priority over the query and this will be ignored"&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FilterQuery { get; set; }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; List&amp;lt;IFilterValues&amp;gt; _filterProviders = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;IFilterValues&amp;gt;();&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; List&amp;lt;IFilterValues&amp;gt; FilterProviders&lt;/pre&gt;
&lt;pre class="alt"&gt;   {&lt;/pre&gt;
&lt;pre class="alteven"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _filterProviders; }&lt;/pre&gt;
&lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; CustomListViewWebPart()&lt;/pre&gt;
&lt;pre class="alteven"&gt;   {&lt;/pre&gt;
&lt;pre class="alt"&gt;      ExportMode = WebPartExportMode.All;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CreateChildControls()&lt;/pre&gt;
&lt;pre class="alt"&gt;   {&lt;/pre&gt;
&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.CreateChildControls();&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;      SPWeb web = SPContext.Current.Web;&lt;/pre&gt;
&lt;pre class="alt"&gt;      {&lt;/pre&gt;
&lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;try&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;         {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            SPList list = web.Lists[SourceList];&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// create the toolbar, actually we cannot hide it, we'll need to extend the webpart and those options&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            ViewToolBar toolbar = &lt;span class="kwrd"&gt;new&lt;/span&gt; ViewToolBar();&lt;/pre&gt;
&lt;pre class="alteven"&gt;            SPContext context = SPContext.GetContext(Context, list.Views[ViewOfSourceList].ID, list.ID, SPContext.Current.Web);&lt;/pre&gt;
&lt;pre class="alt"&gt;            toolbar.RenderContext = context;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            Controls.Add(toolbar);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// get a reference to the view we want to use (or use the default view if nothing is specified)&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            SPView webPartView;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (!&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(ViewOfSourceList))&lt;/pre&gt;
&lt;pre class="alt"&gt;               webPartView = web.Lists[SourceList].Views[ViewOfSourceList];&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;               webPartView = web.Lists[SourceList].DefaultView;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// create a new view based on the original one and attach the filter query to it&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// in this way we do not need to modify/update the original element and&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// even a user without updating permissions can use this webpart&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            XmlDocument domDoc = &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlDocument();&lt;/pre&gt;
&lt;pre class="alt"&gt;            domDoc.LoadXml(webPartView.SchemaXml);&lt;/pre&gt;
&lt;pre class="alteven"&gt;            SPView view = &lt;span class="kwrd"&gt;new&lt;/span&gt; SPView(list, domDoc);&lt;/pre&gt;
&lt;pre class="alt"&gt;            _logger.AppendLogFormat(&lt;span class="str"&gt;"View ID: {0}"&lt;/span&gt;, view.ID);&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// build the filter&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            ApplyFilters(list, view);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// render the view&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            Literal lbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Literal();&lt;/pre&gt;
&lt;pre class="alteven"&gt;            lbl.Text = view.RenderAsHtml();&lt;/pre&gt;
&lt;pre class="alt"&gt;            Controls.Add(lbl);&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// add the logging messages if there are any&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;string&lt;/span&gt; lg = _logger.ToString();&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (!&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(lg))&lt;/pre&gt;
&lt;pre class="alteven"&gt;            {&lt;/pre&gt;
&lt;pre class="alt"&gt;               Literal logLbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Literal();&lt;/pre&gt;
&lt;pre class="alteven"&gt;               logLbl.Text = &lt;span class="str"&gt;"&amp;lt;br/&amp;gt;"&lt;/span&gt; + lg;&lt;/pre&gt;
&lt;pre class="alt"&gt;               Controls.Add(logLbl);&lt;/pre&gt;
&lt;pre class="alteven"&gt;            }&lt;/pre&gt;
&lt;pre class="alt"&gt;         }&lt;/pre&gt;
&lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;catch&lt;/span&gt; (Exception ex)&lt;/pre&gt;
&lt;pre class="alt"&gt;         {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// todo: have a better way to report errors!&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            Label lbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Label();&lt;/pre&gt;
&lt;pre class="alteven"&gt;            lbl.Text = _logger.ToString() + &lt;span class="str"&gt;"&amp;lt;br /&amp;gt;"&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;            lbl.Text += &lt;span class="str"&gt;"Error occured: "&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            lbl.Text += ex.Message + &lt;span class="str"&gt;"&amp;lt;br /&amp;gt;"&lt;/span&gt; + ex.StackTrace;&lt;/pre&gt;
&lt;pre class="alt"&gt;            Controls.Add(lbl);&lt;/pre&gt;
&lt;pre class="alteven"&gt;         }&lt;/pre&gt;
&lt;pre class="alt"&gt;      }&lt;/pre&gt;
&lt;pre class="alteven"&gt;   }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// how to concatenate different filters&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;const&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FiltersConcatenation = &lt;span class="str"&gt;"And"&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// how to concatenate multiple values in the same filter&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;const&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FiltersMultipleValuesConcatenation = &lt;span class="str"&gt;"Or"&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; ApplyFilters(SPList list, SPView view)&lt;/pre&gt;
&lt;pre class="alteven"&gt;   {&lt;/pre&gt;
&lt;pre class="alt"&gt;      _logger.AppendLogFormat(&lt;span class="str"&gt;"Filters numbers: {0}"&lt;/span&gt;, FilterProviders.Count);&lt;/pre&gt;
&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (FilterProviders.Count == 0)&lt;/pre&gt;
&lt;pre class="alt"&gt;         view.Query = FilterQuery;&lt;/pre&gt;
&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;      {&lt;/pre&gt;
&lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (FilterProviders.Count &amp;gt; 0)&lt;/pre&gt;
&lt;pre class="alt"&gt;         {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// build the filter according to the passed data&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// holds each internal filter&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; filters = BuildFiltersList(list);&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// assign the list of filters, concatenate them if more than one&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count &amp;gt; 0)&lt;/pre&gt;
&lt;pre class="alt"&gt;            {&lt;/pre&gt;
&lt;pre class="alteven"&gt;               StringBuilder sb = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringBuilder();&lt;/pre&gt;
&lt;pre class="alt"&gt;               sb.Append(&lt;span class="str"&gt;"&amp;lt;Where&amp;gt;"&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count == 1)&lt;/pre&gt;
&lt;pre class="alteven"&gt;                  sb.Append(filters[0]);&lt;/pre&gt;
&lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;               {&lt;/pre&gt;
&lt;pre class="alt"&gt;                  &lt;span class="rem"&gt;// we have more than 1 filter and we need to concat&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;for&lt;/span&gt; (&lt;span class="kwrd"&gt;int&lt;/span&gt; i = 0; i &amp;lt; filters.Count; i++)&lt;/pre&gt;
&lt;pre class="alt"&gt;                  {&lt;/pre&gt;
&lt;pre class="alteven"&gt;                     &lt;span class="kwrd"&gt;if&lt;/span&gt; (i != 1)&lt;/pre&gt;
&lt;pre class="alt"&gt;                        sb.Insert(0, String.Format(&lt;span class="str"&gt;"&amp;lt;{0}&amp;gt;"&lt;/span&gt;, FiltersConcatenation));&lt;/pre&gt;
&lt;pre class="alteven"&gt;                     sb.Append(filters[i]);&lt;/pre&gt;
&lt;pre class="alt"&gt;                     &lt;span class="kwrd"&gt;if&lt;/span&gt; (i &amp;gt; 0)&lt;/pre&gt;
&lt;pre class="alteven"&gt;                        sb.AppendFormat(&lt;span class="str"&gt;"&amp;lt;/{0}&amp;gt;"&lt;/span&gt;, FiltersConcatenation);&lt;/pre&gt;
&lt;pre class="alt"&gt;                  }&lt;/pre&gt;
&lt;pre class="alteven"&gt;               }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;               sb.Append(&lt;span class="str"&gt;"&amp;lt;/Where&amp;gt;"&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;string&lt;/span&gt; query = sb.ToString();&lt;/pre&gt;
&lt;pre class="alt"&gt;               view.Query = query;&lt;/pre&gt;
&lt;pre class="alteven"&gt;               _logger.AppendLog(&lt;span class="str"&gt;"query: {0}"&lt;/span&gt; + query);&lt;/pre&gt;
&lt;pre class="alt"&gt;            }&lt;/pre&gt;
&lt;pre class="alteven"&gt;            _logger.AppendLog(&lt;span class="str"&gt;"query: -"&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class="alt"&gt;         }&lt;/pre&gt;
&lt;pre class="alteven"&gt;      }&lt;/pre&gt;
&lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// build the filter list to apply to the view&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name="list"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; BuildFiltersList(SPList list)&lt;/pre&gt;
&lt;pre class="alt"&gt;   {&lt;/pre&gt;
&lt;pre class="alteven"&gt;      List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; filters = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt;();&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;      ReadOnlyCollection&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; paramValues;&lt;/pre&gt;
&lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (IFilterValues f &lt;span class="kwrd"&gt;in&lt;/span&gt; FilterProviders)&lt;/pre&gt;
&lt;pre class="alteven"&gt;      {&lt;/pre&gt;
&lt;pre class="alt"&gt;         paramValues = f.ParameterValues;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;         _logger.AppendLogFormat(&lt;span class="str"&gt;"Filter: {0}"&lt;/span&gt;, f.ParameterName);&lt;/pre&gt;
&lt;pre class="alteven"&gt;         _logger.AppendLogFormat(&lt;span class="str"&gt;"Filter Params: {0}"&lt;/span&gt;, (paramValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;));&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; ((paramValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (paramValues.Count &amp;gt; 0))&lt;/pre&gt;
&lt;pre class="alt"&gt;         {&lt;/pre&gt;
&lt;pre class="alteven"&gt;            StringBuilder innerSb = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringBuilder();&lt;/pre&gt;
&lt;pre class="alt"&gt;            _logger.AppendLogFormat(&lt;span class="str"&gt;"Found filter: {0}  values n: {1}"&lt;/span&gt;, f.ParameterName, paramValues.Count);&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// check for single parameter value&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (paramValues.Count == 1)&lt;/pre&gt;
&lt;pre class="alt"&gt;               innerSb.AppendFormat(&lt;span class="str"&gt;"&amp;lt;Eq&amp;gt;&amp;lt;FieldRef Name='{0}' /&amp;gt;&amp;lt;Value Type='{1}'&amp;gt;{2}&amp;lt;/Value&amp;gt;&amp;lt;/Eq&amp;gt;"&lt;/span&gt;,&lt;/pre&gt;
&lt;pre class="alteven"&gt;                                    list.Fields[f.ParameterName].InternalName,&lt;/pre&gt;
&lt;pre class="alt"&gt;                                    list.Fields[f.ParameterName].TypeAsString,&lt;/pre&gt;
&lt;pre class="alteven"&gt;                                    paramValues[0]);&lt;/pre&gt;
&lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;            {&lt;/pre&gt;
&lt;pre class="alt"&gt;               &lt;span class="rem"&gt;// multiple values we need to concat in the right way for a CAML query&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;for&lt;/span&gt; (&lt;span class="kwrd"&gt;int&lt;/span&gt; i = 0; i &amp;lt; paramValues.Count; i++)&lt;/pre&gt;
&lt;pre class="alt"&gt;               {&lt;/pre&gt;
&lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;if&lt;/span&gt; (i != 1)&lt;/pre&gt;
&lt;pre class="alt"&gt;                     innerSb.Insert(0, String.Format(&lt;span class="str"&gt;"&amp;lt;{0}&amp;gt;"&lt;/span&gt;, FiltersMultipleValuesConcatenation));&lt;/pre&gt;
&lt;pre class="alteven"&gt;                  innerSb.AppendFormat(&lt;span class="str"&gt;"&amp;lt;Eq&amp;gt;&amp;lt;FieldRef Name='{0}' /&amp;gt;&amp;lt;Value Type='{1}'&amp;gt;{2}&amp;lt;/Value&amp;gt;&amp;lt;/Eq&amp;gt;"&lt;/span&gt;,&lt;/pre&gt;
&lt;pre class="alt"&gt;                                       list.Fields[f.ParameterName].InternalName,&lt;/pre&gt;
&lt;pre class="alteven"&gt;                                       list.Fields[f.ParameterName].TypeAsString,&lt;/pre&gt;
&lt;pre class="alt"&gt;                                       paramValues[i]);&lt;/pre&gt;
&lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;if&lt;/span&gt; (i &amp;gt; 0)&lt;/pre&gt;
&lt;pre class="alt"&gt;                     innerSb.AppendFormat(&lt;span class="str"&gt;"&amp;lt;/{0}&amp;gt;"&lt;/span&gt;, FiltersMultipleValuesConcatenation);&lt;/pre&gt;
&lt;pre class="alteven"&gt;               }&lt;/pre&gt;
&lt;pre class="alt"&gt;            }&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;            filters.Add(innerSb.ToString());&lt;/pre&gt;
&lt;pre class="alteven"&gt;         }&lt;/pre&gt;
&lt;pre class="alt"&gt;      }&lt;/pre&gt;
&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; filters;&lt;/pre&gt;
&lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Render(HtmlTextWriter writer)&lt;/pre&gt;
&lt;pre class="alteven"&gt;   {&lt;/pre&gt;
&lt;pre class="alt"&gt;      EnsureChildControls();&lt;/pre&gt;
&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.Render(writer);&lt;/pre&gt;
&lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   [ConnectionConsumer(&lt;span class="str"&gt;"Filters"&lt;/span&gt;, &lt;span class="str"&gt;"FiltersForConsumer"&lt;/span&gt;, AllowsMultipleConnections = &lt;span class="kwrd"&gt;true&lt;/span&gt;)]&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; SetFilter(IFilterValues filterValues)&lt;/pre&gt;
&lt;pre class="alt"&gt;   {&lt;/pre&gt;
&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (filterValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre class="alt"&gt;      {&lt;/pre&gt;
&lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// EnsureChildControls();&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;         _logger.AppendLog(&lt;span class="str"&gt;"Assigning filters"&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class="alteven"&gt;         _logger.AppendLogFormat(&lt;span class="str"&gt;"Assigning filter: {0}"&lt;/span&gt;, filterValues.ParameterName);&lt;/pre&gt;
&lt;pre class="alt"&gt;         _logger.AppendLogFormat(&lt;span class="str"&gt;"Assigning filter: {0}"&lt;/span&gt;, (filterValues.ParameterValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;));&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;         filterValues.SetConsumerParameters(GetParameters());&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;         FilterProviders.Add(filterValues);&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;         _logger.AppendLog(&lt;span class="str"&gt;"Filters Assigned"&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class="alteven"&gt;      }&lt;/pre&gt;
&lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// Build a parameter List to allow the filtering of the List on the values provided&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// by a series of filters.&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; ReadOnlyCollection&amp;lt;ConsumerParameter&amp;gt; GetParameters()&lt;/pre&gt;
&lt;pre class="alt"&gt;   {&lt;/pre&gt;
&lt;pre class="alteven"&gt;      List&amp;lt;ConsumerParameter&amp;gt; parameters = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;ConsumerParameter&amp;gt;();&lt;/pre&gt;
&lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// we get all the fields of the list we are displaying&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;      SPList list = SPContext.Current.Web.Lists[SourceList];&lt;/pre&gt;
&lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// we build a parameter for any field of the list (similar to the standard ListViewWebPart)&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (SPField item &lt;span class="kwrd"&gt;in&lt;/span&gt; list.Fields)&lt;/pre&gt;
&lt;pre class="alt"&gt;         parameters.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ConsumerParameter(item.Title,&lt;/pre&gt;
&lt;pre class="alteven"&gt;             ConsumerParameterCapabilities.SupportsMultipleValues |&lt;/pre&gt;
&lt;pre class="alt"&gt;             ConsumerParameterCapabilities.SupportsAllValue |&lt;/pre&gt;
&lt;pre class="alteven"&gt;             ConsumerParameterCapabilities.SupportsEmptyValue |&lt;/pre&gt;
&lt;pre class="alt"&gt;             ConsumerParameterCapabilities.SupportsSingleValue));&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; ReadOnlyCollection&amp;lt;ConsumerParameter&amp;gt;(parameters);&lt;/pre&gt;
&lt;pre class="alteven"&gt;   }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
Any further suggestion, modification and fixes are welcome :D&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wss-sharepoint-filter-users-peopleeditor"&gt;WSS / SharePoint : filter Users with the PeopleEditor control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-create-current-user-filter-web-part"&gt;WSS/SharePoint: create a Current User Filter Web Part&lt;/a&gt; (09/07/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart (Current User Filter and others)&lt;/a&gt; (09/11/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wss-sharepoint-adding-filtering-capabilities-customlistviewwebpart-filter-chain-fixed"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wss-sharepoint-adding-filtering-capabilities-customlistviewwebpart-filter-chain-fixed</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wss-sharepoint-adding-filtering-capabilities-customlistviewwebpart-filter-chain-fixed#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wss-sharepoint-adding-filtering-capabilities-customlistviewwebpart-filter-chain-fixed</guid><pubDate>Fri, 06 Nov 2009 21:24:00 GMT</pubDate><category>Sharepointwsscustomcurrent userfilterlistviewwebpartcustomlistviewwebpart</category></item><item><title>Create an EML file the easy way</title><description>&lt;p&gt;Many email readers (like Windows Mail, Outlook, Thunderbird...) use this format to store emails in files; I needed an easy way to create those files to send emails using the default email program the client has configured on his system.&lt;/p&gt;  &lt;p&gt;Looking the the framework class documentation I’ve found that the &lt;em&gt;SmtpClient&lt;/em&gt; class, specifying its &lt;em&gt;DeliveryMethod&lt;/em&gt; to &lt;em&gt;SmtpDeliveryMethod.SpecifiedPickupDirectory&lt;/em&gt; and &lt;em&gt;PickupDirectoryLocation&lt;/em&gt; to the destination folder you want the files to be placed, can generate those files for you, without the need of any external library.&lt;/p&gt;  &lt;p&gt;The code was quite straightforward:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Creates an eml file to be delivered with the default mail client&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;from&amp;quot;&amp;gt;address that sends the email&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;to&amp;quot;&amp;gt;address to which send the email&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;subject&amp;quot;&amp;gt;subject&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;body&amp;quot;&amp;gt;body&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;attachments&amp;quot;&amp;gt;list of attachments&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;destFolder&amp;quot;&amp;gt;destination folder to store the file&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;The complete path of the newely generated EML file&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; CreateEml(&lt;span class="kwrd"&gt;string&lt;/span&gt; from,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                               &lt;span class="kwrd"&gt;string&lt;/span&gt; to,&lt;/pre&gt;

    &lt;pre class="alt"&gt;                               &lt;span class="kwrd"&gt;string&lt;/span&gt; subject,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                               &lt;span class="kwrd"&gt;string&lt;/span&gt; body,&lt;/pre&gt;

    &lt;pre class="alt"&gt;                               IEnumerable&amp;lt;Attachment&amp;gt; attachments,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                               &lt;span class="kwrd"&gt;string&lt;/span&gt; destFolder)&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;using&lt;/span&gt; (MailMessage mail = &lt;span class="kwrd"&gt;new&lt;/span&gt; MailMessage())&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      mail.From = &lt;span class="kwrd"&gt;new&lt;/span&gt; MailAddress(from);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      mail.To.Add(to);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      mail.Subject = subject;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      mail.Body = body;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (attachments != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (var attachment &lt;span class="kwrd"&gt;in&lt;/span&gt; attachments)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            mail.Attachments.Add(attachment);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      SmtpClient smtpClient = &lt;span class="kwrd"&gt;new&lt;/span&gt; SmtpClient&lt;/pre&gt;

    &lt;pre class="alt"&gt;                                 {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                                    PickupDirectoryLocation = destFolder,&lt;/pre&gt;

    &lt;pre class="alt"&gt;                                    DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                                 };&lt;/pre&gt;

    &lt;pre class="alt"&gt;      smtpClient.Send(mail);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   DirectoryInfo dir = &lt;span class="kwrd"&gt;new&lt;/span&gt; DirectoryInfo(destFolder);&lt;/pre&gt;

    &lt;pre class="alt"&gt;   FileInfo file = dir.GetFiles(&lt;span class="str"&gt;&amp;quot;*.eml&amp;quot;&lt;/span&gt;, SearchOption.TopDirectoryOnly).OrderByDescending(m =&amp;gt; m.CreationTimeUtc).First();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;return&lt;/span&gt; file.FullName;&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;
The function returns the full path of the newly created eml file, you can use it in a System.Diagnostics.Process.Start() call to open the default email client of the user.</description><link>http://www.primordialcode.com/blog/post/create-an-eml-file-the-easy-way</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/create-an-eml-file-the-easy-way#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/create-an-eml-file-the-easy-way</guid><pubDate>Thu, 05 Nov 2009 20:30:00 GMT</pubDate><category>Create</category><category>Eml</category><category>Programmatically</category></item><item><title>How to migrate a Windows XP installation from an IDE to a SATA hard drive</title><description>&lt;p&gt;These days I made myself and my bro a ‘Christmas Gift’ and I bought a couple of 10k rpm hard drives to give our systems some speed up. In my childlike mind I thought: migrate the system will be easy..just clone the HD data to the new one, maybe perform a quick system repair to adjust and driver assignment letter issue that can arise and we are cool.&lt;/p&gt;  &lt;p&gt;Well...it was a long journey to figure out how to resolve all the problems we had, today we start with the Windows XP migration, in a next article I’ll talk about the Vista migration.&lt;/p&gt;  &lt;p&gt;To successfully migrate a Windows XP installation you need 3 different tools, I tend to use all free stuff if I can:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;A disk cloning tool: EASEUS has a nice and free solution that worked well for me: &lt;a href="http://www.easeus.com/disk-copy/" target="_blank"&gt;EASEUS DISK COPY&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;A partition manager tool: again EASEUS to the rescue with the free version of &lt;a href="http://www.partition-tool.com/personal.htm" target="_blank"&gt;EASEUS Partition Master Personal Edition&lt;/a&gt;&amp;#160; &lt;/li&gt;    &lt;li&gt;To fix the boot issues that will arise you need to use the &lt;a href="http://www.partition-saving.com/" target="_blank"&gt;Partition Saving suite&lt;/a&gt; (in the download section look for the ‘spartiso.zip’ file). &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Here are the steps I made:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Burn the Disk Copy and Partition Savings in two bootable CDs. &lt;/li&gt;    &lt;li&gt;Connect the new HD to the system and start Windows from your old IDE drive, this step is needed to let the system load the SATA drivers if required. &lt;/li&gt;    &lt;li&gt;Boot the Disk Copy tool and perform an copy of the Windows partition to the new drive (it will have the same size of the original one, that’s why you need a partition manager tool after) &lt;/li&gt;    &lt;li&gt;When finished, just to be safe, remove/disconnect your previous HD and try to boot from the new HD. &lt;/li&gt;    &lt;li&gt;If it all work you can go to step 14.      &lt;br /&gt;&lt;em&gt;Here’s when my problems arose, instead of seeing the windows logo and the operating system the screen was totally black with the prompt flashing on the upper left corner.&lt;/em&gt; &lt;/li&gt;    &lt;li&gt;Boot from the Partition Savings CD and type ‘savepart’ at the prompt to start the utility &lt;/li&gt;    &lt;li&gt;Choose &amp;quot;update windows2000/xp/vista registry&amp;quot; &lt;/li&gt;    &lt;li&gt;Click on the partition that has your system ( “C” usually ) and take note of the drive letter this is your mounted device drive letter. &lt;/li&gt;    &lt;li&gt;You will now see a list of directories, choose the &amp;quot;WINDOWS&amp;quot; directory &lt;/li&gt;    &lt;li&gt;On next screen you choose the disk which has the partition whose registry definition you want to update &lt;/li&gt;    &lt;li&gt;You choose the partition for which you want to update the definition in the registry &lt;/li&gt;    &lt;li&gt;The last box is the &amp;quot;drive letter to affect this partition&amp;quot; box. You must choose from this list the drive letter you want to be associated with the partition selected with two previous windows. This is where it will show you the &amp;quot;partition ID drive letter&amp;quot; it should be the same as the &amp;quot;mounted device drive letter&amp;quot;.      &lt;br /&gt;[extensive documentation can be found in the Partition Saving help files] &lt;/li&gt;    &lt;li&gt;Reboot the system, it should start without problems and load windows, but your partition will have the same size as the original drive. &lt;/li&gt;    &lt;li&gt;Install the partition manager tool and resize your partition to take advantage of your new HD. &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Enjoy your migrated system :D&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-setup"&gt;Windows SharePoint Services - first setup&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/redmine-trick-import-data-mantis"&gt;Redmine: a trick to import data from Mantis&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/build-windows-8"&gt;Build: Windows 8&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/install-sql-server-express-with-your-application"&gt;Install SQL Server (Express) with your Application&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/how-to-migrate-a-windows-xp-installation-from-an-ide-to-a-sata-hard-drive"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/how-to-migrate-a-windows-xp-installation-from-an-ide-to-a-sata-hard-drive</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/how-to-migrate-a-windows-xp-installation-from-an-ide-to-a-sata-hard-drive#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/how-to-migrate-a-windows-xp-installation-from-an-ide-to-a-sata-hard-drive</guid><pubDate>Tue, 03 Nov 2009 21:47:00 GMT</pubDate><category>Disk copy</category><category>Ide</category><category>Migrate installation</category><category>Migration</category><category>Sata</category><category>Windows xp</category></item><item><title>Using Regular Expressions to identify possible bugs in code</title><description>&lt;p&gt;In the past few days I was moved to analyze some legacy code from a huge web application written by a company I work with. I have to write some new modules to integrate in this application; but while I was reviewing the code to ‘learn’ the style and code format used (to try to build code similar to the one already written for uniformity and ease of maintenance for the other guys I work with), I faced code like this:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; (DbCommand c = CurrentDatabase.GetSqlStringCommand(sql))&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   CurrentDatabase.AddInParameter(c, &lt;span class="str"&gt;&amp;quot;UserId&amp;quot;&lt;/span&gt;, DbType.String, UserName);&lt;/pre&gt;

    &lt;pre class="alt"&gt;   IDataReader dr;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   List&amp;lt;Filiale&amp;gt; list = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;Filiale&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alt"&gt;   dr = CurrentDatabase.ExecuteReader(c);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;while&lt;/span&gt; (dr.Read())&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      list.Add(BuildObjectFromDataRow(dr));&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;return&lt;/span&gt; list;&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;

    &lt;pre class="alteven"&gt;...&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Can you see the bug here ? &lt;/p&gt;

&lt;p&gt;The DataReader is created, used ... and never closed...that is: a big resource leak! I looked around and found some more code similar to this one.&lt;/p&gt;

&lt;p&gt;The solution is indeed huge (60+ projects) and with many classes for the data access written in an ‘old-style’ fashion. So we need a way to easily identify the ‘critical’ sections and check the code for similar resource leaks, because we do not want to check file by file if we can avoid it. I thought of it a bit and a solution came into my mind.&lt;/p&gt;

&lt;p&gt;The best practice is to wrap each DataReader inside a using statement to clean up resources properly, and it is already used in many code fragments of the solution, so:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why can’t I try to use the Visual Studio ‘Find and Replace’ feature with some regular expression, looking for all the pieces of code that contains an ExecuteReader() call not wrapped inside a using statement?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I opened my favorite Regex editor an wrote down something like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;^(?!.*\busing\b).*ExecuteReader&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It basically looks for any line that contains the ‘ExecuteReader’ string and do not contains the ‘using’ string-&lt;/p&gt;

&lt;p&gt;I tested it with some code snippets and seemed to work, the bad news is: you can’t use this in Visual Studio..because the regex syntax is a bit different from the standard, check the VS or the MSDN help for the syntax.&lt;/p&gt;

&lt;p&gt;You have to modify the expression like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;^(~(.*&amp;lt;&lt;span class="kwrd"&gt;using&lt;/span&gt;&amp;gt;)).*ExecuteReader&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/Usingregularexpressionstoidentifypossibl_B138/regexfindreplace.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="regex-findreplace" border="0" alt="regex-findreplace" src="/UserFiles/Guardian/Usingregularexpressionstoidentifypossibl_B138/regexfindreplace_thumb.jpg" width="204" height="309" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using this method you can easily identify all the code to check to fix the bug mentioned above. A similar technique can be used to identify anything you like in your code.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/using-regular-expressions-to-identify-possible-bugs-in-code"&gt;&lt;strong&gt;More related document (12)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/using-regular-expressions-to-identify-possible-bugs-in-code</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/using-regular-expressions-to-identify-possible-bugs-in-code#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/using-regular-expressions-to-identify-possible-bugs-in-code</guid><pubDate>Thu, 29 Oct 2009 20:00:00 GMT</pubDate><category>Bugs</category><category>Find</category><category>Regular expression</category><category>Visual studio</category></item><item><title>When CloseMainWindow() fails: closing an application programmatically</title><description>These days I’m working on a custom application updater for our products and I had the need to Close the main Application process from the Updater process. My first implementation involved getting the main application process ID and then use something like:
&lt;div class="csharpcode-wrapper"&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;...&lt;/pre&gt;
&lt;pre class="alteven"&gt;processToWait = Process.GetProcessById(pid)&lt;/pre&gt;
&lt;pre class="alt"&gt;mProcessToWait.CloseMainWindow()&lt;/pre&gt;
&lt;pre class="alteven"&gt;mProcessToWait.WaitForExit()&lt;/pre&gt;
&lt;pre class="alt"&gt;mProcessToWait.Close()&lt;/pre&gt;
&lt;pre class="alteven"&gt;...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
Which at first worked well.&lt;br /&gt;&lt;br /&gt;Then I’ve started to play with things like Impersonation and Process spawning with different credential (to overcome some permissions problems in a production environment related to the application update process). The actual scenario is like this one: the main application runs under the user currently logged in the computer, while the Updater need to run as a different user with higher privileges. And all of a sudden the CloseMainWindow() function stopped to work...that is the application didn’t seemed to receive the close notification anymore (the usual ‘Do you really want to close?’ message box didn’t pop-up).&lt;br /&gt;&lt;br /&gt;Doing more tests I noticed that the same things would have happened if the main application was minimized on the taskbar with both the application and the updater running under the same User.&lt;br /&gt;&lt;br /&gt;Using Reflector/Spy++ and some other tools and investigating a bit it came out that the WM_CLOSE message wasn’t processed in these circumstances...and CloseMainWindow() is basically a wrapper function to post a WM_CLOSE message, so I had to look for an alternative way.&lt;br /&gt;&lt;br /&gt;It came into my mind that since we are dealing with windows, I could simulate the input that the user gives using the ‘Windows/Control box menu’, I have no Framework API to do the task so I had to use some unmanaged code and post a WM_SYSCOMMAND with SC_CLOSE as parameter (the msdn reference is here &lt;a href="http://msdn.microsoft.com/en-us/library/ms646360(VS.85).aspx" target="_blank"&gt;WM_SYSCOMMAND&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;This is how the final code looks like:
&lt;div class="csharpcode-wrapper"&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;...&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;Const&lt;/span&gt; WM_SYSCOMMAND &lt;span class="kwrd"&gt;As&lt;/span&gt; Int32 = &amp;amp;H112&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;Const&lt;/span&gt; SC_CLOSE &lt;span class="kwrd"&gt;As&lt;/span&gt; Int32 = &amp;amp;HF060I&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;Declare&lt;/span&gt; &lt;span class="kwrd"&gt;Function&lt;/span&gt; PostMessage &lt;span class="kwrd"&gt;Lib&lt;/span&gt; &lt;span class="str"&gt;"user32.dll"&lt;/span&gt; &lt;span class="kwrd"&gt;Alias&lt;/span&gt; &lt;span class="str"&gt;"PostMessageA"&lt;/span&gt; ( _&lt;/pre&gt;
&lt;pre class="alteven"&gt;  &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; hwnd &lt;span class="kwrd"&gt;As&lt;/span&gt; Int32, _&lt;/pre&gt;
&lt;pre class="alt"&gt;  &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; wMsg &lt;span class="kwrd"&gt;As&lt;/span&gt; Int32, _&lt;/pre&gt;
&lt;pre class="alteven"&gt;  &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; wParam &lt;span class="kwrd"&gt;As&lt;/span&gt; Int32, _&lt;/pre&gt;
&lt;pre class="alt"&gt;  &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; lParam &lt;span class="kwrd"&gt;As&lt;/span&gt; Int32) &lt;span class="kwrd"&gt;As&lt;/span&gt; Int32&lt;/pre&gt;
&lt;pre class="alteven"&gt;...&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;Dim&lt;/span&gt; handle &lt;span class="kwrd"&gt;As&lt;/span&gt; IntPtr = mProcessToWait.MainWindowHandle&lt;/pre&gt;
&lt;pre class="alteven"&gt;PostMessage(handle.ToInt32, WM_SYSCOMMAND, SC_CLOSE, 0)&lt;/pre&gt;
&lt;pre class="alt"&gt;mProcessToWait.WaitForExit()&lt;/pre&gt;
&lt;pre class="alteven"&gt;mProcessToWait.Close()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
I have to admit I don’t like to use unmanaged code if I can avoid it, but this works in the scenarios in which CloseMainWindow() fails.</description><link>http://www.primordialcode.com/blog/post/closemainwindow-wm_close-sc_close-closing-application-programmatically</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/closemainwindow-wm_close-sc_close-closing-application-programmatically#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/closemainwindow-wm_close-sc_close-closing-application-programmatically</guid><pubDate>Tue, 27 Oct 2009 00:18:00 GMT</pubDate><category>Closemainwindow</category><category>Sc_close</category><category>Wm_close</category><category>Wm_syscommand</category></item><item><title>DotNetMarche Workshop material - Refactoring 2 the max</title><description>Recently, together with &lt;a href="http://lacorrente.blogspot.com" target="_blank"&gt;Diego Guidi&lt;/a&gt;, &lt;a href="http://www.rainbowbreeze.it/" target="_blank"&gt;Alfredo Morresi&lt;/a&gt; and &lt;a href="http://www.nablasoft.com/alkampfer" target="_blank"&gt;Gian Maria Ricci&lt;/a&gt;, I was the speaker in the 11th workshop presented by our .net user group &lt;a href="http://www.dotnetmarche.org" target="_blank"&gt;DotNetMarche&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;We talked about solution refactoring presenting some guidelines and why/how you should do refactoring (Alfredo Morresi); then we had a session in which we presented some advances features of Resharper, one of the tool we use to help us during the refactoring activities (Diego Guidi).&lt;br /&gt;&lt;br /&gt;The 3rd session (held by the proud owner of this blog :)) was about refactoring ASP.NET pages and controls, showing how you can refactor a completely non structured and fully hardcoded solution to reach an MVC approach, while improving the general performances of the pages/controls at the same time.&lt;br /&gt;&lt;br /&gt;The last session (Gian Maria Ricci) was devoted to ASP.NET pages refactoring, showing you how the refactoring activity of a page or control in different components can facilitate the testing of each piece of the application.&lt;br /&gt;&lt;br /&gt;If you are interested, the material of the workshop is available following this link: &lt;a href="http://dotnetmarche.org/files/folders/11_-_refactoring_2themax_09102009/default.aspx" target="_blank"&gt;http://dotnetmarche.org/files/folders/11_-_refactoring_2themax_09102009/default.aspx&lt;/a&gt;

The website of the user group is in Italian (cause we are a local community), but the slides and the source code presented are written in English.&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/18th-dotnetmarche-workshop-c4-linq-parallel-libraries-and-micro-framework-.net"&gt;18th DotNetMarche Workshop: C#4, Linq, Parallel Libraries and Micro Framework .NET&lt;/a&gt; (03/09/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/dotnetmarche-workshop-material-refactoring-2-the-max"&gt;&lt;strong&gt;More related document (9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/dotnetmarche-workshop-material-refactoring-2-the-max</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/dotnetmarche-workshop-material-refactoring-2-the-max#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/dotnetmarche-workshop-material-refactoring-2-the-max</guid><pubDate>Thu, 22 Oct 2009 00:36:00 GMT</pubDate><category>Dotnetmarche</category><category>Refactoring</category></item><item><title>Castle Windsor: Transient Objects and Release Policies</title><description>&lt;p&gt;I’m not a Castle Windsor expert and I started using it heavily some months ago. These days I’m profiling some of the applications I wrote in the past to try to optimize the memory usage and reduce the footprint they allocate.&lt;/p&gt;  &lt;p&gt;Using some profiling tools I came across one of the most frequent (and biggest) mistakes you can do while using Castle Windsor with Transient objects: I always forget to call the Release() function from the container from which I requested the object.&lt;/p&gt;  &lt;p&gt;This simply happened because Castle do not handle transient DISPOSABLE objects the way I was thinking. In my mind a ‘Transient’ object is (was) something I require from the container and then I have FULL CONTROL over its life, the container (or the factory) should completely forget of the object itself.&lt;/p&gt;  &lt;p&gt;Well...it isn’t like that, the default behavior that Castle implements is to keep track of any DISPOSABLE object he creates to deallocate them in the right way when the container itself is disposed.&lt;/p&gt;  &lt;p&gt;There are a number of good reasons for this to happen, and it actually is a quite long discussion; you can find some info in these posts:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://elegantcode.com/2008/12/14/the-component-burden/"&gt;http://elegantcode.com/2008/12/14/the-component-burden/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://hammett.castleproject.org/?p=252"&gt;http://hammett.castleproject.org/?p=252&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;some other posts from my friend Alkampfer gives you some more info on the same mistake I made:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.nablasoft.com/Alkampfer/?p=104"&gt;http://www.nablasoft.com/Alkampfer/?p=104&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.nablasoft.com/Alkampfer/?p=105"&gt;http://www.nablasoft.com/Alkampfer/?p=105&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.nablasoft.com/alkampfer/index.php/2008/02/29/again-on-castle-transient-and-the-custom-lifecycle/"&gt;http://www.nablasoft.com/alkampfer/index.php/2008/02/29/again-on-castle-transient-and-the-custom-lifecycle/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;If, like me, you used some static IoC container that lived along the whole life of the application you can see the huge impact this behavior has on the memory allocated by the application: since the container keeps a reference to any disposable object (even the transient ones) you allocated, they will never be released during a GC action.&lt;/p&gt;  &lt;p&gt;So...how to modify the default Castle behavior to match my view? The goal is simple: we want to keep the actual object tracking for all the objects lifestyle types (singleton, pooled, etc...), but we do not want to track transient object; in this way the CLR is able to reclaim the memory they use during a GC call.&lt;/p&gt;  &lt;p&gt;It all seemed hard to obtain until I found out that Castle have configurable Release Policies that actually handle the object tracking, here you can find some ‘small’ documentation on the default policies that come with castle: &lt;a href="http://www.castleproject.org/container/documentation/trunk/advanced/releasepolicy.html"&gt;http://www.castleproject.org/container/documentation/trunk/advanced/releasepolicy.html&lt;/a&gt;. LifecycledComponentsReleasePolicy is actually the default one.&lt;/p&gt;  &lt;p&gt;At first my solution was to implement a new policy that modified the tracking behavior for transient objects:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Inherits from the default ReleasePolicy; do not track our own transient objects.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// Only tracks components that have decommission steps&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// registered or have pooled lifestyle.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;[Serializable]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TrulyTransientReleasePolicy : LifecycledComponentsReleasePolicy&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Track(&lt;span class="kwrd"&gt;object&lt;/span&gt; instance, Burden burden)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        ComponentModel model = burden.Model;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// to modify the way Castle handles the Transient object uncomment the following lines&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (model.LifestyleType == LifestyleType.Transient)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;base&lt;/span&gt;.Track(instance, burden);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After some more thinking I decided to modify it a bit and add a custom LifestyleManager class to use toghether with this policy to not alter the default behavior defined by the transient attribute in Castle, here’s my final solution:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// a custom Lifestyle, it will inerit from the standard class so if the TrulyTransientReleasePolicy policy&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// isn't used these objects are handled as standard transient objects &lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TrulyTransientLifestyleManager : TransientLifestyleManager&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Inherits from the default ReleasePolicy; do not track our own transient objects.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// Only tracks components that have decommission steps&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// registered or have pooled lifestyle.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;[Serializable]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TrulyTransientReleasePolicy : LifecycledComponentsReleasePolicy&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Track(&lt;span class="kwrd"&gt;object&lt;/span&gt; instance, Burden burden)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      ComponentModel model = burden.Model;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// to modify the way Castle handles the Transient object uncomment the following lines&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;//if (model.LifestyleType == LifestyleType.Transient)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;//   return;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// we skip the tracking for object marked with our custom Transient lifestyle manager&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; ((model.LifestyleType == LifestyleType.Custom) &amp;amp;&amp;amp;&lt;/pre&gt;

    &lt;pre class="alt"&gt;          (&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(TrulyTransientLifestyleManager) == model.CustomLifestyle))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.Track(instance, burden);&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To ‘force’ Castle to use this policy you have to write some code:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;_container = &lt;span class="kwrd"&gt;new&lt;/span&gt; WindsorContainer(&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlInterpreter(&lt;span class="kwrd"&gt;new&lt;/span&gt; ConfigResource(&lt;span class="str"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;)));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;_container.Kernel.ReleasePolicy = &lt;span class="kwrd"&gt;new&lt;/span&gt; TrulyTransientReleasePolicy();&lt;/pre&gt;

    &lt;pre class="alt"&gt;...&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Due to the lack of documentation I haven’t found a way to configure this policy using the configuration file, I’ll update this post when I can figure out how to do it.&lt;/p&gt;

&lt;p&gt;Here’s how you can define the components in the configuration file&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;components&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;&amp;lt;!-- test data provider, this one returns some hardcoded data --&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;component&lt;/span&gt; &lt;span class="attr"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;DisposableEntity&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;              &lt;span class="attr"&gt;service&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IoCRelease.Entities.ITestEntity,IoCRelease&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;              &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IoCRelease.Entities.DisposableEntity,IoCRelease&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;              &lt;span class="attr"&gt;lifestyle&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;transient&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;component&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;component&lt;/span&gt; &lt;span class="attr"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;DisposableEntityTransient&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;              &lt;span class="attr"&gt;service&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IoCRelease.Entities.ITestEntity,IoCRelease&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;              &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IoCRelease.Entities.DisposableEntity,IoCRelease&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;              &lt;span class="attr"&gt;lifestyle&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;custom&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;              &lt;span class="attr"&gt;customLifestyleType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IoCRelease.Castle.TrulyTransientLifestyleManager,IoCRelease&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;component&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;component&lt;/span&gt; &lt;span class="attr"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Entity&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;              &lt;span class="attr"&gt;service&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IoCRelease.Entities.ITestEntity,IoCRelease&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;              &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IoCRelease.Entities.Entity,IoCRelease&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;              &lt;span class="attr"&gt;lifestyle&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;transient&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;component&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;components&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;...&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The code sample (based on Alkampfer’s code) that comes with this articles presents a couple of test that when executed with the NUnit console will show you what happens using the custom policy:&lt;/p&gt;

&lt;p&gt;For the normal LifecycledComponentsReleasePolicy you can see the Dispose is called (the counter gets increment) and we do not have any Finalize call (which was suppressed in the dispose pattern).&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/CastleWindsorTransientObjectsandReleaseP_EBF6/IoCRelease1.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IoCRelease1" border="0" alt="IoCRelease1" src="/UserFiles/Guardian/CastleWindsorTransientObjectsandReleaseP_EBF6/IoCRelease1_thumb.jpg" width="544" height="159" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For the TrulyTransientReleasePolicy you can see that the Dispose is never directly called (the counter remains at 0), while the CLR calls the Finalize when the objects are garbage collected.&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/CastleWindsorTransientObjectsandReleaseP_EBF6/IoCRelease2.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IoCRelease2" border="0" alt="IoCRelease2" src="/UserFiles/Guardian/CastleWindsorTransientObjectsandReleaseP_EBF6/IoCRelease2_thumb.jpg" width="544" height="139" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point you have to remember that using the TrulyTransientLifestyleManager and the TrulyTransientReleasePolicy &lt;strong&gt;YOU are responsible for the object lifetime&lt;/strong&gt;, but they are no more anchored to the container and the runtime is able to reclaim their memory if never used.&lt;/p&gt;

&lt;p&gt;The good thing is that if you want to implement this behavior in an existing application (to do a quick fix at that huge memory leak you had, while working on a better way to handle/deallocate your objects) all you have to do is to change the Castle configuration file and to inject the policy into the container.&lt;/p&gt;

&lt;p&gt;Test project:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:90fd7759-75ff-429d-8c83-2754fe74ac24" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/CastleWindsorTransientObjectsandReleaseP_EBF6/IoCReleaseTests.zip" target="_self"&gt;IoCReleaseTests.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-resolve-dependencies-existing-object-instance"&gt;Castle Windsor - resolve dependencies on an existing object instance&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/castle-windsor-transient-objects-and-release-policies"&gt;&lt;strong&gt;More related document (7)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/castle-windsor-transient-objects-and-release-policies</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/castle-windsor-transient-objects-and-release-policies#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/castle-windsor-transient-objects-and-release-policies</guid><pubDate>Sat, 17 Oct 2009 01:40:00 GMT</pubDate><category>Castle windsor</category><category>Lifecycledcomponentsreleasepolicy</category><category>Releasepolicy</category><category>Transient</category></item><item><title>Missing .NET Performance Counters: how to solve it</title><description>&lt;p&gt;Today I’ve started to profile my applications to try to see if I have some memory leaks and performances bottlenecks.&lt;/p&gt;  &lt;p&gt;I just started the inspection trying to look at some performance counters (especially to check if the memory allocated by my application kept growing)... but I had the surprise of the day when I couldn0t find any .Net related performance counter on my system.&lt;/p&gt;  &lt;p&gt;At first I tried everything I knew to unload and reload performance counters, with the usual commands:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;unlodctr .NETFramework&lt;/pre&gt;

    &lt;pre class="alteven"&gt;lodctr c:\WINDOWS\Microsoft.NET\Framework\v1.1.4322\corperfmonsymbols.ini&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But they didn’t worked...&lt;/p&gt;

&lt;p&gt;Then I started to look around some registry keys and I found this one:&lt;/p&gt;

&lt;p&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\.NETFramework&lt;/p&gt;

&lt;p&gt;that seemed to contains information related to the performance counters...I googled a bit and found this Microsoft knowledge base articles that clarified the thing: &lt;a title="http://support.microsoft.com/?scid=kb%3Ben-us%3B312113&amp;amp;x=18&amp;amp;y=14" href="http://support.microsoft.com/?scid=kb%3Ben-us%3B312113&amp;amp;x=18&amp;amp;y=14"&gt;http://support.microsoft.com/?scid=kb%3Ben-us%3B312113&amp;amp;x=18&amp;amp;y=14&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems that an application messed up with my registry trying to speedup its load times and in doing so it disabled the performance counters modifying the key ‘&lt;strong&gt;Library’&lt;/strong&gt; under ‘HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\.NETFramework\Performance’ to the non valid value ‘&lt;b&gt;donotload_mscoree.dll&lt;/b&gt;’; Reverting this back to mscoree.dll and reloading the Perfmon utility I had my counters back.&lt;/p&gt;

&lt;p&gt;It costed me only 1 hour and a half of my time!&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/optimizing-wmi-query-performances-avoid-nasty-select"&gt;Optimizing WMI query performances - avoid the nasty ‘select *’&lt;/a&gt; (01/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/passing-delegate-attribute-simple-workaround"&gt;Passing a Delegate to an Attribute: a simple workaround&lt;/a&gt; (07/09/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/19th-dotnetmarche-workshop-community-tour-2011-cms-edition"&gt;19th DotNetMarche Workshop “Community Tour 2011 - CMS Edition”&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/webnet-european-conference-slides-and-samples"&gt;WebNet European Conference, Slides and Samples&lt;/a&gt; (11/06/2012)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/missing-net-performance-counters-solve"&gt;&lt;strong&gt;More related document (9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/missing-net-performance-counters-solve</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/missing-net-performance-counters-solve#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/missing-net-performance-counters-solve</guid><pubDate>Thu, 08 Oct 2009 01:55:00 GMT</pubDate><category>Net</category><category>Counters</category><category>Missing</category><category>Performance</category></item><item><title>WSS / SharePoint : filter Users with the PeopleEditor control</title><description>&lt;p&gt;Given the ListViewWebPart with advanced filtering capabilities we wrote in the previous articles, we want to extend it again and provide the ability to select which user (or users) we will use to filter our data out.&lt;/p&gt;  &lt;p&gt;We can just write a simple web part that wraps the standard PeopleEditor control that comes with WSS or SharePoint.&lt;/p&gt;  &lt;p&gt;The code is pretty straightforward, the PeopleEditor will be created and added to the Controls collection of the web part in the CreateChildControls() function. We will parse the data that the control exposes in the ITransformableFilterValues.ParameterValues property: each valid selected user will be contained in the PeopleEditor.ResolvedEntities collection (which contains PickerEntity objects).&lt;/p&gt;  &lt;p&gt;The full code is listed below:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;[Guid(&lt;span class="str"&gt;&amp;quot;4fddd9c3-37bf-48b9-84a2-0b4d96f98f92&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; SelectedUserFilterWebPart : wsswebparts.WebPart, wsswebparts.ITransformableFilterValues&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; PeopleEditor _pplEditor;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; Button _btnApplyFilter;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CreateChildControls()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.CreateChildControls();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      _pplEditor = &lt;span class="kwrd"&gt;new&lt;/span&gt; PeopleEditor();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      Controls.Add(_pplEditor);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      _btnApplyFilter = &lt;span class="kwrd"&gt;new&lt;/span&gt; Button();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      _btnApplyFilter.Text = &lt;span class="str"&gt;&amp;quot;Apply Filter&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      Controls.Add(_btnApplyFilter);&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; GetSelectedEntries()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      List&amp;lt;String&amp;gt; selectedEnties = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;try&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (PickerEntity entity &lt;span class="kwrd"&gt;in&lt;/span&gt; _pplEditor.ResolvedEntities)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (entity.IsResolved)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               selectedEnties.Add(entity.DisplayText);&lt;/pre&gt;

    &lt;pre class="alt"&gt;            }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;catch&lt;/span&gt; (Exception)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; selectedEnties;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;// Implementations of the ITransformableFilterValues properties.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; AllowMultipleValues&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        get&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; AllowAllValue&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        get&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; AllowEmptyValue&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        get&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ParameterName&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        get&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="str"&gt;&amp;quot;SelectedUser&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; ReadOnlyCollection&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; ParameterValues&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        get&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;           List&amp;lt;String&amp;gt; data = GetSelectedEntries();&lt;/pre&gt;

    &lt;pre class="alt"&gt;           &lt;span class="kwrd"&gt;if&lt;/span&gt; (data.Count == 0)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;              &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;           &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; ReadOnlyCollection&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt;(data);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;// Use the ConnectionProvider attribute to specify the method that the Web Part&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;// Framework should call to allow us to return an instance of our ITransformableFilterValues interface.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [aspnetwebparts.ConnectionProvider(&lt;span class="str"&gt;&amp;quot;Selected User Filter&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;ITransformableFilterValues&amp;quot;&lt;/span&gt;, AllowsMultipleConnections = &lt;span class="kwrd"&gt;true&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; wsswebparts.ITransformableFilterValues SetConnectionInterface()&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;this&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s a screenshot of the web parts in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/WSSSharePointacustomwebparttousethePeopl_ADD7/SharePointSelectedUser.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="SharePointSelectedUser" border="0" alt="SharePointSelectedUser" src="/UserFiles/Guardian/WSSSharePointacustomwebparttousethePeopl_ADD7/SharePointSelectedUser_thumb.png" width="604" height="316" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;With this solution you can filter on the currently logged user, or a user of your choice even in WSS without having to rely on MOSS extensions.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-create-current-user-filter-web-part"&gt;WSS/SharePoint: create a Current User Filter Web Part&lt;/a&gt; (09/07/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wss-sharepoint-adding-filtering-capabilities-customlistviewwebpart-filter-chain-fixed"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart - Filter Chain Fixed&lt;/a&gt; (11/06/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart (Current User Filter and others)&lt;/a&gt; (09/11/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wss-sharepoint-filter-users-peopleeditor"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wss-sharepoint-filter-users-peopleeditor</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wss-sharepoint-filter-users-peopleeditor#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wss-sharepoint-filter-users-peopleeditor</guid><pubDate>Wed, 23 Sep 2009 20:42:00 GMT</pubDate><category>Sharepointwsscustomcurrent userfilter</category></item><item><title>svchost.exe (LocalSystemNetworkRestricted) 100% Hard Disk usage</title><description>&lt;p&gt;Today on of my Vista developing workstations suddenly became very slow, the CPU was almost free and its usage was around 3-5%, the Hard Drive instead was overloaded with work, with its activity at 100% all the time. Trying to do any operation on the system requested ages..like 1 or 2 min to open the start menu or display a window.&lt;/p&gt;  &lt;p&gt;Restating the system didn’t helped much, so I started to investigate the problem; opening the task manager and then the resource monitor I found out that I have many processes called like svchost.exe (LocalSystemNetworkRestricted) that were reading every files on the system (even the file related to the games I play at night).&lt;/p&gt;  &lt;p&gt;So I opened the services management console to find something that could be run using svchost, I looked at every service there and found out that the ‘SuperFetch’ service (‘Ottimizzazione avvio’ in my Italian OS) was launched with this command: svchost.exe -k LocalSystemNetworkRestricted.&lt;/p&gt;  &lt;p&gt;I disabled the service and rebooted the machine (I had to perform an hard reset cause the system was still hung reading the files on the disk). After the restart the problem disappeared and the system is back to be responsive.&lt;/p&gt;  &lt;p&gt;In the end, it must be a bug of some sort related to the SuperFetch service, cause it ran fine for months without causing any problem.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/svchostexe-localsystemnetworkrestricted-100-hard-disk-usage</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/svchostexe-localsystemnetworkrestricted-100-hard-disk-usage#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/svchostexe-localsystemnetworkrestricted-100-hard-disk-usage</guid><pubDate>Tue, 22 Sep 2009 21:00:00 GMT</pubDate><category>100</category><category>Hdd</category><category>Localsystemnetworkrestricted</category><category>Superfect</category><category>Svchost</category></item><item><title>WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart (Current User Filter and others)</title><description>&lt;p&gt;Two of the biggest limitation of the standard ListViewWebPart is that it’s unable to filter the data using more than one single data provider and that it cannot use multiple values if the provider is capable of providing them (only the first value will be used). This is by design and you cannot avoid it in any way.&lt;/p&gt;  &lt;p&gt;To solve both these problems we can take the code we already wrote for our CustomListViewWebPart (see: &lt;a href="http://www.primordialcode.com/index.php/2009/09/02/wsssharepoint-create-custom-listviewwebpart/" target="_blank"&gt;WSS/SharePoint: Create a Custom ListViewWebPart&lt;/a&gt;) and modify it a bit to add the following features:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;The support for multiple data providers (using the standard SP selection dialog to wire-up the fields with the provider values). &lt;/li&gt;    &lt;li&gt;The support for multiple values from a single provider. &lt;/li&gt;    &lt;li&gt;The &amp;lt;where&amp;gt; cause of the filter will be an &amp;lt;or&amp;gt; concatenation of all the values from a single provider, and will be an &amp;lt;and&amp;gt; concatenation of the different providers filter; a pretty standard way to filter the data from a table. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Most of the code is very similar to the previous version, so I will not go through it; let’s see the key points:&lt;/p&gt;  &lt;h3&gt;Multiple Providers Support&lt;/h3&gt;  &lt;p&gt;To make this Web Part able to connect to more than one provider, using the standard interfaces provided by SharePoint, we need to create a method with the signature: &lt;em&gt;public void methodname(IFilterValues filterValues) &lt;/em&gt;and marked with then &lt;em&gt;ConnectionConsumer&lt;/em&gt; attribute that specifies &lt;em&gt;AllowMultipleConnections=true&lt;/em&gt;.&lt;/p&gt;  &lt;p&gt;Inside that method we call the &lt;em&gt;IFilterValues.SetConsumerParameters&lt;/em&gt; function that - given a collection of ConsumerParameter object (that specify the name and the capabilities of the parameters) - displays the standard SharePoint interface that allows you to choose to which field wire-up the provider.&lt;/p&gt;  &lt;p&gt;To allow you to filter on all the fields of the list we will build the parameters starting from the list you are displaying through the instance of the Web Part. Here’s the code snippet:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;[ConnectionConsumer(&lt;span class="str"&gt;&amp;quot;Filters&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;FiltersForConsumer&amp;quot;&lt;/span&gt;, AllowsMultipleConnections=&lt;span class="kwrd"&gt;true&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; SetFilter(IFilterValues filterValues)&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;if&lt;/span&gt; (filterValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// EnsureChildControls();&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      filterValues.SetConsumerParameters(GetParameters());&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      FilterProviders.Add(filterValues);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Build a parameter List to allow the filtering of the List on the values provided&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// by a series of filters.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;private&lt;/span&gt; ReadOnlyCollection&amp;lt;ConsumerParameter&amp;gt; GetParameters()&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   List&amp;lt;ConsumerParameter&amp;gt; parameters = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;ConsumerParameter&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;// we get all the fields of the list we are displaying&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   SPList list = SPContext.Current.Web.Lists[SourceList];&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;// we build a parameter for any field of the list (similar to the standard ListViewWebPart)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (SPField item &lt;span class="kwrd"&gt;in&lt;/span&gt; list.Fields)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      parameters.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ConsumerParameter(item.Title,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;          ConsumerParameterCapabilities.SupportsMultipleValues |&lt;/pre&gt;

    &lt;pre class="alt"&gt;          ConsumerParameterCapabilities.SupportsAllValue |&lt;/pre&gt;

    &lt;pre class="alteven"&gt;          ConsumerParameterCapabilities.SupportsEmptyValue |&lt;/pre&gt;

    &lt;pre class="alt"&gt;          ConsumerParameterCapabilities.SupportsSingleValue));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; ReadOnlyCollection&amp;lt;ConsumerParameter&amp;gt;(parameters);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;FilterProviders is a List&amp;lt;IFilterValues&amp;gt; that will contains the associations made by the user.&lt;/p&gt;

&lt;h3&gt;Filtering the data&lt;/h3&gt;

&lt;p&gt;If you review the code from my previous article you will remind that to render the data we used a new instance of an SPView build from the schema of the selected view, and then we altered its properties to apply a fixed filter specified by the user. Here we will do the same but we will build this CAML &amp;lt;where&amp;gt; clause based on the wiring of the providers and consumer specified by the user.&lt;/p&gt;

&lt;p&gt;The code is pretty straightforward and doesn’t need much comment, the ‘hardest’ part was to figure out how the CAML to write. Here’s the snippet:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="rem"&gt;/// how to concatenate different filters&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; &lt;span class="kwrd"&gt;const&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FiltersConcatenation = &lt;span class="str"&gt;&amp;quot;And&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt; &lt;span class="rem"&gt;/// how to concatenate multiple values in the same filter&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt; &lt;span class="kwrd"&gt;const&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FiltersMultipleValuesConcatenation = &lt;span class="str"&gt;&amp;quot;Or&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; BuildFilter(SPList list, SPView view)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;    &lt;span class="kwrd"&gt;if&lt;/span&gt; (FilterProviders.Count == 0)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;       view.Query = FilterQuery;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;    &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;       &lt;span class="kwrd"&gt;if&lt;/span&gt; (FilterProviders.Count &amp;gt; 0)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;       {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;          &lt;span class="rem"&gt;// build the filter according to the passed data&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;          &lt;span class="rem"&gt;// holds each internal filter&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;          List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; filters = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;          ReadOnlyCollection&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; paramValues;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;          &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (IFilterValues f &lt;span class="kwrd"&gt;in&lt;/span&gt; FilterProviders)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;          {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;             paramValues = f.ParameterValues;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; ((paramValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (paramValues.Count &amp;gt; 0))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;             {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;                StringBuilder innerSb = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringBuilder();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;                &lt;span class="kwrd"&gt;if&lt;/span&gt; (paramValues.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;                   innerSb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersMultipleValuesConcatenation);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  34:&lt;/span&gt;                &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (var &lt;span class="kwrd"&gt;value&lt;/span&gt; &lt;span class="kwrd"&gt;in&lt;/span&gt; paramValues)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:&lt;/span&gt;                {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  36:&lt;/span&gt;                   innerSb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;Eq&amp;gt;&amp;lt;FieldRef Name='{0}' /&amp;gt;&amp;lt;Value Type='{1}'&amp;gt;{2}&amp;lt;/Value&amp;gt;&amp;lt;/Eq&amp;gt;&amp;quot;&lt;/span&gt;, &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  37:&lt;/span&gt;                                        list.Fields[f.ParameterName].InternalName,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  38:&lt;/span&gt;                                        list.Fields[f.ParameterName].TypeAsString,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  39:&lt;/span&gt;                                        &lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  40:&lt;/span&gt;                }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  41:&lt;/span&gt;                &lt;span class="kwrd"&gt;if&lt;/span&gt; (paramValues.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  42:&lt;/span&gt;                   innerSb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;/{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersMultipleValuesConcatenation);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  43:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  44:&lt;/span&gt;                filters.Add(innerSb.ToString());&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  45:&lt;/span&gt;             }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  46:&lt;/span&gt;          }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  47:&lt;/span&gt;          &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count &amp;gt; 0)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  48:&lt;/span&gt;          {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  49:&lt;/span&gt;             StringBuilder sb = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringBuilder();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  50:&lt;/span&gt;             sb.Append(&lt;span class="str"&gt;&amp;quot;&amp;lt;Where&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  51:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  52:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  53:&lt;/span&gt;                sb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersConcatenation);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  54:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  55:&lt;/span&gt;             &lt;span class="rem"&gt;// concatenate the filters&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  56:&lt;/span&gt;             filters.ForEach(f =&amp;gt; sb.Append(f));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  57:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  58:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  59:&lt;/span&gt;                sb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;/{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersConcatenation);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  60:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  61:&lt;/span&gt;             sb.Append(&lt;span class="str"&gt;&amp;quot;&amp;lt;/Where&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  62:&lt;/span&gt;             &lt;span class="kwrd"&gt;string&lt;/span&gt; query = sb.ToString();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  63:&lt;/span&gt;             view.Query = query;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  64:&lt;/span&gt;          }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  65:&lt;/span&gt;       }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  66:&lt;/span&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  67:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As a note: if you keep adding and removing fields to a list in SharePoint you never know how the environment internally renames the fields (it happened to me once that a field with an internal name ‘Owner’ got renamed to ‘Owner1’), and you have no notice about it. The queries however need to be built using the &lt;em&gt;Internal Names&lt;/em&gt; of the fields (that are different from those you usually see on the interface, there are lots of books and documentation around that cover this argument), so I opted to store the Display Name as the parameter name and to use that as a lookup field to recover the internal name (and type) when needed - lines 36-38 of the previous code snippet.&lt;/p&gt;

&lt;h3&gt;Putting all together&lt;/h3&gt;

&lt;p&gt;After some more refactoring operation, here is the complete source code for the Web Part:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;[Guid(&lt;span class="str"&gt;&amp;quot;b7ea3f7d-b260-4ce8-9fd0-3af5aee8e0d6&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; CustomListViewWebPart : System.Web.UI.WebControls.WebParts.WebPart&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="preproc"&gt;#region&lt;/span&gt; Properties&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; ILogger Logger = LoggerFactory.GetLogger();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// The List we are displaying&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   WebBrowsable,&lt;/pre&gt;

    &lt;pre class="alt"&gt;   WebPartStorage(Storage.Shared),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   SPWebCategoryName(&lt;span class="str"&gt;&amp;quot;Settings&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alt"&gt;   WebDisplayName(&lt;span class="str"&gt;&amp;quot;Source List Name&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   WebDescription(&lt;span class="str"&gt;&amp;quot;Pass the name of the List to show&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; SourceList { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// The Default View of the list&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alt"&gt;   WebBrowsable,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   WebPartStorage(Storage.Shared),&lt;/pre&gt;

    &lt;pre class="alt"&gt;   SPWebCategoryName(&lt;span class="str"&gt;&amp;quot;Settings&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   WebDisplayName(&lt;span class="str"&gt;&amp;quot;View&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alt"&gt;   WebDescription(&lt;span class="str"&gt;&amp;quot;Pass the name of the View that you want to apply to the List&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ViewOfSourceList { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// a CAML query to filter the object&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// in a later revision we will use one or more filter providers to set this&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alt"&gt;   WebBrowsable,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   WebPartStorage(Storage.Shared),&lt;/pre&gt;

    &lt;pre class="alt"&gt;   SPWebCategoryName(&lt;span class="str"&gt;&amp;quot;Settings&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   WebDisplayName(&lt;span class="str"&gt;&amp;quot;Query&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alt"&gt;   WebDescription(&lt;span class="str"&gt;&amp;quot;Pass the Filter Query, if you wire up some Filter WebParts they have priority over the query and this will be ignored&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FilterQuery { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; List&amp;lt;IFilterValues&amp;gt; _filterProviders = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;IFilterValues&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; List&amp;lt;IFilterValues&amp;gt; FilterProviders&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _filterProviders; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; CustomListViewWebPart()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      ExportMode = WebPartExportMode.All;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CreateChildControls()&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.CreateChildControls();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      SPWeb web = SPContext.Current.Web;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;try&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            SPList list = web.Lists[SourceList];&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// create the toolbar, actually we cannot hide it, we'll need to extend the webpart and those options&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            ViewToolBar toolbar = &lt;span class="kwrd"&gt;new&lt;/span&gt; ViewToolBar();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            SPContext context = SPContext.GetContext(Context, list.Views[ViewOfSourceList].ID, list.ID, SPContext.Current.Web);&lt;/pre&gt;

    &lt;pre class="alt"&gt;            toolbar.RenderContext = context;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            Controls.Add(toolbar);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// get a reference to the view we want to use (or use the default view if nothing is specified)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            SPView webPartView;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (!&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(ViewOfSourceList))&lt;/pre&gt;

    &lt;pre class="alt"&gt;               webPartView = web.Lists[SourceList].Views[ViewOfSourceList];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               webPartView = web.Lists[SourceList].DefaultView;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// create a new view based on the original one and attach the filter query to it&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// in this way we do not need to modify/update the original element and&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// even a user without updating permissions can use this webpart&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            XmlDocument domDoc = &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlDocument();&lt;/pre&gt;

    &lt;pre class="alt"&gt;            domDoc.LoadXml(webPartView.SchemaXml);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            SPView view = &lt;span class="kwrd"&gt;new&lt;/span&gt; SPView(list, domDoc);&lt;/pre&gt;

    &lt;pre class="alt"&gt;            Logger.AppendLogFormat(&lt;span class="str"&gt;&amp;quot;View ID: {0}&amp;quot;&lt;/span&gt;, view.ID);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// build the filter&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            BuildFilter(list, view);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// render the view&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            Literal lbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Literal();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            lbl.Text = view.RenderAsHtml();&lt;/pre&gt;

    &lt;pre class="alt"&gt;            Controls.Add(lbl);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="rem"&gt;// add the logging messages if there are any&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;string&lt;/span&gt; lg = Logger.ToString();&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (!&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(lg))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            {&lt;/pre&gt;

    &lt;pre class="alt"&gt;               Literal logLbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Literal();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               logLbl.Text = &lt;span class="str"&gt;&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt; + lg;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               Controls.Add(logLbl);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            }&lt;/pre&gt;

    &lt;pre class="alt"&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;catch&lt;/span&gt; (Exception ex)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// todo: have a better way to report errors!&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            Label lbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Label();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            lbl.Text = Logger.ToString() + &lt;span class="str"&gt;&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            lbl.Text += &lt;span class="str"&gt;&amp;quot;Error occured: &amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            lbl.Text += ex.Message + &lt;span class="str"&gt;&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;&lt;/span&gt; + ex.StackTrace;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            Controls.Add(lbl);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// how to concatenate different filters&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;const&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FiltersConcatenation = &lt;span class="str"&gt;&amp;quot;And&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// how to concatenate multiple values in the same filter&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;const&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FiltersMultipleValuesConcatenation = &lt;span class="str"&gt;&amp;quot;Or&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; BuildFilter(SPList list, SPView view)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      Logger.AppendLogFormat(&lt;span class="str"&gt;&amp;quot;Filters numbers: {0}&amp;quot;&lt;/span&gt;, FilterProviders.Count);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (FilterProviders.Count == 0)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         view.Query = FilterQuery;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (FilterProviders.Count &amp;gt; 0)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// build the filter according to the passed data&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="rem"&gt;// holds each internal filter&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; filters = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            ReadOnlyCollection&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; paramValues;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (IFilterValues f &lt;span class="kwrd"&gt;in&lt;/span&gt; FilterProviders)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               paramValues = f.ParameterValues;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               Logger.AppendLogFormat(&lt;span class="str"&gt;&amp;quot;Filter: {0}&amp;quot;&lt;/span&gt;, f.ParameterName);&lt;/pre&gt;

    &lt;pre class="alt"&gt;               Logger.AppendLogFormat(&lt;span class="str"&gt;&amp;quot;Filter Params: {0}&amp;quot;&lt;/span&gt;, (paramValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;if&lt;/span&gt; ((paramValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (paramValues.Count &amp;gt; 0))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               {&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  Logger.AppendLogFormat(&lt;span class="str"&gt;&amp;quot;Found filter: {0}  values n: {1}&amp;quot;&lt;/span&gt;, f.ParameterName, paramValues.Count);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  StringBuilder innerSb = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringBuilder();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;if&lt;/span&gt; (paramValues.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alt"&gt;                     innerSb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersMultipleValuesConcatenation);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (var &lt;span class="kwrd"&gt;value&lt;/span&gt; &lt;span class="kwrd"&gt;in&lt;/span&gt; paramValues)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  {&lt;/pre&gt;

    &lt;pre class="alt"&gt;                     innerSb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;Eq&amp;gt;&amp;lt;FieldRef Name='{0}' /&amp;gt;&amp;lt;Value Type='{1}'&amp;gt;{2}&amp;lt;/Value&amp;gt;&amp;lt;/Eq&amp;gt;&amp;quot;&lt;/span&gt;, &lt;/pre&gt;

    &lt;pre class="alteven"&gt;                                          list.Fields[f.ParameterName].InternalName,&lt;/pre&gt;

    &lt;pre class="alt"&gt;                                          list.Fields[f.ParameterName].TypeAsString,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                                          &lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;if&lt;/span&gt; (paramValues.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alt"&gt;                     innerSb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;/{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersMultipleValuesConcatenation);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  filters.Add(innerSb.ToString());&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               }&lt;/pre&gt;

    &lt;pre class="alt"&gt;            }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count &amp;gt; 0)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               StringBuilder sb = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringBuilder();&lt;/pre&gt;

    &lt;pre class="alt"&gt;               sb.Append(&lt;span class="str"&gt;&amp;quot;&amp;lt;Where&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  sb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersConcatenation);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="rem"&gt;// concatenate the filters&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               filters.ForEach(f =&amp;gt; sb.Append(f));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;if&lt;/span&gt; (filters.Count &amp;gt; 1)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  sb.AppendFormat(&lt;span class="str"&gt;&amp;quot;&amp;lt;/{0}&amp;gt;&amp;quot;&lt;/span&gt;, FiltersConcatenation);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               sb.Append(&lt;span class="str"&gt;&amp;quot;&amp;lt;/Where&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;string&lt;/span&gt; query = sb.ToString();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               view.Query = query;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               Logger.AppendLog(&lt;span class="str"&gt;&amp;quot;query: {0}&amp;quot;&lt;/span&gt; + query);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            }&lt;/pre&gt;

    &lt;pre class="alt"&gt;            Logger.AppendLog(&lt;span class="str"&gt;&amp;quot;query: -&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Render(HtmlTextWriter writer)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      EnsureChildControls();&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;base&lt;/span&gt;.Render(writer);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   [ConnectionConsumer(&lt;span class="str"&gt;&amp;quot;Filters&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;FiltersForConsumer&amp;quot;&lt;/span&gt;, AllowsMultipleConnections=&lt;span class="kwrd"&gt;true&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; SetFilter(IFilterValues filterValues)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (filterValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="rem"&gt;// EnsureChildControls();&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         Logger.AppendLog(&lt;span class="str"&gt;&amp;quot;Assigning filters&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;         Logger.AppendLogFormat(&lt;span class="str"&gt;&amp;quot;Assigning filter: {0}&amp;quot;&lt;/span&gt;, filterValues.ParameterName);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         Logger.AppendLogFormat(&lt;span class="str"&gt;&amp;quot;Assigning filter: {0}&amp;quot;&lt;/span&gt;, (filterValues.ParameterValues != &lt;span class="kwrd"&gt;null&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;/pre&gt;

    &lt;pre class="alteven"&gt;         filterValues.SetConsumerParameters(GetParameters());&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         FilterProviders.Add(filterValues);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         Logger.AppendLog(&lt;span class="str"&gt;&amp;quot;Filters Assigned&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// Build a parameter List to allow the filtering of the List on the values provided&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// by a series of filters.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; ReadOnlyCollection&amp;lt;ConsumerParameter&amp;gt; GetParameters()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      List&amp;lt;ConsumerParameter&amp;gt; parameters = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;ConsumerParameter&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// we get all the fields of the list we are displaying&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      SPList list = SPContext.Current.Web.Lists[SourceList];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// we build a parameter for any field of the list (similar to the standard ListViewWebPart)&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (SPField item &lt;span class="kwrd"&gt;in&lt;/span&gt; list.Fields)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         parameters.Add(&lt;span class="kwrd"&gt;new&lt;/span&gt; ConsumerParameter(item.Title,&lt;/pre&gt;

    &lt;pre class="alt"&gt;             ConsumerParameterCapabilities.SupportsMultipleValues |&lt;/pre&gt;

    &lt;pre class="alteven"&gt;             ConsumerParameterCapabilities.SupportsAllValue |&lt;/pre&gt;

    &lt;pre class="alt"&gt;             ConsumerParameterCapabilities.SupportsEmptyValue |&lt;/pre&gt;

    &lt;pre class="alteven"&gt;             ConsumerParameterCapabilities.SupportsSingleValue));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; ReadOnlyCollection&amp;lt;ConsumerParameter&amp;gt;(parameters);&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This time I was lazy and I didn’t stripped out the logging code (I’m not particularly proud of that...but solved some logging problems fast).&lt;/p&gt;

&lt;p&gt;You can see this Web Part in action in the following screenshots, here I defined a Document Library with a field called ‘Owner’ of type ‘Person or Group’, I dropped this CustomListViewWebPart together with the CurrentUserAndGroupsFilerWebPart from my previous article:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/WSSSharePointaddingfilteringcapabilities_E89C/SharePointCLVWB1.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="SharePointCLVWB1" border="0" alt="SharePointCLVWB1" src="/UserFiles/Guardian/WSSSharePointaddingfilteringcapabilities_E89C/SharePointCLVWB1_thumb.jpg" width="530" height="230" /&gt;&lt;/a&gt; &lt;a href="/UserFiles/Guardian/WSSSharePointaddingfilteringcapabilities_E89C/SharePointCLVWB2_wp_config.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="SharePointCLVWB2_wp_config" border="0" alt="SharePointCLVWB2_wp_config" src="/UserFiles/Guardian/WSSSharePointaddingfilteringcapabilities_E89C/SharePointCLVWB2_wp_config_thumb.jpg" width="155" height="244" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When you drop the Web Part you have to configure some of its basic settings, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The List that it has to display &lt;/li&gt;

  &lt;li&gt;The View associated to the list to use (optional, if you leave this blank the default view will be used) &lt;/li&gt;

  &lt;li&gt;A custom query (optional, also if you specify some data providers this will be ignored). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is the interface you see when wiring the provider and the consumer:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/WSSSharePointaddingfilteringcapabilities_E89C/SharePointCLVWB2_config.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="SharePointCLVWB2_config" border="0" alt="SharePointCLVWB2_config" src="/UserFiles/Guardian/WSSSharePointaddingfilteringcapabilities_E89C/SharePointCLVWB2_config_thumb.jpg" width="362" height="199" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you can see the appearance is almost identical to the standard Web Part, but you can filter on more providers and values (as a bonus you have the standard pagination capability too, cause it’s exposed by the view you decided to use).&lt;/p&gt;

&lt;p&gt;Using these two simple Web Part we are able to achieve something that is extremely difficult to perform in WSS: filtering the data based on the User currently logged on the website (and I think that this approach is also easier that using the Target Audience in MOSS).&lt;/p&gt;

&lt;p&gt;Further improvement to this Web Part will be made in the near future, because I’m hoping to introduce the ability to ‘plug-in’ even the algorithm that builds the actual filter combination; so stay tuned for more.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wss-sharepoint-adding-filtering-capabilities-customlistviewwebpart-filter-chain-fixed"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart - Filter Chain Fixed&lt;/a&gt; (11/06/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wss-sharepoint-filter-users-peopleeditor"&gt;WSS / SharePoint : filter Users with the PeopleEditor control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-create-current-user-filter-web-part"&gt;WSS/SharePoint: create a Current User Filter Web Part&lt;/a&gt; (09/07/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication"&gt;SharePoint Services - Setting up a Website with Forms Authentication&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part"&gt;Windows SharePoint Services - Developing and (Remotely) Debugging a Web Part&lt;/a&gt; (03/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter"&gt;&lt;strong&gt;More related document (2)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter</guid><pubDate>Sat, 12 Sep 2009 00:44:00 GMT</pubDate><category>Sharepointwsscustomcurrent userfilterlistviewwebpart</category><category>Wss</category></item><item><title>WSS/SharePoint: create a Current User Filter Web Part</title><description>&lt;p&gt;In MOSS we can filter some data on the currently logged User using the ‘Current User Filter Web Part’, unfortunately it’s not available in WSS. However building a simple Web Part that retriever the current user and that can be employed as a connection provider for other Web Parts isn’t that difficult.&lt;/p&gt;  &lt;p&gt;To create a Web Part that act a data provider using the standard WSS/SharePoint infrastructure all you have to do is to implement the &lt;em&gt;ITransformableFilterValues&lt;/em&gt; interface. You can then specify if your Web Part will provide single or multiple values for the parameter it will expose, if it can support an empty value and so on.&lt;/p&gt;  &lt;p&gt;Accessing the currently logged user is extremely simple, actually it’s just a single line of code:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;SPUser user = SPContext.Current.Web.CurrentUser;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We cannot return a plain SPUser object as the values of our provider Web Part, because the &lt;em&gt;ITransformableFilterValues.ParameterValues &lt;/em&gt;that is actually used to return values to the callers is of type ReadOnlyCollection&amp;lt;string&amp;gt;.&lt;/p&gt;

&lt;p&gt;So we have to find a way to return a single property and convert it to a string that is usable by the consumer; for this first barbaric implementation we simply define an enumeration that will state which field to extract and send to the consumer.&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;enum&lt;/span&gt; ReturnType&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   Name,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   ID&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As an added feature we want to be able to filter on the currently logged and on the groups he belongs to (a thing that isn’t easily done using the standard WebParts that WSS offers); so our Web Part will return multiple values for it’s ‘CurrentUser’ parameter, the first value will always be the username or the user id, followed by the names or ids of the groups to which he belongs to.&lt;/p&gt;

&lt;p&gt;Returning the user data as first parameter guarantees that you can use this filter provider with the standard ListViewWebPart (or other Web Parts) that WSS provides.&lt;/p&gt;

&lt;p&gt;Here’s the actual implementation code:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;[Guid(&lt;span class="str"&gt;&amp;quot;bf1f0d2a-eb32-4cbf-a3a0-561ae42bdf96&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; CurrentUserAndGroupsFilterWebPart : wsswebparts.WebPart, wsswebparts.ITransformableFilterValues&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; CurrentUserAndGroupsFilterWebPart()&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      ReturnType = ReturnType.Name;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// The Default View of the list&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alt"&gt;    WebBrowsable(),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    WebPartStorage(Storage.Shared),&lt;/pre&gt;

    &lt;pre class="alt"&gt;    SPWebCategoryName(&lt;span class="str"&gt;&amp;quot;Settings&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    WebDisplayName(&lt;span class="str"&gt;&amp;quot;Return Type&amp;quot;&lt;/span&gt;),&lt;/pre&gt;

    &lt;pre class="alt"&gt;    WebDescription(&lt;span class="str"&gt;&amp;quot;Select if use the Name or the ID as the values retuned to the consumers&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; ReturnType ReturnType { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;// Implementations of the ITransformableFilterValues properties.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; AllowMultipleValues&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; AllowAllValue&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      get&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; AllowEmptyValue&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ParameterName&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      get&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="str"&gt;&amp;quot;CurrentUser&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   [wsswebparts.WebPartStorage(wsswebparts.Storage.None)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; ReadOnlyCollection&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; ParameterValues&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; data = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// you have to filter on the same value that is displayed.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         SPUser user = SPContext.Current.Web.CurrentUser;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// string strUser = &amp;quot;&amp;lt;Value Type='User'&amp;gt;&amp;quot; + user.ID + &amp;quot;;#&amp;quot; + user.LoginName + &amp;quot;&amp;lt;/value&amp;gt;&amp;quot;;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (user.IsSiteAdmin)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         data.Add(ExtractData(user, &lt;span class="kwrd"&gt;this&lt;/span&gt;.ReturnType));&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (SPGroup g &lt;span class="kwrd"&gt;in&lt;/span&gt; user.Groups)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            data.Add(ExtractData(g, &lt;span class="kwrd"&gt;this&lt;/span&gt;.ReturnType));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; ReadOnlyCollection&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt;(data);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ExtractData(SPPrincipal principal, ReturnType rt)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;switch&lt;/span&gt; (rt)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;case&lt;/span&gt; ReturnType.ID:&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; principal.ID.ToString();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;default&lt;/span&gt;:&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; principal.Name;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;// Use the ConnectionProvider attribute to specify the method that the Web Part&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;// Framework should call to allow us to return an instance of our ITransformableFilterValues interface.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   [aspnetwebparts.ConnectionProvider(&lt;span class="str"&gt;&amp;quot;Current User And Groups&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;CurrentUserAnGroupsID&amp;quot;&lt;/span&gt;, AllowsMultipleConnections = &lt;span class="kwrd"&gt;true&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; wsswebparts.ITransformableFilterValues SetConnectionInterface()&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;this&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To use this Web Part just instantiate it on a page with a ListViewWebPart (the standard control that renders a document library is a ListViewWebPart), define a view on the list that will expose some data related to a user (it can be the standard Author field or a custom ‘User or Group’ field), wire up the two and you have your list filtered on the currently logged user.&lt;/p&gt;

&lt;p&gt;Beware that the data returned by the filter Web Part and the data exposed by the view must match...so if you expose the ID, select the ID as the returned type of the filter.&lt;/p&gt;

&lt;p&gt;In a next post I will show how you can modify the CustomListViewWebPart I presented earlier (&lt;a href="http://www.primordialcode.com/index.php/2009/09/02/wsssharepoint-create-custom-listviewwebpart/" target="_blank"&gt;Create a Custom ListViewWebPart&lt;/a&gt;) and allow it to become a multiple filters consumer (supporting multiple values for filters too), a thing that I wasn’t able to obtain using the standard Web Parts in WSS or MOSS.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wss-sharepoint-filter-users-peopleeditor"&gt;WSS / SharePoint : filter Users with the PeopleEditor control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wss-sharepoint-adding-filtering-capabilities-customlistviewwebpart-filter-chain-fixed"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart - Filter Chain Fixed&lt;/a&gt; (11/06/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart (Current User Filter and others)&lt;/a&gt; (09/11/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wsssharepoint-create-current-user-filter-web-part"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wsssharepoint-create-current-user-filter-web-part</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wsssharepoint-create-current-user-filter-web-part#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wsssharepoint-create-current-user-filter-web-part</guid><pubDate>Mon, 07 Sep 2009 16:12:00 GMT</pubDate><category>Sharepointwsscustomcurrent userfilter</category></item><item><title>VSeWSS: Unable to start debugging.The web server is not configured correctly</title><description>&lt;p&gt;If you ever tried to debug a SharePoint WebPart project created with VSeWSS, you might have faced this problem, and like me you might have lost a lot of time trying to check the IIS configuration following one of the many guides you can find around.&lt;/p&gt;  &lt;p&gt;Here are some links:&lt;/p&gt;  &lt;p&gt;&lt;a title="http://msdn.microsoft.com/en-us/library/aa290100%28VS.71%29.aspx" href="http://msdn.microsoft.com/en-us/library/aa290100%28VS.71%29.aspx"&gt;http://msdn.microsoft.com/en-us/library/aa290100%28VS.71%29.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title="http://msdn.microsoft.com/en-us/library/0y3b8byc.aspx" href="http://msdn.microsoft.com/en-us/library/0y3b8byc.aspx"&gt;http://msdn.microsoft.com/en-us/library/0y3b8byc.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The error reported is quite misleading and the solution was extremely simple (and stupid): before following all the steps reported in the guides, check the web.config of the WSS/SharePoint site you are trying to debug and change the ‘debug=”false”’ line to ‘debug=”true”’; here’s how it should look like:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;compilation&lt;/span&gt; &lt;span class="attr"&gt;batch&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;debug&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I have to admit I’ve lost over 1 hour of my time on this...and I’m a bit upset :D&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part"&gt;Windows SharePoint Services - Developing and (Remotely) Debugging a Web Part&lt;/a&gt; (03/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/vsewss-unable-start-debuggingthe-web-server-configured-correctly"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/vsewss-unable-start-debuggingthe-web-server-configured-correctly</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/vsewss-unable-start-debuggingthe-web-server-configured-correctly#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/vsewss-unable-start-debuggingthe-web-server-configured-correctly</guid><pubDate>Thu, 03 Sep 2009 20:26:00 GMT</pubDate><category>Sharepointwssvsewssunable to start debugging</category></item><item><title>WSS/SharePoint: Create a Custom ListViewWebPart</title><description>&lt;p&gt;
	The standard ListViewWebPart, while it does a lot of work under the hood, offers quite limited functionalities when it comes to programmatically filter the data: even if you can wire up a filter WebPart that provide multiple values, only the first one will be considered; plus you can set only a single WebPart as the &amp;lsquo;data provider&amp;rsquo; for the ListView (and this makes the realization of complex filter very hard).&lt;/p&gt;
&lt;p&gt;
	You can rely on different techniques to accomplish the job:&lt;/p&gt;
&lt;p&gt;
	- using SharePoint designer and create custom pages there (but it&amp;rsquo;s like hard coding the things and the reusability is minimal).&lt;/p&gt;
&lt;p&gt;
	- you can define a set of views and assign them to different users, but it can be easily done only in MOSS using the Target Audience feature, and you cannot do it in WSS.&lt;/p&gt;
&lt;p&gt;
	- other alternatives I do not know...&lt;/p&gt;
&lt;p&gt;
	I didn&amp;rsquo;t liked any of these approaches and so I decided to try to customize the ListViewWebPart. You cannot directly inherit from the control (the class itself is marked as &amp;lsquo;sealed&amp;rsquo;, plus it can use many external resources you never know where they can reside given the structure of SharePoint).&lt;/p&gt;
&lt;p&gt;
	I started the thing trying to use the original control, but there were problems in the way it handled the views..that is to work correctly it needs to refer to an existing view in the database; but in order to apply a custom filter query to that view, you have to call for the &amp;lsquo;Update&amp;rsquo; method of the view object. If the user do not have the right permission that operation will fail and you&amp;rsquo;ll have an &amp;lsquo;access denied, log with another user&amp;rsquo; (or something similar) error.&lt;/p&gt;
&lt;p&gt;
	To overcome this I decided to create a brand new View object based on the schema of the current view (or the view the user have selected) and to call its RenderAsHtml() method; the result is a WebPart that act as the original ListViewWebPart, but that you can easily filter and customize (even in WSS).&lt;/p&gt;
&lt;p&gt;
	Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;div class="csharpcode-wrapper"&gt;
	&lt;div class="csharpcode"&gt;
		&lt;pre class="alt"&gt;[Guid(&lt;span class="str"&gt;&amp;quot;b7ea3f7d-b260-4ce8-9fd0-3af5aee8e0d6&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; CustomListViewWebPart : System.Web.UI.WebControls.WebParts.WebPart&lt;/pre&gt;&lt;pre class="alt"&gt;{&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="preproc"&gt;#region&lt;/span&gt; Properties&lt;/pre&gt;&lt;pre class="alt"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; strSourceList = &lt;span class="kwrd"&gt;string&lt;/span&gt;.Empty;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; strViewOfSourceList = &lt;span class="kwrd"&gt;string&lt;/span&gt;.Empty;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; strQuery = &lt;span class="kwrd"&gt;string&lt;/span&gt;.Empty;&lt;/pre&gt;&lt;pre class="alt"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &lt;summary&gt;&lt;/summary&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// The List we are displaying&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;    [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;&lt;pre class="alteven"&gt;    WebBrowsable(),&lt;/pre&gt;&lt;pre class="alt"&gt;    WebDisplayName(&lt;span class="str"&gt;&amp;quot;List Name&amp;quot;&lt;/span&gt;),&lt;/pre&gt;&lt;pre class="alteven"&gt;    WebDescription(&lt;span class="str"&gt;&amp;quot;Pass the name of the List to show&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; SourceList&lt;/pre&gt;&lt;pre class="alteven"&gt;    {&lt;/pre&gt;&lt;pre class="alt"&gt;        get&lt;/pre&gt;&lt;pre class="alteven"&gt;        {&lt;/pre&gt;&lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; strSourceList;&lt;/pre&gt;&lt;pre class="alteven"&gt;        }&lt;/pre&gt;&lt;pre class="alt"&gt;        set&lt;/pre&gt;&lt;pre class="alteven"&gt;        {&lt;/pre&gt;&lt;pre class="alt"&gt;            strSourceList = &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;&lt;pre class="alteven"&gt;        }&lt;/pre&gt;&lt;pre class="alt"&gt;    }&lt;/pre&gt;&lt;pre class="alteven"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &lt;summary&gt;&lt;/summary&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// The Default View of the list&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;    [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;&lt;pre class="alt"&gt;    WebBrowsable(),&lt;/pre&gt;&lt;pre class="alteven"&gt;    WebDisplayName(&lt;span class="str"&gt;&amp;quot;View&amp;quot;&lt;/span&gt;),&lt;/pre&gt;&lt;pre class="alt"&gt;    WebDescription(&lt;span class="str"&gt;&amp;quot;Pass the name of the View that you want to apply to the List&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ViewOfSourceList&lt;/pre&gt;&lt;pre class="alt"&gt;    {&lt;/pre&gt;&lt;pre class="alteven"&gt;        get&lt;/pre&gt;&lt;pre class="alt"&gt;        {&lt;/pre&gt;&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; strViewOfSourceList;&lt;/pre&gt;&lt;pre class="alt"&gt;        }&lt;/pre&gt;&lt;pre class="alteven"&gt;        set&lt;/pre&gt;&lt;pre class="alt"&gt;        {&lt;/pre&gt;&lt;pre class="alteven"&gt;            strViewOfSourceList = &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;&lt;pre class="alt"&gt;        }&lt;/pre&gt;&lt;pre class="alteven"&gt;    }&lt;/pre&gt;&lt;pre class="alt"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &lt;summary&gt;&lt;/summary&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// a CAML query to filter the object&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &lt;remarks&gt;&lt;/remarks&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// in a later revision we will use one or more filter providers to set this&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;    [Personalizable(&lt;span class="kwrd"&gt;true&lt;/span&gt;),&lt;/pre&gt;&lt;pre class="alt"&gt;    WebBrowsable(),&lt;/pre&gt;&lt;pre class="alteven"&gt;    WebDisplayName(&lt;span class="str"&gt;&amp;quot;Query&amp;quot;&lt;/span&gt;),&lt;/pre&gt;&lt;pre class="alt"&gt;    WebDescription(&lt;span class="str"&gt;&amp;quot;Pass the Filter Query&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FilterQuery&lt;/pre&gt;&lt;pre class="alt"&gt;    {&lt;/pre&gt;&lt;pre class="alteven"&gt;        get&lt;/pre&gt;&lt;pre class="alt"&gt;        {&lt;/pre&gt;&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; strQuery;&lt;/pre&gt;&lt;pre class="alt"&gt;        }&lt;/pre&gt;&lt;pre class="alteven"&gt;        set&lt;/pre&gt;&lt;pre class="alt"&gt;        {&lt;/pre&gt;&lt;pre class="alteven"&gt;            strQuery = &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;&lt;pre class="alt"&gt;        }&lt;/pre&gt;&lt;pre class="alteven"&gt;    }&lt;/pre&gt;&lt;pre class="alt"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; CustomListViewWebPart()&lt;/pre&gt;&lt;pre class="alt"&gt;    {&lt;/pre&gt;&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;this&lt;/span&gt;.ExportMode = WebPartExportMode.All;&lt;/pre&gt;&lt;pre class="alt"&gt;    }&lt;/pre&gt;&lt;pre class="alteven"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CreateChildControls()&lt;/pre&gt;&lt;pre class="alteven"&gt;    {&lt;/pre&gt;&lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;base&lt;/span&gt;.CreateChildControls();&lt;/pre&gt;&lt;pre class="alteven"&gt;        &lt;/pre&gt;&lt;pre class="alt"&gt;        SPWeb web = SPContext.Current.Web;&lt;/pre&gt;&lt;pre class="alteven"&gt;        {&lt;/pre&gt;&lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;try&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;            {&lt;/pre&gt;&lt;pre class="alt"&gt;                SPList list = web.Lists[SourceList];&lt;/pre&gt;&lt;pre class="alteven"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// create the toolbar, actually we cannot hide it, we&amp;#39;ll need to extend the webpart and those options&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;                ViewToolBar toolbar = &lt;span class="kwrd"&gt;new&lt;/span&gt; ViewToolBar();&lt;/pre&gt;&lt;pre class="alt"&gt;                SPContext context = SPContext.GetContext(&lt;span class="kwrd"&gt;this&lt;/span&gt;.Context, list.Views[ViewOfSourceList].ID, list.ID, SPContext.Current.Web);&lt;/pre&gt;&lt;pre class="alteven"&gt;                toolbar.RenderContext = context;&lt;/pre&gt;&lt;pre class="alt"&gt;                Controls.Add(toolbar);&lt;/pre&gt;&lt;pre class="alteven"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// get a reference to the view we want to use&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;                SPView webPartView = web.Lists[SourceList].Views[ViewOfSourceList];&lt;/pre&gt;&lt;pre class="alt"&gt;               &lt;/pre&gt;&lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// create a new view based on the original one and attach the filter query to it&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// in this way we do not need to modify/update the original element and&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// even a user without updating permissions can use this webpart&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;                XmlDocument domDoc = &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlDocument();&lt;/pre&gt;&lt;pre class="alteven"&gt;                domDoc.LoadXml(webPartView.SchemaXml);&lt;/pre&gt;&lt;pre class="alt"&gt;                SPView view = &lt;span class="kwrd"&gt;new&lt;/span&gt; SPView(list, domDoc);&lt;/pre&gt;&lt;pre class="alteven"&gt;                view.Query = FilterQuery;&lt;/pre&gt;&lt;pre class="alt"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// render the view&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;                Literal lbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Literal();&lt;/pre&gt;&lt;pre class="alteven"&gt;                lbl.Text = view.RenderAsHtml();&lt;/pre&gt;&lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;this&lt;/span&gt;.Controls.Add(lbl);&lt;/pre&gt;&lt;pre class="alteven"&gt;            }&lt;/pre&gt;&lt;pre class="alt"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;catch&lt;/span&gt; (Exception ex)&lt;/pre&gt;&lt;pre class="alt"&gt;            {&lt;/pre&gt;&lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// todo: have a better way to report errors!&lt;/span&gt;&lt;/pre&gt;&lt;pre class="alt"&gt;                Label lbl = &lt;span class="kwrd"&gt;new&lt;/span&gt; Label();&lt;/pre&gt;&lt;pre class="alteven"&gt;                lbl.Text = &lt;span class="str"&gt;&amp;quot;Error occured: &amp;quot;&lt;/span&gt;;&lt;/pre&gt;&lt;pre class="alt"&gt;                lbl.Text += ex.Message;&lt;/pre&gt;&lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;this&lt;/span&gt;.Controls.Add(lbl);&lt;/pre&gt;&lt;pre class="alt"&gt;            }&lt;/pre&gt;&lt;pre class="alteven"&gt;        }&lt;/pre&gt;&lt;pre class="alt"&gt;    }&lt;/pre&gt;&lt;pre class="alteven"&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Render(HtmlTextWriter writer)&lt;/pre&gt;&lt;pre class="alteven"&gt;    {&lt;/pre&gt;&lt;pre class="alt"&gt;        EnsureChildControls();&lt;/pre&gt;&lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;base&lt;/span&gt;.Render(writer);&lt;/pre&gt;&lt;pre class="alt"&gt;    }&lt;/pre&gt;&lt;pre class="alteven"&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	To use it, just instantiate it on a page and set the &amp;lsquo;List&amp;rsquo;, &amp;lsquo;View&amp;rsquo; and optionally &amp;lsquo;Query&amp;rsquo; properties to the right values.&lt;/p&gt;
&lt;p&gt;
	On the next articles of this series I&amp;rsquo;ll show you how to create custom filters and wire them to an evolved version of this WebPart.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/wsssharepoint-create-custom-listviewwebpart</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wsssharepoint-create-custom-listviewwebpart#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wsssharepoint-create-custom-listviewwebpart</guid><pubDate>Wed, 02 Sep 2009 19:32:00 GMT</pubDate><category>Sharepointwsscustomlistviewwebpart</category></item><item><title>WPF: yet another way to customize buttons controls (and controls in general)</title><description>&lt;p&gt;Days ago I needed a way to add an image and some other extensions to the standard button controls in WPF, I did a similar thing in the past in SIlverlight, but I had to rewrite the full control template.&lt;/p&gt;  &lt;p&gt;I wanted to avoid this situation, so I started looking around and I found two very good post on the subject:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/knom/archive/2007/10/31/wpf-control-development-3-ways-to-build-an-imagebutton.aspx" target="_blank"&gt;WPF Control Development - 3 Ways to build an ImageButton&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.hardcodet.net/2009/01/create-wpf-image-button-through-attached-properties" target="_blank"&gt;Using Attached Properties to Create a WPF Image Button&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Both those approach are good but they didn’t satisfied me in full: bad support for templating in the first case, and too much xaml to write in the second. So I merged both approach and came out with a solution that fulfills my needs:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;I created and inherited control &lt;/li&gt;    &lt;li&gt;I added some dependency properties to use it in xaml (that is specify the image) &lt;/li&gt;    &lt;li&gt;I used the ‘ContentTemplate’ and ‘DataTemplate’ features to define the style of the control (replacing the facto the standard content of the button. &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;Here’s the new button class:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ImageButton : Button&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;static&lt;/span&gt; ImageButton()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      DefaultStyleKeyProperty.OverrideMetadata(&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ImageButton), &lt;span class="kwrd"&gt;new&lt;/span&gt; FrameworkPropertyMetadata(&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ImageButton)));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; ImageButton()&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;this&lt;/span&gt;.Loaded += &lt;span class="kwrd"&gt;new&lt;/span&gt; RoutedEventHandler(ImageButton_Loaded);&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// this event is used to adapt the style in case the control is used in a toolbar&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;sender&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;void&lt;/span&gt; ImageButton_Loaded(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, RoutedEventArgs e)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (Style == &lt;span class="kwrd"&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="kwrd"&gt;this&lt;/span&gt;.Parent &lt;span class="kwrd"&gt;is&lt;/span&gt; ToolBar)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         Style = (Style)FindResource(ToolBar.ButtonStyleKey);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; ImageSource Image&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; (ImageSource)GetValue(ImageProperty); }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      set { SetValue(ImageProperty, &lt;span class="kwrd"&gt;value&lt;/span&gt;); }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;// Using a DependencyProperty as the backing store for Image.  This enables animation, styling, binding, etc...&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;readonly&lt;/span&gt; DependencyProperty ImageProperty =&lt;/pre&gt;

    &lt;pre class="alteven"&gt;       DependencyProperty.Register(&lt;span class="str"&gt;&amp;quot;Image&amp;quot;&lt;/span&gt;, &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ImageSource), &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ImageButton), &lt;span class="kwrd"&gt;new&lt;/span&gt; UIPropertyMetadata(&lt;span class="kwrd"&gt;null&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;And here’s the template (to be placed in the generic.xaml file)&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&amp;lt;Style TargetType=&lt;span class="str"&gt;&amp;quot;{x:Type Buttons:ImageButton}&amp;quot;&lt;/span&gt; BasedOn=&lt;span class="str"&gt;&amp;quot;{StaticResource {x:Type Button}}&amp;quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &amp;lt;Setter Property=&lt;span class="str"&gt;&amp;quot;ContentTemplate&amp;quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &amp;lt;Setter.Value&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &amp;lt;DataTemplate&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &amp;lt;StackPanel Orientation=&lt;span class="str"&gt;&amp;quot;Horizontal&amp;quot;&lt;/span&gt;&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &amp;lt;Image Source=&lt;span class="str"&gt;&amp;quot;{Binding Path=(Image),&lt;/pre&gt;

    &lt;pre class="alt"&gt;                    RelativeSource={RelativeSource FindAncestor,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                    AncestorType={x:Type Buttons:ImageButton}}}&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &amp;lt;TextBlock&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         Text=&lt;span class="str"&gt;&amp;quot;{TemplateBinding Content}&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         HorizontalAlignment=&lt;span class="str"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &amp;lt;/StackPanel&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &amp;lt;/DataTemplate&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &amp;lt;/Setter.Value&amp;gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &amp;lt;/Setter&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;lt;/Style&amp;gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here the trick is to use the ‘BasedOn’ attribute of the Style, In this way we can inherit from the standard control template and override only the attribute we want to change.&lt;/p&gt;

&lt;p&gt;The usage of this class now satisfies me:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Buttons:ImageButton&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Save&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;IsEnabled&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding AllowEdit}&amp;quot;&lt;/span&gt; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;                     &lt;span class="attr"&gt;Click&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;BtnSave_Click&amp;quot;&lt;/span&gt; &lt;/pre&gt;

    &lt;pre class="alt"&gt;                     &lt;span class="attr"&gt;Image&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;/XXXX.Warehouse;component/Images/save-alt.png&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;
A similar approach can be followed to customize any other WPF control.&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp"&gt;WPF, Silverlight, WP7 and the Async CTP&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls"&gt;Silverlight 2 RC0 – first problems due to undocumented breaking changes on disabled controls&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed"&gt;Silverlight Pagination Control – bug fixed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wpf-customize-buttons-controls-controls-general"&gt;&lt;strong&gt;More related document (23)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wpf-customize-buttons-controls-controls-general</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wpf-customize-buttons-controls-controls-general#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wpf-customize-buttons-controls-controls-general</guid><pubDate>Fri, 28 Aug 2009 20:05:00 GMT</pubDate><category>Button</category><category>Control</category><category>Customize</category><category>Image</category><category>Wpf</category></item><item><title>VSeWSS: how to solve the ‘SecurityException: Access denied’ issue</title><description>&lt;p&gt;I started using VSeWSS as a support tool to develop a WSS/SharePoint application and I had to face some common issues. Sometimes when you try to ‘build and deploy’ - hum...this sentence sounds somewhat familiar :D - your solution you’ll get this exception reported (in the detailed log that VSeWSS emits):&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;System.Security.SecurityException: Access denied.&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   at Microsoft.SharePoint.Tools.Reflection.ReflectionUtility.InvokeMethod(MethodBase method, Object instance, Object[] parameters)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   at Microsoft.SharePoint.Tools.Reflection.ReflectionUtility.InvokeMethod(Type type, String methodName, Object instance, Object[] parameters)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   at Microsoft.SharePoint.Tools.SharePointProxies.SPProxy.InvokeMethod(String name, Object[] parameters)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   at Microsoft.SharePoint.Tools.SharePointProxies.SPSolutionCollectionProxy.Add(String path)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   at Microsoft.SharePoint.Tools.SharePointProxies.SPSolutionFacade.AddSolution(String url, String solutionFilePath, Boolean solutionContainsWebApplicationResource)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   at VSeWSS.Server.Services.SPService.AddSolution(String url, String solutionFilePath, Boolean solutionContainsWebApplicationResource)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;The Zone of the assembly that failed was:&lt;/pre&gt;

    &lt;pre class="alt"&gt;MyComputer&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As you can see you do not have many clues on what’s going on under the hood...It must be a problems related to the permissions under which the User related to the application pool under which the VSeWSS web service runs. In my case it runs with the same application pool of the SharePoint Central Administration Console, and it uses a custom user I called SharePointDB (take a look at my old series of articles about how to setup WSS/SharePoint).&lt;/p&gt;

&lt;p&gt;For the things to work correctly this user must be a member of the following groups: &lt;strong&gt;Administrators&lt;/strong&gt;, &lt;strong&gt;WSS_ADMIN_WPG&lt;/strong&gt;, &lt;strong&gt;WSS_RESTRICTED_WPG&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Romeo Pruno (&lt;a title="http://www.nonaka.eu/" href="http://www.nonaka.eu/"&gt;http://www.nonaka.eu/&lt;/a&gt;) pointed me out that the same problem can happen if the current user (or the account under which you run Visual Studio) is not a WSS/SharePoint Farm administrator.&lt;/p&gt;

&lt;p&gt;After changing the Groups to which the user is associated to, perform an ‘&lt;strong&gt;iisreset&lt;/strong&gt;’ and then try to deploy the project again.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/linq-nhibernate-query-property-setter"&gt;Linq to NHibernate: how to query on a property without setter&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/vsewss-solve-securityexception-access-denied-issue"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/vsewss-solve-securityexception-access-denied-issue</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/vsewss-solve-securityexception-access-denied-issue#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/vsewss-solve-securityexception-access-denied-issue</guid><pubDate>Wed, 26 Aug 2009 23:03:00 GMT</pubDate><category>Access denied</category><category>Sharepointwssvsewsssecurityexceotion</category></item><item><title>VSeWSS: how to solve the WebNotFoundException</title><description>&lt;p&gt;I started using VSeWSS as a support tool to develop a WSS/SharePoint application and I had to face some common issues. Sometimes when you try to ‘build and deploy’ your solution you’ll get this exception reported (in the detailed log that VSeWSS emits):&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;Microsoft.SharePoint.Tools.WebNotFoundException: No SharePoint Site exists at the specified URL: http:&lt;span class="rem"&gt;//XXXXXX. The Web application at http://sharepntdev could not be found. Verify that you have typed the URL correctly. If the URL should be serving existing content, the system administrator may need to add a new request URL mapping to the intended application. ---&amp;gt; System.IO.FileNotFoundException: The Web application at http://sharepntdev/ could not be found. Verify that you have typed the URL correctly. If the URL should be serving existing content, the system administrator may need to add a new request URL mapping to the intended application.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   at Microsoft.SharePoint.SPSite..ctor(SPFarm farm, Uri requestUri, Boolean contextSite, SPUserToken userToken)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   at Microsoft.SharePoint.SPSite..ctor(String requestUrl)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   --- End of inner exception stack trace ---&lt;/pre&gt;

    &lt;pre class="alt"&gt;   at Microsoft.SharePoint.Tools.SharePointProxies.SPProxyUtility.GetWeb(String url)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   at Microsoft.SharePoint.Tools.SharePointProxies.SPWebFacade.GetWeb(String url)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   at VSeWSS.Server.Services.SPService.GetWeb(String url)&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It tells you the URL in which he’s trying to deploy your facility. To correct that just open the project properties and go to the ‘Debug’ tab, then insert the correct URL in the field ‘Start browser with URL:’ like in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/VseWSShowtosolvetheWebNotFoundException_EDD3/WebNotFoundExceptionProjectProperties.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="WebNotFoundExceptionProjectProperties" border="0" alt="WebNotFoundExceptionProjectProperties" src="/UserFiles/Guardian/VseWSShowtosolvetheWebNotFoundException_EDD3/WebNotFoundExceptionProjectProperties_thumb.jpg" width="593" height="289" /&gt;&lt;/a&gt;&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/vsewss-solve-webnotfoundexception</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/vsewss-solve-webnotfoundexception#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/vsewss-solve-webnotfoundexception</guid><pubDate>Wed, 26 Aug 2009 01:01:00 GMT</pubDate><category>Sharepointwssvsewss</category><category>Webnotfoundexception</category></item><item><title>WPF: force all the validation rules attached to an object to be executed</title><description>&lt;p&gt;I’m working on a WPF application that have some validation performed through the standard ValidationRule system employed by WPF at the UI level.&lt;/p&gt;  &lt;p&gt;Recently I needed a way to validate (that is check the state and force the execution of any validation rule) full portions of the Visual Tree. The idea was to call a function that, given a DependencyObject would traverse the tree and force the execution of any validation rule attached to a any Binding we can find.&lt;/p&gt;  &lt;p&gt;The first step is then find out how to get all the Dependency Properties that an object exposes; I’ve ‘googled’ a bit and found out many solution that use the DependencyObject.GetLocalValueEnumerator() method...unfortunately this one is not useful in my case, cause it doesn’t return values set in templates.&lt;/p&gt;  &lt;p&gt;In the end I was forced to use reflection to get the dependency properties of an object and for performances reasons I decided to cache the result of those reflection calls in a dictionary.&lt;/p&gt;  &lt;p&gt;The rest of the function is straightforward and it’s a modified version of a routine you can find on the ‘Programming WPF’ book. To force the validation to be performed instead of calling the Validation.MarkInvalid() function I choose to get the binding expression and call it’s update methods which guarantee that the associated error collection of an object is cleared if the state becomes valid again.&lt;/p&gt;  &lt;p&gt;Here’s some code:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Validator&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; Dictionary&amp;lt;Type, List&amp;lt;DependencyProperty&amp;gt;&amp;gt; PropertiesReflectionChace = &lt;span class="kwrd"&gt;new&lt;/span&gt; Dictionary&amp;lt;Type, List&amp;lt;DependencyProperty&amp;gt;&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; List&amp;lt;DependencyProperty&amp;gt; GetDPs(Type t)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (PropertiesReflectionChace.ContainsKey(t))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; PropertiesReflectionChace[t];&lt;/pre&gt;

    &lt;pre class="alt"&gt;      FieldInfo[] properties = t.GetFields(BindingFlags.Public | BindingFlags.GetProperty |&lt;/pre&gt;

    &lt;pre class="alteven"&gt;           BindingFlags.Static | BindingFlags.FlattenHierarchy);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// we cycle and store only the dependency properties&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      List&amp;lt;DependencyProperty&amp;gt; dps = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;DependencyProperty&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (FieldInfo field &lt;span class="kwrd"&gt;in&lt;/span&gt; properties)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (field.FieldType == &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(DependencyProperty))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            dps.Add((DependencyProperty)field.GetValue(&lt;span class="kwrd"&gt;null&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;      PropertiesReflectionChace.Add(t, dps);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; dps;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// checks all the validation rule associated with objects,&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// forces the binding to execute all their validation rules&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;parent&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsValid(DependencyObject parent)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// Validate all the bindings on the parent&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;bool&lt;/span&gt; valid = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// get the list of all the dependency properties, we can use a level of caching to avoid to use reflection&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// more than one time for each object&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (DependencyProperty dp &lt;span class="kwrd"&gt;in&lt;/span&gt; GetDPs(parent.GetType()))&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (BindingOperations.IsDataBound(parent, dp))&lt;/pre&gt;

    &lt;pre class="alt"&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            Binding binding = BindingOperations.GetBinding(parent, dp);&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (binding.ValidationRules.Count &amp;gt; 0)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            {&lt;/pre&gt;

    &lt;pre class="alt"&gt;               BindingExpression expression = BindingOperations.GetBindingExpression(parent, dp);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;switch&lt;/span&gt; (binding.Mode)&lt;/pre&gt;

    &lt;pre class="alt"&gt;               {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;case&lt;/span&gt; BindingMode.OneTime:&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  &lt;span class="kwrd"&gt;case&lt;/span&gt; BindingMode.OneWay:&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                     expression.UpdateTarget();&lt;/pre&gt;

    &lt;pre class="alt"&gt;                     &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;default&lt;/span&gt;:&lt;/pre&gt;

    &lt;pre class="alt"&gt;                     expression.UpdateSource();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                     &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;if&lt;/span&gt; (expression.HasError) valid = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// Validate all the bindings on the children&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;for&lt;/span&gt; (&lt;span class="kwrd"&gt;int&lt;/span&gt; i = 0; i != VisualTreeHelper.GetChildrenCount(parent); ++i)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         DependencyObject child = VisualTreeHelper.GetChild(parent, i);&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (!IsValid(child)) { valid = &lt;span class="kwrd"&gt;false&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; valid;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wpf-bind-explicit-interface-indexer-implementation"&gt;Silverlight / WPF: is it possible to bind to an explicit interface indexer implementation?&lt;/a&gt; (07/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wrap-ilist-effective-binding-silverlight-wpf"&gt;Wrap IList&lt;T&gt; and use it for effective binding in Silverlight and WPF&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-fix-silverlight-toolkit-templates-add-validation-states"&gt;Silverlight: how to fix the Silverlight Toolkit templates to add Validation States&lt;/a&gt; (12/12/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-control-delete-rule-update-rule-foreign-key-schemaexport"&gt;NHibernate: how to control Delete Rule and Update Rule in a foreign key when using SchemaExport&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wpf-force-validation-rules-attached-object-executed"&gt;&lt;strong&gt;More related document (17)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed</guid><pubDate>Wed, 19 Aug 2009 18:57:00 GMT</pubDate><category>Binding</category><category>Error</category><category>Validation</category><category>Validation rule</category><category>Wpf</category></item><item><title>UI Prototyping: simplify your life with Balsamiq</title><description>&lt;p&gt;Recently I attended the &lt;a href="http://ugialt.net/Meetings.ashx#IV_UgiAltNetConf_CH_Giugno_CAAJ_16" target="_blank"&gt;UGIALT.NET Conference&lt;/a&gt; and the first session was devoted to How to Design the User Experience, the speaker - Daniela Panfili - clearly stated some good points and she told us how she and her team spend a lot of time interacting with the end user and designing the user interface; the purpose is to try to offer the right functionalities in the right place to maximize the usability of the application, keeping however an eye on the look and feel to have a pleasant interface.&lt;/p&gt;  &lt;p&gt;I have to admit I was always been focused in developing the architecture of an application first, that is the usual tasks: design application modules, glue them with an IoC container or a plug-in system, define some communication methods, use patterns like AoP and similar to inject logging function and so on...&lt;/p&gt;  &lt;p&gt;Usually I left the interaction with the user as the last thing, or something that only the functional analysts have to care about at start (and if they are good they do their job well, if they are so so or inexperienced you often end up rewriting their job..which is a big loss of time)…in recent times I’ve however started to change my mind especially when I saw what came out from some designs: applications that have all the required features but they are ‘hidden’ or hard to be found by the users…so I started to draw some sketches by hand to figure out how the application should look and work.&lt;/p&gt;  &lt;p&gt;The basic idea is to have a better picture of what the user want and how it should use it before starting to write any architectural code; in an ideal situation you should have two different design pipelines: one for the UI and UX and one for the architecture, they both can start work in parallel, while you are working on the generic infrastructure or framework on top of which you develop your architecture.&lt;/p&gt;  &lt;p&gt;Having sketches of how the application should look (I’m not talking about astonishing graphic effects or animation, but the general disposition of the elements) also is very useful to integrate the documentation and give the client some immediate feedback on what the project will be.&lt;/p&gt;  &lt;p&gt;Doing the whole job by hand can be fast but it has some drawbacks: you need to perform periodic scans of the sketches and put them in your repository, they get messy pretty fast (you don’t have any Undo feature when it come to the good old paper), only one person can have the original copies, and it’s hard for different people to work on the design (especially if they are in different locations).&lt;/p&gt;  &lt;p&gt;Having a good tool that allow everyone to draw or modify a sketch is starting to be a necessity in teams that want to develop software seriously, it’s true we have a plethora of Paint-like and PowerPoint-like apps around; but they require skills that not all the developers have or have time to learn.&lt;/p&gt;  &lt;p&gt;Here’s where Balsamiq come help us, this tool is specifically designed to allow even non-non professional graphic artists to design and prototype interfaces and functionality pretty fast. It’s very intuitive and easy to use and allows everyone – with a minimal effort – to draw a detailed scheme of what the UI will resemble to.&lt;/p&gt;  &lt;p&gt;Using a tool like this can also help you realize if you are doing a good job in defining your UI...to test it a bit I tried to replicate an interface I’ve wrote for a warehouse designer tool to be used in a project; down here you can see the result.&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/UIPrototypingsimplifyyourlifewithBalsami_C7E1/BalsamiqWarehouseDesignerMockup.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="BalsamiqWarehouseDesignerMockup" border="0" alt="BalsamiqWarehouseDesignerMockup" src="/UserFiles/Guardian/UIPrototypingsimplifyyourlifewithBalsami_C7E1/BalsamiqWarehouseDesignerMockup_thumb.png" width="687" height="451" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;While writing it in WPF I thought it could be a good interface design...well...giving it a second look here I realized that my job, even if it had all the required features, wasn’t good enough and I’m actually looking at how I can improve it.&lt;/p&gt;  &lt;p&gt;Balsamiq comes with a quite complete library of common controls and it can be extended easily, there are in-fact a series of template freely available. Balsamiq allows you to add a level of interaction between different mockups and provide links to them, so you can simulate some navigation in the user interface. You can also export the mockup design in XML to process it with your custom utilities or generate a Flex application (a service offered by a 3rd party company).&lt;/p&gt;  &lt;p&gt;In short a tool that can help raise your productivity, especially in the early stages of developing of a new project.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wpf-bind-explicit-interface-indexer-implementation"&gt;Silverlight / WPF: is it possible to bind to an explicit interface indexer implementation?&lt;/a&gt; (07/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/ui-prototyping-simplify-your-life-with-balsamiq"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/ui-prototyping-simplify-your-life-with-balsamiq</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/ui-prototyping-simplify-your-life-with-balsamiq#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/ui-prototyping-simplify-your-life-with-balsamiq</guid><pubDate>Tue, 28 Jul 2009 23:39:00 GMT</pubDate><category>Balsamiq</category><category>Interface</category><category>Prototyping</category><category>Ui</category></item><item><title>NUnit: Twitter notification Addin</title><description>&lt;p&gt;Some days ago my good friend Gian Maria Ricci showed on his blog &lt;a href="http://www.nablasoft.com/alkampfer"&gt;Alkampfer’s Place&lt;/a&gt; a nice way to integrate twitter and TFS showing how you can have tweets related to TFS actions.&lt;/p&gt;  &lt;p&gt;The idea was pretty cool, I actually do not a have a TFS up and running in my tests or development environments, but I wanted to have the same notifications when an automatic test on a build machine fails.&lt;/p&gt;  &lt;p&gt;So I just ‘stole’ some of his code and realized a quick add-in for NUnit: it’s basically a simple test decorator, which get installed with the highest priority, so it is executed as the last one in the decorator’s chain. The test is just a wrapper around the original code and it checks the result of the original test method, if there’s a failure or an exception it uses a twitter account to send a notification to all the subscribers.&lt;/p&gt;  &lt;p&gt;The Addin can be configured using an xml file called Twitter.config that must be deployed along with the addin. You can deploy the addin globally (placing it in the NUnit addins folder) or use my previous extension and deploy it directly along with your tests so it can be launched and used on a ‘per-project’ basis.&lt;/p&gt;  &lt;p&gt;Here’s the code for the addin:&lt;/p&gt;  &lt;div id="codeSnippetWrapper" class="csharpcode-wrapper"&gt;   &lt;div id="codeSnippet" class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;namespace&lt;/span&gt; Structura.NUnitExtensions.Twitter&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// send a twitter message using the account specified in the Twetter.config, this file must be deployed with the addin&lt;/span&gt;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;   [NUnitAddin(Description = &lt;span class="str"&gt;&amp;quot;Send a Twetter message whenever a test fails&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TwitterDecorator : IAddin, ITestDecorator&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; TwitterAccount Account { get; set; }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      &lt;span class="preproc"&gt;#region&lt;/span&gt; IAddin Members&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; Install(IExtensionHost host)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         System.Diagnostics.Trace.WriteLine(&lt;span class="str"&gt;&amp;quot;TwetterDecorator: Install called&amp;quot;&lt;/span&gt;);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         IExtensionPoint2 decorators = (IExtensionPoint2)host.GetExtensionPoint(&lt;span class="str"&gt;&amp;quot;TestDecorators&amp;quot;&lt;/span&gt;);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (decorators == &lt;span class="kwrd"&gt;null&lt;/span&gt;) &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         decorators.Install(&lt;span class="kwrd"&gt;this&lt;/span&gt;, 9);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// read the configuration&lt;/span&gt;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;string&lt;/span&gt; filepath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         filepath = Path.Combine(filepath, &lt;span class="str"&gt;&amp;quot;Twitter.config&amp;quot;&lt;/span&gt;).Replace(&lt;span class="str"&gt;&amp;quot;file:\\&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="str"&gt;&amp;quot;);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         Account = TwitterAccount.Load(filepath);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         return true;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      #endregion&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      #region ITestDecorator Members&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      public Test Decorate(Test test, MemberInfo member)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         System.Diagnostics.Trace.WriteLine(&amp;quot;&lt;/span&gt;TwetterDecorator: decorate called&lt;span class="str"&gt;&amp;quot;);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         if (test is NUnitTestMethod)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;            test = new TwitterTestMethod(((NUnitTestMethod)test).Method, Account);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         return test;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      #endregion&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   public class TwitterTestMethod : NUnitTestMethod&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      public TwitterTestMethod(MethodInfo method, TwitterAccount account)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         : base(method)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         Account = account;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      public TwitterAccount Account { get; set; }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      public override void Run(TestResult testResult)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         // let's run the test&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         base.Run(testResult);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         // check for success or failure and send the twitter message&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         // if (testResult.IsFailure)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         if (!testResult.IsSuccess)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;            string message = string.Empty;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;            if (testResult.IsFailure)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;               message = string.Format(&amp;quot;&lt;/span&gt;{0} - Failure: {1} {2}&lt;span class="str"&gt;&amp;quot;, Account.Project, testResult.FullName, testResult.Message);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;            if (testResult.IsError)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;               message = string.Format(&amp;quot;&lt;/span&gt;{0} - Error: {1} {2}&amp;quot;, Account.Project, testResult.FullName, testResult.Message);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;            TwitterService twitter = &lt;span class="kwrd"&gt;new&lt;/span&gt; TwitterService();&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;            twitter.SendMessage(Account.Username, Account.Password, message);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TwitterAccount&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Username { get; set; }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Password { get; set; }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Project { get; set; }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; TwitterAccount Load(&lt;span class="kwrd"&gt;string&lt;/span&gt; filename)&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;         XmlSerializer ser = &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlSerializer(&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(TwitterAccount));&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;using&lt;/span&gt; (StreamReader sr = &lt;span class="kwrd"&gt;new&lt;/span&gt; StreamReader(filename))&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; (TwitterAccount)ser.Deserialize(sr);&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;
&lt;!--CRLF--&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
&lt;!--CRLF--&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Project source code:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:ac0dd900-5284-484d-8e94-3a9cba266c80" class="wlWriterEditableSmartContent"&gt;&lt;p&gt; &lt;a href="/UserFiles/Guardian/2009/07/Structura.NUnitExtensions.Twitter.zip" target="_blank"&gt;Structura.NUnitExtensions.Twitter&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunit-extensibility-addin-dynamically-load-addins"&gt;NUnit extensibility: an Addin to dynamically load other Addins&lt;/a&gt; (07/06/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nunit-twitter-notification-addin"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nunit-twitter-notification-addin</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nunit-twitter-notification-addin#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nunit-twitter-notification-addin</guid><pubDate>Fri, 10 Jul 2009 23:21:00 GMT</pubDate><category>Addin</category><category>Nunit</category><category>Twitter</category></item><item><title>NUnit extensibility: an Addin to dynamically load other Addins</title><description>&lt;p&gt;One of the major problems when it comes to NUnit extensibility is the limitation that you must deploy your Addins in a subfolder (named ‘addins’) under the installation (or run) path of NUnit, so if you build some customization and extension and you want to deploy them on a build machine (or a Continous Integration machine) you need to build ad-hoc scripts and build actions.&lt;/p&gt;  &lt;p&gt;To overcome this problem I’ve written a very simple and small addin that allows you to specify, in the configuration file of the test assembly, a set of DLLs that contains the addins to be loaded when the test start.&lt;/p&gt;  &lt;p&gt;So once you have deployed this addin to your testing environment you can forget about any other script or action needed to load all the other extensions you develop to extend your test architecture.&lt;/p&gt;  &lt;p&gt;The project is divided in 2 assemblies:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Structura.NUnitExtensions: actually contains the ConfigrationSection customization to load the info from the config file. &lt;/li&gt;    &lt;li&gt;Structura.NUnitExtensions.Addins: contains the implementation of the addin, this is the only project that depends on NUnit.core.dll, and it will need to be compiled against the NUnit version you are using. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;here’s the core class:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [NUnitAddin(Name = &lt;span class="str"&gt;&amp;quot;AddinsLoaderAddin&amp;quot;&lt;/span&gt;, Description = &lt;span class="str"&gt;&amp;quot;An addin to dinamically load other addins&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; AddinsLoaderAddin : IAddin&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;    &lt;span class="preproc"&gt;#region&lt;/span&gt; IAddin Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; Install(IExtensionHost host)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;       AddinSectionHandler config = (AddinSectionHandler)System.Configuration.ConfigurationManager.GetSection(&lt;span class="str"&gt;&amp;quot;nUnitAddins&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;       &lt;span class="kwrd"&gt;if&lt;/span&gt; (config != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;       {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;          &lt;span class="rem"&gt;// parse the addin data to load from the application configuration file&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;          &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (Addin addin &lt;span class="kwrd"&gt;in&lt;/span&gt; config.Addins)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;          {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;             &lt;span class="rem"&gt;// this is used by the core to load and use them&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;             Assembly asm = Assembly.LoadFrom(addin.Path);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;             CoreExtensions.Host.InstallAdhocExtensions(asm);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;          }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;       }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;       &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;       &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;    &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As you can see this is a ‘fake’ addin, it really does nothing but to scan a set of DLLs and register any addin it can find inside them. I was forced to take this approach cause we need to load the addins just before the actual TestFixure classes are parsed and the the TestSuite built and I couldn’t find any better way to configure NUnit and tell it where to look for addictional Addins. &lt;/p&gt;

&lt;p&gt;NUnit does indeed have some weak points in its configuration section.&lt;/p&gt;

&lt;p&gt;To use this addin you need to add a reference to Structura.NUnitExtensions (or the assembly you use to define the SectionHandler) to your test assembly, and write down some configuration like:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;configSections&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;section&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;nUnitAddins&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Structura.NUnitExtensions.AddinSectionHandler, Structura.NUnitExtensions&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;configSections&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;nUnitAddins&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;addins&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;add&lt;/span&gt; &lt;span class="attr"&gt;path&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;NUnitExtension.dll&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;add&lt;/span&gt; &lt;span class="attr"&gt;path&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;C:\NUnitExt\NUnitExtension2.dll&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;addins&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;nUnitAddins&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The section must me named ‘nUnitAddins’ and as you can see you can specify:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Absolute paths &lt;/li&gt;

  &lt;li&gt;Relative paths: the startup path is the working directory of the process that launches the tests. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To let the relative paths work with my modified version of NUnitit I had to tweak the code a bit and to set the working directory of the process that runs the tests (nunit-console.exe or nunit.exe) to the directory where the tests are compiled by Visual Studio (that is the bin/debug directory of the current test).&lt;/p&gt;

&lt;p&gt;Here are the links at all the projects:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:6fedfb66-aaa9-4ff1-a8e8-31c9f5b85f62" class="wlWriterEditableSmartContent"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/NUnitanAddintodynamicallyloadotherAddins_9F15/Structura.NUnitExtensions.zip" target="_self"&gt;Structura.NUnitExtensions.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;NUnitit updates:&lt;/p&gt;

&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:2a73debe-016f-4320-8ffb-3e6e49e2a7ff" class="wlWriterEditableSmartContent"&gt;&lt;p&gt; &lt;a href="/UserFiles/Guardian/NUnitanAddintodynamicallyloadotherAddins_9F15/NUnitit.vs2005.vsi" target="_blank"&gt;NUnitit Project&lt;/a&gt;&lt;br /&gt; &lt;a href="/UserFiles/Guardian/NUnitanAddintodynamicallyloadotherAddins_9F15/NUnitit.vs2008.vsi" target="_blank"&gt;NUnitit 2008 installer&lt;/a&gt;&lt;br /&gt; &lt;a href="/UserFiles/Guardian/NUnitanAddintodynamicallyloadotherAddins_9F15/nunitit18602_extended2.zip" target="_blank"&gt;NUnitit 2005 installer&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunit-twitter-notification-addin"&gt;NUnit: Twitter notification Addin&lt;/a&gt; (07/10/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nunit-extensibility-addin-dynamically-load-addins"&gt;&lt;strong&gt;More related document (11)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nunit-extensibility-addin-dynamically-load-addins</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nunit-extensibility-addin-dynamically-load-addins#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nunit-extensibility-addin-dynamically-load-addins</guid><pubDate>Mon, 06 Jul 2009 19:57:00 GMT</pubDate><category>Addin</category><category>Extensibility</category><category>Nunit</category><category>Nunitit</category><category>Visual studio</category></item><item><title>NUnitit: Visual Studio Addin to support NUnit and some customizations to it</title><description>&lt;p&gt;These days I’m heavily working on NUnit to build some extensions to the testing framework we need on our projects. We need a simple way to launch our tests inside visual studio while developing. Our first solution was to use TestDriven.NET or the Reshaper implementation of NUnit.&lt;/p&gt;
&lt;p&gt;However both these approaches have some limitation I actually don’t like, especially when it comes to the use of NUnit addins. Resharper do not have full support installing and using NUnit addins, and TestDriven.net will force you to use it’s embedded version of NUnit to let the addin launch the environment and the tests.&lt;/p&gt;
&lt;p&gt;I started to look around and found &lt;a href="http://nunitit.codeplex.com/" target="_blank"&gt;NUnitit&lt;/a&gt; on CodePlex, &lt;a href="http://nunitit.codeplex.com/" target="_blank"&gt;Nunitit&lt;/a&gt; is an addin that allows you to run and debug NUnit projects within Visual Studio.&lt;/p&gt;
&lt;p&gt;In its actual implementation it has however some limitations: you have to set the project you want to run as the startup project and you cannot run single tests (like TestDriven.net for example).&lt;/p&gt;
&lt;p&gt;So I took the code and added some of the missing functionalities, now you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the currently selected project in the solution explorer in the NUnit GUI. &lt;/li&gt;
&lt;li&gt;Run the currently selected project in the solution explorer in the NUnit console. &lt;/li&gt;
&lt;li&gt;Run a single test (open a file and place the caret on the test you want to run) using the NUnit console. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I posted my code to the original author of the addin, I hope they will be integrated in the official version too.&lt;/p&gt;
&lt;p&gt;Here are the code and the installation files:&lt;/p&gt;
&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:77b4b27c-78c3-404a-a69b-257df7f12041" class="wlWriterEditableSmartContent"&gt;
&lt;p&gt; &lt;a href="/UserFiles/Guardian/NUnititVisualStudioAddintosupportNUnitan_D531/NUnitit.vs2005.vsi" target="_blank"&gt;NUnitit vs2005 installer&lt;/a&gt;&lt;br /&gt; &lt;a href="/UserFiles/Guardian/NUnititVisualStudioAddintosupportNUnitan_D531/nunitit18602_extendedtoruntests.zip" target="_blank"&gt;Solution Project&lt;/a&gt;&lt;br /&gt; &lt;a href="/UserFiles/Guardian/NUnititVisualStudioAddintosupportNUnitan_D531/NUnitit.vs2008.vsi" target="_blank"&gt;NUnitit vs2008 installer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunit-extensibility-addin-dynamically-load-addins"&gt;NUnit extensibility: an Addin to dynamically load other Addins&lt;/a&gt; (07/06/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunit-twitter-notification-addin"&gt;NUnit: Twitter notification Addin&lt;/a&gt; (07/10/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nunitit-visual-studio-addin-support-nunit-customizations"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations</guid><pubDate>Fri, 26 Jun 2009 23:19:00 GMT</pubDate><category>Addin</category><category>Nunit</category><category>Visual studio</category></item><item><title>WPF: a generic ‘server-side’ pagination data provider</title><description>&lt;p&gt;Sooner or later everyone face the problem of having to deal with paginated data in WPF, paginating a collection is quite easy and you can refer to one of my previous posts too (&lt;a href="http://www.primordialcode.com/index.php/2008/09/08/silverlight-a-generic-pagination-control/" target="_blank"&gt;http://www.primordialcode.com/index.php/2008/09/08/silverlight-a-generic-pagination-control/&lt;/a&gt; and &lt;a href="http://www.primordialcode.com/index.php/2008/09/19/silverlight-pagination-control-bug-fixed/" target="_blank"&gt;http://www.primordialcode.com/index.php/2008/09/19/silverlight-pagination-control-bug-fixed/&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;This time I needed a way to interact with some WCF services that I have to use in order to get the paged data from the server. What I wanted to create was a component that encapsulates the logic of handling the requests for the data in order to minimize the amount of code I have to write for similar operations in different forms of the application, some key features:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;It has to handle a reference to the current page index &lt;/li&gt;    &lt;li&gt;You have to specify the page size &lt;/li&gt;    &lt;li&gt;You have to specify the types of object that will be hold inside the returned collection &lt;/li&gt;    &lt;li&gt;You can specify an object that represent a set of filter you can do on the data (you can change them and ask for a refresh) &lt;/li&gt;    &lt;li&gt;You have to specify the function that will be used to retrieve the paged data, it has however to conform to a specific signature. &lt;/li&gt;    &lt;li&gt;You can use the data structures returned by this object (CurrentPage, TotalPages and Data, which contains the actual array of data objects) with the binding infrastructure of WPF. &lt;/li&gt;    &lt;li&gt;This control does not have a graphical representation for the command buttons (First, Last, Next, etc.), it is only a support class. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Here’s the actual implementation:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Starting point for a WPF paged data source control, next step: convert it to a real data source control&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;Types of object that will be returned&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;typeparam name=&amp;quot;TParams&amp;quot;&amp;gt;Type of the class that holds optional parameters data&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; PagedObjectDataProvider&amp;lt;T, TParams&amp;gt; : INotifyPropertyChanged&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// defines the signature of the function that will be used to retrieve the data&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;pageindex&amp;quot;&amp;gt;index of the page requested&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;pagesize&amp;quot;&amp;gt;size of the page&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;param&amp;quot;&amp;gt;optional parameters to be passed to the function&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;numrows&amp;quot;&amp;gt;on exit it will contains the total number of records available to be retrieve from the source&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;delegate&lt;/span&gt; IList&amp;lt;T&amp;gt; GetPagedDataDelegate(&lt;span class="kwrd"&gt;int&lt;/span&gt; pageindex, &lt;span class="kwrd"&gt;int&lt;/span&gt; pagesize, TParams param, &lt;span class="kwrd"&gt;out&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; numrows);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// Current page index&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; CurrentPage&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _CurrentPage + 1; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      set { _CurrentPage = &lt;span class="kwrd"&gt;value&lt;/span&gt; - 1; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; _CurrentPage;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// Size of the page&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; PageSize { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// Total items available on the server to retrieve&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; TotalRowsCount&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _TotalRowCount; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;      set { _TotalRowCount = &lt;span class="kwrd"&gt;value&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; _TotalRowCount;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// Total number of pages&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; TotalPagesCount&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;int&lt;/span&gt; totalpages = _TotalRowCount / PageSize;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         totalpages += ((_TotalRowCount % PageSize) &amp;gt; 0) ? 1 : 0;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; totalpages;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// Parameters that will be used as a 'filter' by the function that requests data&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; TParams Parameters { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; GetPagedDataDelegate GetDataFunction;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// This member property actually holds the data and you can bind to it&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt; Data { get; &lt;span class="kwrd"&gt;internal&lt;/span&gt; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; PagedObjectDataProvider(&lt;span class="kwrd"&gt;int&lt;/span&gt; pageSize, TParams parameters, GetPagedDataDelegate getDataFunction)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      PageSize = pageSize;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      Parameters = parameters;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      GetDataFunction = getDataFunction;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      Data = &lt;span class="kwrd"&gt;new&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      _CurrentPage = -1;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; GetData()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// the first time we always get the first page if not initialized in any way&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// execute this function in a background thread to not block the interface&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (_CurrentPage &amp;lt; 0)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         _CurrentPage = 0;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;/pre&gt;

    &lt;pre class="alteven"&gt;      Data.Clear();&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// execute this in a background thread to emulate the IsAsyncronous behavior of the objectdatasource&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      ThreadPool.QueueUserWorkItem(&lt;span class="kwrd"&gt;new&lt;/span&gt; WaitCallback(InternalGetData), &lt;span class="kwrd"&gt;null&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; InternalGetData(&lt;span class="kwrd"&gt;object&lt;/span&gt; addictionaldata)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      GetDataFunction(_CurrentPage, PageSize, Parameters, &lt;span class="kwrd"&gt;out&lt;/span&gt; _TotalRowCount).ForEach(o =&amp;gt; UiThread.Run(() =&amp;gt; Data.Add(o)));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (PropertyChanged != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         PropertyChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; PropertyChangedEventArgs(&lt;span class="str"&gt;&amp;quot;CurrentPage&amp;quot;&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;         PropertyChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; PropertyChangedEventArgs(&lt;span class="str"&gt;&amp;quot;TotalRowsCount&amp;quot;&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         PropertyChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; PropertyChangedEventArgs(&lt;span class="str"&gt;&amp;quot;TotalPagesCount&amp;quot;&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;         PropertyChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; PropertyChangedEventArgs(&lt;span class="str"&gt;&amp;quot;Data&amp;quot;&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// Function used to request the next page of data&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;page&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; ICollection&amp;lt;T&amp;gt; MoveTo(PageMode page)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (_CurrentPage &amp;gt;= 0)&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;switch&lt;/span&gt; (page)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;case&lt;/span&gt; PageMode.First:&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               _CurrentPage = 0;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;case&lt;/span&gt; PageMode.Previous:&lt;/pre&gt;

    &lt;pre class="alt"&gt;               _CurrentPage = Math.Max(_CurrentPage - 1, 0);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;case&lt;/span&gt; PageMode.Next:&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               _CurrentPage = Math.Min(_CurrentPage + 1, TotalPagesCount - 1);&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;case&lt;/span&gt; PageMode.Last:&lt;/pre&gt;

    &lt;pre class="alt"&gt;               _CurrentPage = TotalPagesCount - 1;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      GetData();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; Data;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="preproc"&gt;#region&lt;/span&gt; INotifyPropertyChanged Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;enum&lt;/span&gt; PageMode&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   First,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   Previous,&lt;/pre&gt;

    &lt;pre class="alt"&gt;   Next,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   Last&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To use it you need to create it in code, with something like:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;// define a property at the class level&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; PagedObjectDataProvider&amp;lt;LinkResultDto, &lt;span class="kwrd"&gt;object&lt;/span&gt;&amp;gt; RilevazioniPaged { get; &lt;span class="kwrd"&gt;internal&lt;/span&gt; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;...&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;// define a function that will be used to retrieve the data&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;private&lt;/span&gt; IList&amp;lt;LinkResultDto&amp;gt; GetPagedDataDelegate(&lt;span class="kwrd"&gt;int&lt;/span&gt; pageindex, &lt;span class="kwrd"&gt;int&lt;/span&gt; pagesize, &lt;span class="kwrd"&gt;object&lt;/span&gt; param, &lt;span class="kwrd"&gt;out&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; numrows)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; RilevazioniService.GetRilevazioniForBrowser(11, &lt;span class="kwrd"&gt;null&lt;/span&gt;, 0, 0, &lt;span class="kwrd"&gt;null&lt;/span&gt;, pageindex, pagesize, &lt;span class="kwrd"&gt;out&lt;/span&gt; numrows);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;...&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;// create the object in the constructor&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;RilevazioniPaged = &lt;span class="kwrd"&gt;new&lt;/span&gt; PagedObjectDataProvider&amp;lt;LinkResultDto, &lt;span class="kwrd"&gt;object&lt;/span&gt;&amp;gt;(20, &lt;span class="kwrd"&gt;null&lt;/span&gt;, GetPagedDataDelegate);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;// Call the MoveTo function to retrieve the data from the service&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;RilevazioniPaged.MoveTo(mode);&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To display the results you can use a Xaml like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;&amp;lt;!-- data section --&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ListView&lt;/span&gt; &lt;span class="attr"&gt;Grid&lt;/span&gt;.&lt;span class="attr"&gt;Row&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Grid&lt;/span&gt;.&lt;span class="attr"&gt;Column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt; &lt;/pre&gt;

    &lt;pre class="alt"&gt;          &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;lvRilevazioni&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;ItemsSource&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding RilevazioniPaged.Data}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;SelectionMode&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Single&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;          &lt;span class="attr"&gt;IsSynchronizedWithCurrentItem&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HorizontalContentAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Stretch&amp;quot;&lt;/span&gt; &lt;/pre&gt;

    &lt;pre class="alt"&gt;          &lt;span class="attr"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Stretch&amp;quot;&lt;/span&gt;  &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ListView&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;&amp;lt;!-- Pager section --&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt; &lt;span class="attr"&gt;Orientation&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Horizontal&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;First&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Click&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;First_Click&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Previous&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Click&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Previous_Click&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Label&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Page:&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Label&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Label&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding RilevazioniPaged.CurrentPage}&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Label&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;/&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Label&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Label&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding RilevazioniPaged.TotalPagesCount}&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Next&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Click&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Next_Click&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Last&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Click&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Last_Click&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This is a ‘first-shot’ solution and it doesn’t totally satisfies me, I’ll work to modify it in the future and have something more similar to a ‘true’ WPF data provider that you can use declaratively in the designer too.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed"&gt;Silverlight Pagination Control – bug fixed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-eager-fetch-pagination-query"&gt;NHibernate - Eager Fetch and Pagination in one query&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp"&gt;WPF, Silverlight, WP7 and the Async CTP&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control"&gt;Silverlight: a generic Pagination Control&lt;/a&gt; (09/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wpf-generic-serverside-pagination-data-provider"&gt;&lt;strong&gt;More related document (15)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wpf-generic-serverside-pagination-data-provider</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wpf-generic-serverside-pagination-data-provider#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wpf-generic-serverside-pagination-data-provider</guid><pubDate>Thu, 18 Jun 2009 21:44:00 GMT</pubDate><category>Data provider</category><category>Pagination</category><category>Wpf</category></item><item><title>Tomcat Troubles while installing JetBrains TeamCity and VMware</title><description>&lt;p&gt;I spent a couple of hours trying to figure out why the Tomcat service of a fresh installation of TeamCity Professional was continuously crashing each time I tried to open the administration console in the browser.&lt;/p&gt;  &lt;p&gt;I couldn’t find any useful log of information for that (I’m not really a Tomcat/Apache fan nor expert) so what I did was to open the services configuration from the control panel and to allow the ‘TeamCity Web Server’ service to interact with the desktop.&lt;/p&gt;  &lt;p&gt;In this way I was able to see the command prompt window with all the action that the service was going to take. So I realized that the service (on my machine) takes really a long time to startup (like 2-3 minutes) and that at the first request I made, he crashed out with an error regarding the binding of the address and the port.&lt;/p&gt;  &lt;p&gt;So I had an illumination...I was smart enough to enter an unused port for the TeamCity server during the installation...BUT...an error on port and address binding may only mean that something else is using the same configuration.&lt;/p&gt;  &lt;p&gt;I started checking all the installed programs with a web administration console and I found that VMware on the same machine used a Tomcat/Apache server too, so I opened up both of the ‘server.xml’ tomcat configuration files (you can find them in the ‘conf’ folder of your installations) and I found that internally they both used the same port 8443 to which all the other were redirected.&lt;/p&gt;  &lt;p&gt;VMware code snippet:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&amp;lt;Connector port=&lt;span class="str"&gt;&amp;quot;8308&amp;quot;&lt;/span&gt; protocol=&lt;span class="str"&gt;&amp;quot;HTTP/1.1&amp;quot;&lt;/span&gt;                 &lt;/pre&gt;

    &lt;pre class="alteven"&gt;           connectionTimeout=&lt;span class="str"&gt;&amp;quot;20000&amp;quot;&lt;/span&gt;                 &lt;/pre&gt;

    &lt;pre class="alt"&gt;           redirectPort=&lt;span class="str"&gt;&amp;quot;8443&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;TeamCity code snippet:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&amp;lt;Connector port=&lt;span class="str"&gt;&amp;quot;8111&amp;quot;&lt;/span&gt; protocol=&lt;span class="str"&gt;&amp;quot;HTTP/1.1&amp;quot;&lt;/span&gt;                 &lt;/pre&gt;

    &lt;pre class="alteven"&gt;           connectionTimeout=&lt;span class="str"&gt;&amp;quot;20000&amp;quot;&lt;/span&gt;                 &lt;/pre&gt;

    &lt;pre class="alt"&gt;           redirectPort=&lt;span class="str"&gt;&amp;quot;8443&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What you have to do in order to have both working on the same machine is to change the redirect port to a different - unused - value in one of the two configuration files.&lt;/p&gt;

&lt;p&gt;To be completely safe I just changed each port number that were the same in both files, just look for everything that looks like ‘port=’ and change the value there.&lt;/p&gt;

&lt;p&gt;In the end: if you have multiple instances of Tomcat running on a same machine and you have troubles with the websites they host, go check the ‘Server.xml’ configuration file of each installation and make sure you do not have port conflicts there.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/playing-profilers-called-functions"&gt;Playing with Profilers - always take a look at your most called functions!&lt;/a&gt; (08/05/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/tomcat-troubles-installing-jetbrains-teamcity-vmware"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/tomcat-troubles-installing-jetbrains-teamcity-vmware</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/tomcat-troubles-installing-jetbrains-teamcity-vmware#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/tomcat-troubles-installing-jetbrains-teamcity-vmware</guid><pubDate>Thu, 11 Jun 2009 22:02:00 GMT</pubDate><category>Jetbrains teamcity</category><category>Port conflict</category><category>Tomcat</category><category>Vmware</category></item><item><title>Unity: WCF service resolution container extension</title><description>&lt;p&gt;In one of my previous posts I demonstrated how you can build a Castle Windsor facility to create WCF Proxy classes given the interface of the service (&lt;a href="http://www.primordialcode.com/index.php/2009/05/21/castle-windsor-wcf-services-resolution-facility/" target="_blank"&gt;Castle Windsor WCF Services Resolution Facility&lt;/a&gt;). For my WPF/Silverlight application framework I needed the same feature for the IoC container I’m using there, so here it is how you can implement the same functionality in Unity.&lt;/p&gt;  &lt;p&gt;The extension points in Unity are very different from Castle Winsor, what we have to do to implement our WCF proxy class generator through resolution is to create the following classes:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;WcfProxyBuildPlanPolicy: a BuildPlan policy that will be used by the engine to create the instances of the proxy classes. &lt;/li&gt;    &lt;li&gt;IWcfProxyConfiguration: an interface used to register the new types in the IoC container and associated them with the buildplan policy used to construct the instances of the objects. &lt;/li&gt;    &lt;li&gt;WcfProxyUnityContainerExtension: a container Extension that will expose the concrete implementation of the methods of the IWcfProxyConfiguration interface. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Here’s the first implementation of those classes:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// policy used to build the wcf proxy from the interface and the endpoint configuration passed in&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; WcfProxyBuildPlanPolicy : IBuildPlanPolicy&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; WcfProxyBuildPlanPolicy(&lt;span class="kwrd"&gt;string&lt;/span&gt; endpointConfiguration)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        EndpointConfiguration = endpointConfiguration;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; EndpointConfiguration { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="preproc"&gt;#region&lt;/span&gt; IBuildPlanPolicy Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; BuildUp(IBuilderContext context)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (context.Existing == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            Type typeToConstruct = BuildKey.GetType(context.BuildKey);&lt;/pre&gt;

    &lt;pre class="alt"&gt;            context.Existing = CreateWcfChannelProxy(typeToConstruct, EndpointConfiguration);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// create a wcf channel through reflection&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;service&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;endpoint&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; CreateWcfChannelProxy(Type service, &lt;span class="kwrd"&gt;string&lt;/span&gt; endpoint)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        Type channelFactoryBaseType = &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ChannelFactory&amp;lt;&amp;gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        channelFactoryBaseType = channelFactoryBaseType.MakeGenericType(service);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="rem"&gt;// Create an instance&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;object&lt;/span&gt; instance = Activator.CreateInstance(channelFactoryBaseType, endpoint);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        MethodInfo createchannel = instance.GetType().GetMethod(&lt;span class="str"&gt;&amp;quot;CreateChannel&amp;quot;&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; Type[0]);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; createchannel.Invoke(instance, &lt;span class="kwrd"&gt;null&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// configuration interface exposed by the Wcf Proxy extension, it will be used to register new types in the container&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;interface&lt;/span&gt; IWcfProxyConfiguration : IUnityContainerExtensionConfigurator&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    IUnityContainerExtensionConfigurator RegisterType&amp;lt;TTypeToBuild&amp;gt;(&lt;span class="kwrd"&gt;string&lt;/span&gt; endpointconfiguration);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    IUnityContainerExtensionConfigurator RegisterType&amp;lt;TTypeToBuild&amp;gt;(&lt;span class="kwrd"&gt;string&lt;/span&gt; name, &lt;span class="kwrd"&gt;string&lt;/span&gt; endpointconfiguration);&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Container extension class, it's used to allow access to the new WcfProxyBuildPlanPolicy, it allow to associate an interface type&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// with the new creation policy.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// usage is like:&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// container.AddNewExtension&amp;lt;WcfProxyUnityContainerExtension&amp;gt;();&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// container.Configure&amp;lt;IWcfProxyConfiguration&amp;gt;().RegisterType&amp;lt;TTypeToBuild&amp;gt;(string endpointconfiguration);&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// TTypeToBuild service = container.Resolve&amp;lt;TTypeToBuild&amp;gt;();&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; WcfProxyUnityContainerExtension : UnityContainerExtension, IWcfProxyConfiguration&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Initialize()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="preproc"&gt;#region&lt;/span&gt; IWcfProxyConfiguration Members&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// registers an interface to be used with the Wcf Proxy creation policy, a wcf proxy will be created for the interface passed in&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;typeparam name=&amp;quot;TTypeToBuild&amp;quot;&amp;gt;Interface to register&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;name&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;endpointconfiguration&amp;quot;&amp;gt;wcf end point configuration&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; IUnityContainerExtensionConfigurator RegisterType&amp;lt;TTypeToBuild&amp;gt;(&lt;span class="kwrd"&gt;string&lt;/span&gt; name, &lt;span class="kwrd"&gt;string&lt;/span&gt; endpointconfiguration)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        WcfProxyBuildPlanPolicy policy = &lt;span class="kwrd"&gt;new&lt;/span&gt; WcfProxyBuildPlanPolicy(endpointconfiguration);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        Context.Policies.Set&amp;lt;IBuildPlanPolicy&amp;gt;(policy, NamedTypeBuildKey.Make&amp;lt;TTypeToBuild&amp;gt;(name));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;this&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; IUnityContainerExtensionConfigurator RegisterType&amp;lt;TTypeToBuild&amp;gt;(&lt;span class="kwrd"&gt;string&lt;/span&gt; endpointconfiguration)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; RegisterType&amp;lt;TTypeToBuild&amp;gt;(&lt;span class="kwrd"&gt;null&lt;/span&gt;, endpointconfiguration);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To use those extensions you need to use a code like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [TestMethod]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; T02WindsorFacilityTest()&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     UnityContainer container = &lt;span class="kwrd"&gt;new&lt;/span&gt; UnityContainer();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     container.AddNewExtension&amp;lt;WcfProxyUnityContainerExtension&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     container.Configure&amp;lt;IWcfProxyConfiguration&amp;gt;().RegisterType&amp;lt;ITestService&amp;gt;(&lt;span class="str"&gt;&amp;quot;BasicHttpBinding_ITestService&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;     ITestService test = container.Resolve&amp;lt;ITestService&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;     Assert.IsNotNull(test);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;     Assert.IsInstanceOfType(test, &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ITestService));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;With line 5 you add the extension to the container.&lt;/p&gt;

&lt;p&gt;With line 6 you ask the container for the configuration interface exposed by the extension and you use it to associate the ITestService interface with the WCF proxy generation buildplan (passing in the configuration for the WCF end-point).&lt;/p&gt;

&lt;p&gt;Update: for a good introduction at ObjectBuilder and Unity dependency injection system you can look at this blog post: &lt;a href="http://www.tavaresstudios.com/Blog/post/Deconstructing-ObjectBuilder---What-Is-ObjectBuilder.aspx" target="_blank"&gt;Deconstructing ObjectBuilder - What Is ObjectBuilder?&lt;/a&gt; some classes are a little different in the actual ObjectBuilder implementation, nonetheless it gave a good picture of how the things work.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-logging-framework-properly"&gt;Silverlight / Castle – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery"&gt;Passing JSON serialized objects to a WCF service with jQuery&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization"&gt;JQuery, WCF and the JSON DateTime serialization&lt;/a&gt; (03/04/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans"&gt;Silverlight, Pluggable Architectures, Composite Applications and future plans…&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/ready-the14th-dotnetmarche-workshop-ioc-di-aop-related-techniques-lot-fun"&gt;Ready for the 14th DotNetMarche Workshop? IoC, DI, AOP and related techniques = lot of fun for all&lt;/a&gt; (04/07/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/unity-wcf-service-resolution-container-extension"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/unity-wcf-service-resolution-container-extension</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/unity-wcf-service-resolution-container-extension#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/unity-wcf-service-resolution-container-extension</guid><pubDate>Tue, 09 Jun 2009 00:09:00 GMT</pubDate><category>Ioc</category><category>Unity</category><category>Wcf</category></item><item><title>Redmine: a trick to import data from Mantis</title><description>&lt;p&gt;Today I decided to give Redmine a try as my new project management and bug tracking solution, mainly cause I wanted to try its integration with Subversion (given the fact that setting up an integration between Mantis and Subversion is a really painful).&lt;/p&gt;  &lt;p&gt;To make things short I installed the Bitnami Remine Stack, then I started to face the problem of how to import the data I had in Mantis, the official documentation for the full migration can be read &lt;a href="http://www.redmine.org/wiki/redmine/RedmineMigrate" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;I tried to follow it but it didn’t worked for me at start, I had to do some more things in order to make it work:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Navigate to your installation folder, in my case “C:\Program Files\BitNami Redmine Stack” and use “use_redmine.bat” to open the command prompt &lt;/li&gt;    &lt;li&gt;inside the command prompt navigate to “C:\Program Files\BitNami Redmine Stack\apps\redmine” you have to launch the import script from there for it to work correctly. &lt;/li&gt;    &lt;li&gt;Before launching the script you have to figure out your “environment”, for a default Bitnami istallation it is set to “production”.      &lt;br /&gt;If you set up the Redmine installation by yourself you already have this data available. Otherwise you can check your available environments looking at this folder: “C:\Program Files\BitNami Redmine Stack\apps\redmine\config\environments”, you can have different environment there, but only one is valid, that is: it has a database associated with it. To identify it you can open the database configuration file: “C:\Program Files\BitNami Redmine Stack\apps\redmine\config\database.yml” and for each environment you can see the related database.       &lt;br /&gt;Now you just have to look in the mysql database folder “C:\Program Files\BitNami Redmine Stack\mysql\data” and you’ll see the valid database defined (in my case bitnami_remine, which corresponded to the &lt;em&gt;production&lt;/em&gt; environment). &lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Here’s the tricky part!&lt;/strong&gt; Before launching the script you have to find a way to reach you current Mantis database, setting up remote access to a MySql database involves several steps; and even if you do so sometimes the importation script fails anyway to connect to the database; it took me a couple of hours of tries before finding this simple workaround: &lt;strong&gt;copy the whole mantis database folder from mantis’ MySql\Data to Redmine’s MySql data folder&lt;/strong&gt;.       &lt;br /&gt;In this way you are ‘mounting’ a mirror of the mantis database inside the redmine mysql instance.       &lt;br /&gt;&lt;strong&gt;Be careful: you only have to copy the single database folder (usually called mantis), leave all the other system folders as they are.&lt;/strong&gt; &lt;/li&gt;    &lt;li&gt;You can now launch the script as it’s stated in the documentation:      &lt;br /&gt;      &lt;div class="csharpcode-wrapper"&gt;       &lt;div class="csharpcode"&gt;         &lt;pre class="alt"&gt;rake redmine:migrate_from_mantis RAILS_ENV=&lt;span class="str"&gt;&amp;quot;production&amp;quot;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;Then the script will ask you for your database setting, leave all blank but the following field: 
    &lt;ol&gt;
      &lt;li&gt;Database: set it to ‘mantis’ (or whatever your original Mantis database was called). &lt;/li&gt;

      &lt;li&gt;Password: set it to the password for the root mysql user (it will be setted as the same password you gave to the administrator user of Redmine; you can check it also looking the the default configuration file fo mysql: “C:\Program Files\BitNami Redmine Stack\mysql\my.ini”). &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;

  &lt;li&gt;There you go, now your data will be imported. 
    &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-migrate-a-windows-xp-installation-from-an-ide-to-a-sata-hard-drive"&gt;How to migrate a Windows XP installation from an IDE to a SATA hard drive&lt;/a&gt; (11/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/redmine-trick-import-data-mantis"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/redmine-trick-import-data-mantis</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/redmine-trick-import-data-mantis#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/redmine-trick-import-data-mantis</guid><pubDate>Sat, 30 May 2009 00:53:00 GMT</pubDate><category>Import</category><category>Mantis</category><category>Migration</category><category>Redmine</category></item><item><title>Castle Windsor WCF Services Resolution Facility</title><description>&lt;p&gt;I have to admit I am not a huge fan of the automatic proxy generated code that you can obtain with svcutil.exe or using a standard Visual Studio service reference; mainly because it’s bloated with a lot of unneeded code, especially if you develop the service AND the clients that will use it (don’t get me wrong, the generated code is very useful if you do not have full control over the service or you are using a 3rd party WCF service).&lt;/p&gt;  &lt;p&gt;Let’s put us in the good case in which we develop the service and the consumer and we have full control over the assemblies that defines the contract of the service and the classes that will be used to exchange data.&lt;/p&gt;  &lt;p&gt;Some friends of mine (&lt;a href="http://dotnetmarche.org/blogs/andreabalducci/" target="_blank"&gt;Andrea Balducci&lt;/a&gt; and &lt;a href="http://www.nablasoft.com/alkamfer" target="_blank"&gt;Gian Maria Ricci&lt;/a&gt;) already showed you a simple technique to use Castle Windsor to host a WCF service), let’s now complete the picture and see how you can use the IoC container to generate a proxy on the client to consume those services.&lt;/p&gt;  &lt;p&gt;But first of all you have to keep in mind that all you need to use a WCF is just an interface that matches the one exposed by the service (and eventually that extends it with asynchronous methods) and a set of classes used to exchange data (if the service itself does not expose only basic types).&lt;/p&gt;  &lt;p&gt;Let’s consider we have a test WCF service with a contract like this:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;[ServiceContract]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;interface&lt;/span&gt; IServerService&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [OperationContract]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [FaultContract(&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ServiceError))]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;string&lt;/span&gt; Echo(&lt;span class="kwrd"&gt;string&lt;/span&gt; message);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    [OperationContract]&lt;/pre&gt;

    &lt;pre class="alt"&gt;    [FaultContract(&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ServiceError))]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    ComplexTestData ExtendedEcho(&lt;span class="kwrd"&gt;string&lt;/span&gt; message);&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ComplexTestData&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Message { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; DateTime Timestamp { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We suppose to have the interface defined in an assembly separated from the real implementation, all you have to do to use it on the client is to make a reference to this assembly (or create a matching interface) and create a proxy with something like:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;IServerService service = &lt;span class="kwrd"&gt;new&lt;/span&gt; ChannelFactory&amp;lt;IServerService&amp;gt;(&lt;span class="str"&gt;&amp;quot;endpointconfig&amp;quot;&lt;/span&gt;).CreateChannel();&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here I am assuming you have the configuration for an endpoint called “endpointconfig” in your app.config file.&lt;/p&gt;

&lt;p&gt;Done! That’s all you need, no code generation, no svcutil or whatever, you can start using your service immediately.&lt;/p&gt;

&lt;p&gt;It would be nice if we can instrument the IoC container, Castle Windsor in our case, and make him able to create instances proxy services based on the instances we register in it. We can later take advantage of a series of features like AOP that these IoC/DI containers can offer.&lt;/p&gt;

&lt;p&gt;The first step is to find a way to create a channel given a service interface contract, this can be easily done using reflection:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; CreateWcfChannelProxy(Type service, &lt;span class="kwrd"&gt;string&lt;/span&gt; endpoint)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    Type channelFactoryBaseType = &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ChannelFactory&amp;lt;&amp;gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    channelFactoryBaseType = channelFactoryBaseType.MakeGenericType(service);&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;// Create an instance&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;object&lt;/span&gt; instance = Activator.CreateInstance(channelFactoryBaseType, endpoint);&lt;/pre&gt;

    &lt;pre class="alt"&gt;    MethodInfo createchannel = instance.GetType().GetMethod(&lt;span class="str"&gt;&amp;quot;CreateChannel&amp;quot;&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; Type[0]);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;return&lt;/span&gt; createchannel.Invoke(instance, &lt;span class="kwrd"&gt;null&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The last step is to build a Facility that uses that code and it’s able to create instances of the channel proxies based on a configuration we provide.&lt;/p&gt;

&lt;p&gt;We want to be able to configure our service on the client using the following XML snippet (Castle Windsor configuration file):&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;configuration&lt;/span&gt; &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://www.tigraine.at/windsor-configuration.xsd&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;facilities&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;facility&lt;/span&gt; &lt;span class="attr"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;wcfproxycreation&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;              &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Structura.Castle.Windsor.WcfProxyCreationFacility, Structura.Castle.Windsor&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;wcfservice&lt;/span&gt; &lt;span class="attr"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;custominterfaceservice&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="attr"&gt;service&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;KilogWms.Services.Test.ServerTest.IServerService, KilogWms.Services.Test&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  &lt;span class="attr"&gt;endpoint&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;WSHttpBinding_CustomIServerService&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="attr"&gt;lifestyle&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Transient&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;facility&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;  &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;facilities&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;configuration&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The “wcfservice” declaration is intentionally similar to a normal component declaration, here you can specify an &lt;em&gt;id&lt;/em&gt; for the service, the &lt;em&gt;service&lt;/em&gt; interface that represent the ServiceContract, an &lt;em&gt;endpoint&lt;/em&gt; configuration (must match one available in the app.config file), the &lt;em&gt;lifestyle&lt;/em&gt; and the &lt;em&gt;customLifestyleType&lt;/em&gt; to be associated with the service. You can register how many services you want.&lt;/p&gt;

&lt;p&gt;I’m not a Castle guru and the actual implementation of the facility gave me some troubles...till I discovered the IComponentActivator and all its implementations, basically you can associate to each component you register in the container a specific class that takes care of generating a live instance of the object based on the information you provide. Armed with this knowledge we can write our custom activator:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; WcfProxyActivator : DefaultComponentActivator&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; WcfProxyActivator(ComponentModel model, IKernel kernel,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)&lt;/pre&gt;

    &lt;pre class="alt"&gt;        : &lt;span class="kwrd"&gt;base&lt;/span&gt;(model, kernel, onCreation, onDestruction)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    {}&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// create a wcf channel through reflection&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;service&amp;quot;&amp;gt;the interface of the service&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;endpoint&amp;quot;&amp;gt;the service end point (can be retrieved from the extededproperties associated with the Model&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="rem"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; CreateWcfChannelProxy(Type service, &lt;span class="kwrd"&gt;string&lt;/span&gt; endpoint)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        Type channelFactoryBaseType = &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(ChannelFactory&amp;lt;&amp;gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        channelFactoryBaseType = channelFactoryBaseType.MakeGenericType(service);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="rem"&gt;// Create an instance&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;object&lt;/span&gt; instance = Activator.CreateInstance(channelFactoryBaseType, endpoint);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        MethodInfo createchannel = instance.GetType().GetMethod(&lt;span class="str"&gt;&amp;quot;CreateChannel&amp;quot;&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; Type[0]);&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; createchannel.Invoke(instance, &lt;span class="kwrd"&gt;null&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Create(CreationContext context)&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;string&lt;/span&gt; endpointconfiguration = (&lt;span class="kwrd"&gt;string&lt;/span&gt;)Model.ExtendedProperties[&lt;span class="str"&gt;&amp;quot;EndPointConfig&amp;quot;&lt;/span&gt;];&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; CreateWcfChannelProxy(Model.Service, endpointconfiguration);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The facility is straightforward:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// a facility that allows the creation of WCF proxies simply registrering the interfaces in the windsor container&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; WcfProxyCreationFacility : AbstractFacility&lt;/pre&gt;

    &lt;pre class="alt"&gt;{&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Init()&lt;/pre&gt;

    &lt;pre class="alt"&gt;    {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (IConfiguration child &lt;span class="kwrd"&gt;in&lt;/span&gt; FacilityConfig.Children)&lt;/pre&gt;

    &lt;pre class="alt"&gt;        {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (child.Name == &lt;span class="str"&gt;&amp;quot;wcfservice&amp;quot;&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// read the configuration for a single service&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;string&lt;/span&gt; id = child.Attributes[&lt;span class="str"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;string&lt;/span&gt; service = child.Attributes[&lt;span class="str"&gt;&amp;quot;service&amp;quot;&lt;/span&gt;];&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;string&lt;/span&gt; lifestyle = child.Attributes[&lt;span class="str"&gt;&amp;quot;lifestyle&amp;quot;&lt;/span&gt;];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;string&lt;/span&gt; endpointconfiguration = child.Attributes[&lt;span class="str"&gt;&amp;quot;endpoint&amp;quot;&lt;/span&gt;];&lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;string&lt;/span&gt; customLifestyleType = child.Attributes[&lt;span class="str"&gt;&amp;quot;customLifestyleType&amp;quot;&lt;/span&gt;];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                Type serviceType = Type.GetType(service);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;if&lt;/span&gt; (serviceType == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;                    &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; ArgumentException(&lt;span class="kwrd"&gt;string&lt;/span&gt;.Format(&lt;span class="str"&gt;&amp;quot;service argument: {0} cannot be succesfully converted to a Type&amp;quot;&lt;/span&gt;, service));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// create the information and the structures needed to register the service in the IoC&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                ComponentModel model = &lt;span class="kwrd"&gt;new&lt;/span&gt; ComponentModel(id, serviceType, &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(&lt;span class="kwrd"&gt;object&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;                model.ExtendedProperties[&lt;span class="str"&gt;&amp;quot;EndPointConfig&amp;quot;&lt;/span&gt;] = endpointconfiguration;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="rem"&gt;// this is the key part the componentactivator&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;                model.CustomComponentActivator = &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(WcfProxyActivator);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;if&lt;/span&gt; (!&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(lifestyle))&lt;/pre&gt;

    &lt;pre class="alt"&gt;                    model.LifestyleType = (LifestyleType)Enum.Parse(&lt;span class="kwrd"&gt;typeof&lt;/span&gt; (LifestyleType), lifestyle);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;span class="kwrd"&gt;if&lt;/span&gt; (!&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(customLifestyleType))&lt;/pre&gt;

    &lt;pre class="alt"&gt;                    model.CustomLifestyle = Type.GetType(customLifestyleType);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                &lt;/pre&gt;

    &lt;pre class="alt"&gt;                &lt;span class="rem"&gt;// todo: set extended properties&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                Kernel.AddCustomComponent(model);&lt;/pre&gt;

    &lt;pre class="alt"&gt;            }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;        }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s how you can instantiate a proxy from a WCF service using this facility:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="rem"&gt;// lets create the container and load its configuration&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; WindsorContainer cont = &lt;span class="kwrd"&gt;new&lt;/span&gt; WindsorContainer(&lt;span class="str"&gt;&amp;quot;Windsor.xml&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; IServerService service = cont.Resolve&amp;lt;IServerService&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; var response = service.Echo(&lt;span class="str"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt; Assert.That(&lt;span class="str"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, Is.EqualTo(response));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt; &lt;span class="rem"&gt;// try a complex call&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; ComplexTestData complexresponse = service.ExtendedEcho(&lt;span class="str"&gt;&amp;quot;extended hello&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt; Assert.IsNotNull(complexresponse);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt; Assert.That(&lt;span class="str"&gt;&amp;quot;extended hello&amp;quot;&lt;/span&gt;, Is.EqualTo(complexresponse.Message));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; Assert.IsInstanceOfType(&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(DateTime), complexresponse.Timestamp);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt; &lt;span class="rem"&gt;// now try an async call&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt; service.BeginEcho(&lt;span class="str"&gt;&amp;quot;helloAsync&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                   (result) =&amp;gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                       {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                           &lt;span class="kwrd"&gt;string&lt;/span&gt; res = ((IServerService) result.AsyncState).EndEcho(result);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;                           Assert.That(&lt;span class="str"&gt;&amp;quot;helloAsync&amp;quot;&lt;/span&gt;, Is.EqualTo(res));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;                       },&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;                   service);&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;
You don’t need to use any ServiceReference or any svcutil generated code, if you want to have async method (like in the example above) all you have to do is define your interface (by deriving from the server interface class or by writing a new one from scratch) for the service and provide the methods with the right signature.&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-nhibernate-integration-facility-configuration-object"&gt;Castle NHibernate Integration Facility: how to get the configuration object&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-resolve-dependencies-existing-object-instance"&gt;Castle Windsor - resolve dependencies on an existing object instance&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-implementing-simple-logging-framework"&gt;Silverlight / Castle Windsor – implementing a simple logging framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-castle-windsor-logging-framework-properly"&gt;Silverlight / Castle Windsor – how to use a logging framework properly&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-silverlight-4-binaries"&gt;Castle Windsor – Silverlight 4 binaries&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/castle-windsor-wcf-services-resolution-facility"&gt;&lt;strong&gt;More related document (16)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/castle-windsor-wcf-services-resolution-facility</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/castle-windsor-wcf-services-resolution-facility#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/castle-windsor-wcf-services-resolution-facility</guid><pubDate>Fri, 22 May 2009 01:52:00 GMT</pubDate><category>Castle windsor</category><category>Facility</category><category>Services</category><category>Wcf</category></item><item><title>NHibernate/SqlServer: persist a generic ‘serializable’ object to an XML field</title><description>&lt;p&gt;Recently we had the problem of persisting some sort of extended data attached to a business object with the schema and the data of these extended information that can vary over time (usually with an additive strategy). Since we do not need to do extensive or complex analysis queries on these data (they are almost all there for a ‘cosmetic’ fashion) the first thing that came into my mind instead of creating another mapping to a liked table was to use an XML field. &lt;/p&gt;  &lt;p&gt;Plus the data that can be stored in this data extension field can be totally different from object to object. &lt;/p&gt;  &lt;p&gt;If you know the Type of the object that represent the data to save my good friend &lt;a href="http://www.nablasoft.com/alkampfer/" target="_blank"&gt;Alkamfer&lt;/a&gt; already have an elegant solution: &lt;a href="http://www.nablasoft.com/alkampfer/index.php/2009/05/14/use-xml-field-in-sqlserver-with-nhibernate/" target="_blank"&gt;Use Xml field in SqlServer with nhibernate&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;The first step is to find an efficient way to serialize/deserialize objects to our XML format, I made some tests on the standards .net serializers and it came out that the new DataContractSerializer is quite fast compare to the old XmlSerializer, so I decided to give it a try.&lt;/p&gt;  &lt;p&gt;Serializing an object is not a real problem, the deserialization step is a little more problematic, mainly because we need to know the type of the object we want to deserialize. but since we want to deserialize some data coming out from a single XML field in a database we do not have this information available...untill we find a way to embed it inside the XML serialized stream.&lt;/p&gt;  &lt;p&gt;So the first step was to write a couple of simple functions to serialize a class to an XML stream embedding the type of the serialized item in the outmost tag. This is quite simple to do using the DataContractSerializer functions: WriteStartObject(), WriteObjectContent() and WriteEndObject().&lt;/p&gt;  &lt;p&gt;Here’s the code for the serialization helpers, the Type attribute is embedded in a custom attribute called &lt;em&gt;serType&lt;/em&gt;:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; DataContractSerializerHelpers&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ToXml(&lt;span class="kwrd"&gt;object&lt;/span&gt; obj)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; ToXml(obj, &lt;span class="kwrd"&gt;null&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ToXml(&lt;span class="kwrd"&gt;object&lt;/span&gt; obj, IEnumerable&amp;lt;Type&amp;gt; knownTypes)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         Type objType = obj.GetType();&lt;/pre&gt;

    &lt;pre class="alt"&gt;         DataContractSerializer ser = &lt;span class="kwrd"&gt;new&lt;/span&gt; DataContractSerializer(objType, knownTypes);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;using&lt;/span&gt; (StringWriter sw = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringWriter())&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            {&lt;/pre&gt;

    &lt;pre class="alt"&gt;               XmlWriterSettings settings = &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlWriterSettings();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               settings.OmitXmlDeclaration = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               settings.Indent = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="rem"&gt;//settings.NewLineOnAttributes = true;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;using&lt;/span&gt; (XmlWriter writer = XmlWriter.Create(sw, settings))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               {&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  ser.WriteStartObject(writer, obj);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  writer.WriteAttributeString(&lt;span class="str"&gt;&amp;quot;serType&amp;quot;&lt;/span&gt;, objType.FullName + &lt;span class="str"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; + objType.Assembly.GetName().Name);&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  ser.WriteObjectContent(writer, obj);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  ser.WriteEndObject(writer);&lt;/pre&gt;

    &lt;pre class="alt"&gt;                  &lt;span class="rem"&gt;//ser.WriteObject(writer, obj);&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               }&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;return&lt;/span&gt; sw.ToString();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            }&lt;/pre&gt;

    &lt;pre class="alt"&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; FromXml(&lt;span class="kwrd"&gt;string&lt;/span&gt; data)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; FromXml(data, &lt;span class="kwrd"&gt;null&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; FromXml(&lt;span class="kwrd"&gt;string&lt;/span&gt; data, IEnumerable&amp;lt;Type&amp;gt; knownTypes)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;using&lt;/span&gt; (StringReader sr = &lt;span class="kwrd"&gt;new&lt;/span&gt; StringReader(data))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;            XmlReaderSettings settings = &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlReaderSettings();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            &lt;span class="kwrd"&gt;using&lt;/span&gt; (XmlReader reader = XmlReader.Create(sr, settings))&lt;/pre&gt;

    &lt;pre class="alt"&gt;            {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               reader.Read();&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;string&lt;/span&gt; objTypeStr = reader.GetAttribute(&lt;span class="str"&gt;&amp;quot;serType&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(objTypeStr))&lt;/pre&gt;

    &lt;pre class="alt"&gt;               {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;                  &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; SerializationException(&lt;span class="str"&gt;&amp;quot;Missing the 'type' argument to enable automatich deserialization&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;               }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;               DataContractSerializer ser = &lt;span class="kwrd"&gt;new&lt;/span&gt; DataContractSerializer(Type.GetType(objTypeStr), knownTypes);&lt;/pre&gt;

    &lt;pre class="alt"&gt;               &lt;span class="kwrd"&gt;return&lt;/span&gt; ser.ReadObject(reader);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;            }&lt;/pre&gt;

    &lt;pre class="alt"&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The last step is now to save and load data using NHibernate, the obvious choice is to use a custom UserType; the serialization and deserialization is done in the NullSafeSet() and NullSafeGet() routines, we also choose to implement the IParameterizedType interface to provide for the KnownTypes that the DataContractSerializer may need in order to deserialize the data in the correct way (a simpler solution is to decorate the classes with the KnownTypeAttribute).&lt;/p&gt;

&lt;p&gt;Here’s the code for the new user type:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; XmlFieldUserType : IUserType, IParameterizedType&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="preproc"&gt;#region&lt;/span&gt; Equals member&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;bool&lt;/span&gt; IUserType.Equals(&lt;span class="kwrd"&gt;object&lt;/span&gt; x, &lt;span class="kwrd"&gt;object&lt;/span&gt; y)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; (x == y) || ((x != &lt;span class="kwrd"&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; x.Equals(y));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="preproc"&gt;#region&lt;/span&gt; IUserType Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Assemble(&lt;span class="kwrd"&gt;object&lt;/span&gt; cached, &lt;span class="kwrd"&gt;object&lt;/span&gt; owner)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; cached;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; DeepCopy(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;value&lt;/span&gt; == &lt;span class="kwrd"&gt;null&lt;/span&gt;) &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;.DeepClone();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Disassemble(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; GetHashCode(&lt;span class="kwrd"&gt;object&lt;/span&gt; x)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; x.GetHashCode();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsMutable&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; NullSafeGet(System.Data.IDataReader rs, &lt;span class="kwrd"&gt;string&lt;/span&gt;[] names, &lt;span class="kwrd"&gt;object&lt;/span&gt; owner)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      Int32 index = rs.GetOrdinal(names[0]);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (rs.IsDBNull(index))&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; DataContractSerializerHelpers.FromXml((String)rs[index], KnowsTypes);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; NullSafeSet(System.Data.IDbCommand cmd, &lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;, &lt;span class="kwrd"&gt;int&lt;/span&gt; index)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;value&lt;/span&gt; == &lt;span class="kwrd"&gt;null&lt;/span&gt; || &lt;span class="kwrd"&gt;value&lt;/span&gt; == DBNull.Value)&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         NHibernateUtil.String.NullSafeSet(cmd, &lt;span class="kwrd"&gt;null&lt;/span&gt;, index);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         NHibernateUtil.String.Set(cmd, DataContractSerializerHelpers.ToXml(&lt;span class="kwrd"&gt;value&lt;/span&gt;, KnowsTypes), index);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Replace(&lt;span class="kwrd"&gt;object&lt;/span&gt; original, &lt;span class="kwrd"&gt;object&lt;/span&gt; target, &lt;span class="kwrd"&gt;object&lt;/span&gt; owner)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; original;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; Type ReturnedType&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(Uri); }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; SqlType[] SqlTypes&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      get { &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; SqlType[] { NHibernateUtil.String.SqlType }; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="preproc"&gt;#region&lt;/span&gt; IParameterizedType Members&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; KnownTypesStr;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;private&lt;/span&gt; List&amp;lt;Type&amp;gt; KnowsTypes;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; SetParameterValues(System.Collections.IDictionary parameters)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      KnownTypesStr = (&lt;span class="kwrd"&gt;string&lt;/span&gt;)parameters[&lt;span class="str"&gt;&amp;quot;knowntypes&amp;quot;&lt;/span&gt;];&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;string&lt;/span&gt;.IsNullOrEmpty(KnownTypesStr)) &lt;span class="kwrd"&gt;return&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      KnowsTypes = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;Type&amp;gt;();&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt;(&lt;span class="kwrd"&gt;string&lt;/span&gt; str &lt;span class="kwrd"&gt;in&lt;/span&gt; KnownTypesStr.Split(&lt;span class="str"&gt;';'&lt;/span&gt;))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         Type t = Type.GetType(str, &lt;span class="kwrd"&gt;false&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (t != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            KnowsTypes.Add(t);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As a note: the DeepClone is actually implemented with a technique already explained in this blog, to be honest it’s not the best way to do it, but it’s a general approach that works well for serializable objects.&lt;/p&gt;

&lt;p&gt;To use the previous code, suppose you have the following class hierarchy:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Data&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; Guid Id { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Data1 { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;      &lt;span class="rem"&gt;// contiene diverse strutture, mappato su campo xml&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;      &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; ExtData { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt; [Serializable]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ExtData&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ExtData1 { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ExtData2 { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt; [Serializable]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; ExtData2&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ExtData3 { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ExtData4 { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;with ExtData that can contain instances of data types ExtData and ExtData2 (totally unrelated to each others), you can map the Data class like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Structura.Utils.Tests.Entities.Data, Structura.Utils.Tests&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;table&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;tblTESTDATA&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Id&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;unsaved-value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;generator&lt;/span&gt; &lt;span class="attr"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Data1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;DATA1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;length&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ExtData&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;column&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;EXTDATA&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;sql-type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;xml&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;type&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;SID.NHibernateUtils.UserTypes.XmlFieldUserType, SID.NHibernateUtils&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;param&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;knowntypes&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Structura.Utils.Tests.Entities.ExtData, Structura.Utils.Tests;Structura.Utils.Tests.Entities.ExtData2, Structura.Utils.Tests&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;param&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/deep-clone-business-object-quick-dirty"&gt;Deep Clone of a business object: the quick and dirty way&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/serialization-exception-propertychangedeventmanager-serializable"&gt;Serialization Exception: PropertyChangedEventManager is not serializable&lt;/a&gt; (12/04/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-enabling-xml-configuration-files-silverlight"&gt;Castle Windsor enabling XML configuration files in Silverlight&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-sqlserver-persist-generic-serializable-object-xml-field"&gt;&lt;strong&gt;More related document (24)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-sqlserver-persist-generic-serializable-object-xml-field</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-sqlserver-persist-generic-serializable-object-xml-field#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-sqlserver-persist-generic-serializable-object-xml-field</guid><pubDate>Mon, 18 May 2009 23:56:00 GMT</pubDate><category>Datacontractserializer</category><category>Nhibernate</category><category>Serialization</category><category>Xml</category></item><item><title>Silverlight/WPF UIElement: how to find and ancestor of type &lt;T&gt; procedurally</title><description>&lt;p&gt;Suppose you have the following scenario you have two templated UserControl:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;UCContainer - is a graphical container for other controls, it can be used to contain different kinds of controls, it can be skinned using a template that will be changed by the user/graphic designer. You cannot do any assumptions on the template. &lt;/li&gt;    &lt;li&gt;UCDetail - is a detail control contained in a UCContainer. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Given an instance of UCDetail, we want to access and modify property of the UCContainer that contains it. if You are lucky the &lt;em&gt;Parent&lt;/em&gt; property or the &lt;em&gt;VisualTreeHelper.GetParent()&lt;/em&gt; function can give you a reference to the UCContainer control itself. But more often they will give you a reference to a container control defined inside the UCContainer template (usually a StackPanel or a Grid).&lt;/p&gt;  &lt;p&gt;I’m not willing to go deep into concepts like the WPF Visual and Logical tree, you have tons of resources and books to look at for that.&lt;/p&gt;  &lt;p&gt;The only viable way I’ve found so far to get the ‘logical’ parent of the control is to use a recursion and look if the type of the parent object returned by and UIElement matches the type of the object that I consider his ‘logical’ parent, Here’s the code that does the trick:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Extensions&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; T FindAncestor&amp;lt;T&amp;gt;(DependencyObject obj) &lt;span class="kwrd"&gt;where&lt;/span&gt; T : DependencyObject&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;while&lt;/span&gt; (obj != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         T o = obj &lt;span class="kwrd"&gt;as&lt;/span&gt; T;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (o != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; o;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         obj = VisualTreeHelper.GetParent(obj);&lt;/pre&gt;

    &lt;pre class="alt"&gt;      }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; T FindAncestor&amp;lt;T&amp;gt;(&lt;span class="kwrd"&gt;this&lt;/span&gt; UIElement obj) &lt;span class="kwrd"&gt;where&lt;/span&gt; T : UIElement&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; FindAncestor&amp;lt;T&amp;gt;((DependencyObject)obj);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wpf-bind-explicit-interface-indexer-implementation"&gt;Silverlight / WPF: is it possible to bind to an explicit interface indexer implementation?&lt;/a&gt; (07/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/xaml-power-toys-mole"&gt;XAML Power Toys and Mole&lt;/a&gt; (10/09/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wrap-ilist-effective-binding-silverlight-wpf"&gt;Wrap IList&lt;T&gt; and use it for effective binding in Silverlight and WPF&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlightwpf-uielement-find-ancestor-type-procedurally"&gt;&lt;strong&gt;More related document (52)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlightwpf-uielement-find-ancestor-type-procedurally</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlightwpf-uielement-find-ancestor-type-procedurally#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlightwpf-uielement-find-ancestor-type-procedurally</guid><pubDate>Thu, 30 Apr 2009 21:13:00 GMT</pubDate><category>Find ancestor</category><category>Parent</category><category>Silverlight</category><category>Wpf</category></item><item><title>ASP.NET Routing and DataBinding</title><description>&lt;p&gt;On a project I’m currently working on the new ASP.NET Routing was used to realize a navigation system for the website but also to present the Urls in a way that is friendly to the search engines’ analysis tools in order to improve indexing a bit.&lt;/p&gt;  &lt;p&gt;In this article I’m going to describe what ASP.NET Routing is, there are already a plethora of good resources available on the web, I will show you a flexible way to retrieve parameters from the Url that is associated to a particular request.&lt;/p&gt;  &lt;p&gt;We suppose to have the usual Person class that defines an object in our database:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Person&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; Id { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Name { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Surname { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s say we have a page that filters a set of data, and we can apply the filter on each of the field of the class. the first thing to do is to define a route that will be called to visualize the filtered data. We want to minimize the length of our Url and we want to be flexible enough that adding ne parameters to the search do not impact out navigation system.&lt;/p&gt;

&lt;p&gt;We would like to use something like:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mysite.com/PersonListFilter/id/2"&gt;http://www.mysite.com/PersonListFilter/id/2&lt;/a&gt; - filters only on Id &lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mysite.com/PersonListFilter/nm/Alessandro"&gt;http://www.mysite.com/PersonListFilter/nm/Alessandro&lt;/a&gt; - filters only on the name&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mysite.com/PersonListFilter/sn/Giorgetti"&gt;http://www.mysite.com/PersonListFilter/sn/Giorgetti&lt;/a&gt; - filters only on the surname&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mysite.com/PersonListFilter/nm/Alessandro/id2"&gt;http://www.mysite.com/PersonListFilter/nm/Alessandro/id2&lt;/a&gt; - combined filter, the order of parameters is irrelevant, we can also add more parameters to the search.&lt;/p&gt;

&lt;p&gt;The route we use will be defined like this: “PersonListFilter/{*params}”&lt;/p&gt;

&lt;p&gt;in the Global.asax (or in any other accepted point) we insert the route in the routing table:&lt;/p&gt;

&lt;div class="csharpcode-wrapper" style="width: 97.5%; height: 41px"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;System.Web.Routing.RouteTable.Routes.Add(&lt;span class="str"&gt;&amp;quot;PersonListFilter&amp;quot;&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; System.Web.Routing.Route(&lt;span class="str"&gt;&amp;quot;PersonListFilter/{*params}&amp;quot;&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; SearchModelRouteHandler(&lt;span class="str"&gt;&amp;quot;~/Pages/PersonListFilter.aspx&amp;quot;&lt;/span&gt;)));&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To parse the parameters from the Url we use a custom route handler object, it will extract the parameters and their values from the Url and it will insert them into the context of the web request. Later on, when you want to use them you can retrieve them directly from the context, without the need to parse again the Url.&lt;/p&gt;

&lt;p&gt;here’s the custom route handler:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// routing handler for the filter page, it will analyze the parameters passed in and&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// insert them into the httpcontext as name/value pairs&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; FilterRouteHandler : IRouteHandler&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; VirtualPath { get; set; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; FilterRouteHandler(&lt;span class="kwrd"&gt;string&lt;/span&gt; virtualPath) { &lt;span class="kwrd"&gt;this&lt;/span&gt;.VirtualPath = virtualPath; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="preproc"&gt;#region&lt;/span&gt; IRouteHandler Members&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; IHttpHandler GetHttpHandler(RequestContext requestContext)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   {&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (var &lt;span class="kwrd"&gt;value&lt;/span&gt; &lt;span class="kwrd"&gt;in&lt;/span&gt; requestContext.RouteData.Values)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      {&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="rem"&gt;// this string contains a conctat of name/value pairs in the format eye/1/hair/5/etcetc...&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;value&lt;/span&gt;.Value == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;continue&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="rem"&gt;// store the whole search string into a single string too&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         requestContext.HttpContext.Items[&lt;span class="str"&gt;&amp;quot;FilterParams&amp;quot;&lt;/span&gt;] = &lt;span class="kwrd"&gt;value&lt;/span&gt;.Value;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;string&lt;/span&gt;[] values = &lt;span class="kwrd"&gt;value&lt;/span&gt;.Value.ToString().Split(&lt;span class="str"&gt;'/'&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;for&lt;/span&gt; (&lt;span class="kwrd"&gt;int&lt;/span&gt; i = 0; i &amp;lt; values.Length; i+=2 )&lt;/pre&gt;

    &lt;pre class="alt"&gt;            requestContext.HttpContext.Items[values[i]] = values[i+1];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      IHttpHandler page = (IHttpHandler)BuildManager.CreateInstanceFromVirtualPath(&lt;span class="kwrd"&gt;this&lt;/span&gt;.VirtualPath, &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(Page));&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; page;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see it is very generic, It accepts a string in the constructor that will be the destination of the redirection, plus it only parses the string that defines the parameters splitting it into a series of (name,value) pairs.&lt;/p&gt;

&lt;p&gt;The last step is how to use the values with classic ASP.NET data binding, to accomplish the task we can define a custom Parameter object that any data source (ObjectDataSource, SqlDataSource, etc...) can use:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// Retrieve a parameter from the querystring or the httpcontext (querystring has higher priority).&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="rem"&gt;/// Used by datasource objects.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; QueryStringOrHttpContextParameter : Parameter&lt;/pre&gt;

    &lt;pre class="alteven"&gt;{&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="rem"&gt;/// The key in the query string or in the context.items collection.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ItemName { get; set; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; Evaluate(System.Web.HttpContext context, System.Web.UI.Control control)&lt;/pre&gt;

    &lt;pre class="alt"&gt;   {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (String.IsNullOrEmpty(ItemName))&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class="str"&gt;&amp;quot;Fill in 'ItemName' parameter&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="rem"&gt;// read data from query string&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (context.Request.QueryString.AllKeys.Contains(ItemName))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; context.Request.QueryString[ItemName];&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="rem"&gt;// read data from context&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;if&lt;/span&gt; (context.Items.Contains(ItemName))&lt;/pre&gt;

    &lt;pre class="alt"&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; context.Items[ItemName];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&amp;#160;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;return&lt;/span&gt; DefaultValue;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   }&lt;/pre&gt;

    &lt;pre class="alt"&gt;}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Again the class is pretty generic, plus it first looks at the same values into the QueryString in case we want to revert from the ASP.NET Routing navigation model to a classical one, so you do not have to worry about rewriting the binding section in the page.&lt;/p&gt;

&lt;p&gt;Here’s how you can use it:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;asp:ObjectDataSource&lt;/span&gt; &lt;span class="attr"&gt;ID&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ObjectDataSource1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;runat&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;server&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;SelectMethod&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;GetSearchResult&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="attr"&gt;TypeName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;PersonFilterDataSource&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;SelectParameters&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;myextension:QueryStringOrHttpContextParameter&lt;/span&gt; &lt;span class="attr"&gt;ItemName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mlpi&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;DefaultValue&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;pageindex&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Int32&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;myextension:QueryStringOrHttpContextParameter&lt;/span&gt; &lt;span class="attr"&gt;ItemName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;myextension:QueryStringOrHttpContextParameter&lt;/span&gt; &lt;span class="attr"&gt;ItemName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;nm&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;myextension:QueryStringOrHttpContextParameter&lt;/span&gt; &lt;span class="attr"&gt;ItemName&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;sn&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;surname&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;asp:Parameter&lt;/span&gt; &lt;span class="attr"&gt;DefaultValue&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;12&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;pagesize&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Int32&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;asp:Parameter&lt;/span&gt; &lt;span class="attr"&gt;DefaultValue&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Direction&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Output&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;numrows&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Int32&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;SelectParameters&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;asp:ObjectDataSource&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A similar technique can be used in ASP.NET MVC and for calling WebServices too.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/aspnet-routing-databinding</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/aspnet-routing-databinding#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/aspnet-routing-databinding</guid><pubDate>Mon, 20 Apr 2009 18:13:00 GMT</pubDate><category>Aspnet routing</category><category>Databinding</category></item><item><title>Internet Explorer 8 causes troubles to Vista and TestDriven.Net (‘test with...debugger’ not working)</title><description>&lt;p&gt;Two days ago I installed Internet Explorer 8 and I have to admit I was quite satisfied by its performance... it seemed more responsive and with faster load times compared to Ie7.&lt;/p&gt;  &lt;p&gt;However today I started to experience the first problems...in Windows Vista (I have an Italian version of the operating system) I noticed that each time I opened a new folder on the file system, it would open in a new window, totally ignoring the option to open it in the same window (I’ve double checked both the option and the registry keys to make sure the settings were correct).&lt;/p&gt;  &lt;p&gt;The second strange thing was the fact that TestDriven.Net option ‘Test with...debugger’ stopped working. I’ve spent 2 hours messing with the registry keys and similar trying to figure out the problem without success.&lt;/p&gt;  &lt;p&gt;The last option I had was to check for whatever I’ve installed in the last days and guess what? After removing Ie8 and restarting everything started to work again.&lt;/p&gt;  &lt;p&gt;To uninstall Internet Explorer 8, go to &lt;strong&gt;Control Panel&lt;/strong&gt;, and click on &lt;strong&gt;Uninstall Programs&lt;/strong&gt; link or &lt;strong&gt;Programs and Features&lt;/strong&gt; icon. Then on Tasks pane on the left, click on &lt;strong&gt;View installed updates&lt;/strong&gt; link. Locate and select &lt;strong&gt;Windows Internet Explorer 8&lt;/strong&gt;. &lt;/p&gt;  &lt;p&gt;I’ll install it again (in a virtual machine this time) and try to investigate the problem more when I have time.&lt;/p&gt;  &lt;p&gt;Update:&lt;/p&gt;  &lt;p&gt;I tried to install it again to see if some updates solved the issue, but once again I had no luck. I decided to spent some time again looking for a solution and I saw that many guys around had the same issue and resolved it just launching IE8 with Administrative privileges. It obviously did not work for me :).&lt;/p&gt;  &lt;p&gt;Then I found some posts of people that propose registry hacks, I tried them with no luck until I found this post on eggheadcafe: &lt;a title="http://www.eggheadcafe.com/conversation.aspx?messageid=34297087&amp;amp;threadid=32958968" href="http://www.eggheadcafe.com/conversation.aspx?messageid=34297087&amp;amp;threadid=32958968"&gt;http://www.eggheadcafe.com/conversation.aspx?messageid=34297087&amp;amp;threadid=32958968&lt;/a&gt;&lt;/p&gt;  &lt;blockquote&gt;   &lt;pre&gt;*  open a new &amp;quot;Command Prompt&amp;quot; window by right-clicking and selecting &amp;quot;Run
as administrator&amp;quot;;
*  at the prompt, run the command &amp;quot;regsvr32 actxprxy.dll&amp;quot;.&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;registering this DLL solved all the problems for me.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/internet-explorer-8-troubles-vista-testdriven-net-test-with-debugger-working</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/internet-explorer-8-troubles-vista-testdriven-net-test-with-debugger-working#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/internet-explorer-8-troubles-vista-testdriven-net-test-with-debugger-working</guid><pubDate>Fri, 17 Apr 2009 01:45:00 GMT</pubDate><category>Debugger</category><category>Internet exploer 8</category><category>Test with</category><category>Testdrivennet</category></item><item><title>Get SharePoint Designer 2007 for Free</title><description>&lt;p&gt;Today I was looking to download a trial version of SharePoint Designer 2007 to test it with a project I’ve under development and I discovered that since 31/03/2009 Microsoft is ‘giving it away’ for free.&lt;/p&gt;  &lt;p&gt;Here’s the link where you can download it: &lt;a title="http://www.microsoft.com/downloads/details.aspx?familyid=BAA3AD86-BFC1-4BD4-9812-D9E710D44F42&amp;amp;displaylang=en" href="http://www.microsoft.com/downloads/details.aspx?familyid=BAA3AD86-BFC1-4BD4-9812-D9E710D44F42&amp;amp;displaylang=en"&gt;http://www.microsoft.com/downloads/details.aspx?familyid=BAA3AD86-BFC1-4BD4-9812-D9E710D44F42&amp;amp;displaylang=en&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I tried to quickly install it to verify, and I cannot see any reminder to an evaluation version or expiration period, the license agreement specifies ‘Retail License’ too.&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/class-diagram-designer-silverlight-project"&gt;How to use the Class Diagram designer in a Silverlight Project&lt;/a&gt; (02/04/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part"&gt;Windows SharePoint Services - Developing and (Remotely) Debugging a Web Part&lt;/a&gt; (03/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-setup"&gt;Windows SharePoint Services - first setup&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication"&gt;SharePoint Services - Setting up a Website with Forms Authentication&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/code-analysis-refactoring-utilities"&gt;Some Code Analysis and Refactoring Utilities you may like&lt;/a&gt; (11/03/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/get-sharepoint-designer-2007-for-free"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/get-sharepoint-designer-2007-for-free</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/get-sharepoint-designer-2007-for-free#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/get-sharepoint-designer-2007-for-free</guid><pubDate>Fri, 03 Apr 2009 23:11:00 GMT</pubDate><category>Designer</category><category>Download</category><category>Free</category><category>Sharepoint</category></item><item><title>NHibernate: how to give a name to your Primary Key using SchemaExport (in SQL Server/ SQL Express)</title><description>&lt;p&gt;If in your project, you let NHibernate generate the database from the information you provide with the schema mappings (a thing extremely useful, especially for testing cause you can build up the database in engines like SQLite)...&lt;/p&gt;  &lt;p&gt;mmm...where did I heard something similar ?!?!? ah yes...in my previous post: &lt;a href="http://www.primordialcode.com/index.php/2008/10/25/nhibernate-control-delete-rule-update-rule-foreign-key-schemaexport/" target="_blank"&gt;NHibernate: how to control Delete Rule and Update Rule in a foreign key when using SchemaExport&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;This time I want to focus on giving a proper name to your Primary Key in the table (which is usually auto-generated in NHibernate 1.2, have to check in 2.0+), this can be useful when you need to generate a database dynamically and then you need to build up update or synchronize it with successive versions using SQL scripts.&lt;/p&gt;  &lt;p&gt;NHibernate doesn’t offer (yet) a facility to give a name to your primary key (nothing that I found however, I admit I’m not an NHibernate guru, but an average user). You can use an approach similar to that exposed in my previous post.&lt;/p&gt;  &lt;p&gt;In this example I’m using SQL Server/SQL Express as my database engine and the queries are built with that in mind.&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="html"&gt;xml&lt;/span&gt; &lt;span class="attr"&gt;version&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;encoding&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;utf-8&amp;quot;&lt;/span&gt; ?&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;hibernate-mapping&lt;/span&gt; &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;default-lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;SID.Sphera.Controls.Extended.ImageRegion.Entities.ImageSheetData, SID.Sphera.Controls.Extended&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         &lt;span class="attr"&gt;table&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ImageRegionImageSheetData&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;_Id&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IRISD_Id&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;generator&lt;/span&gt; &lt;span class="attr"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;_Name&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IRISD_Name&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;not-null&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;_ResourceId&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IRISD_ResourceId&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;not-null&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;_Width&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IRISD_Width&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;not-null&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;int&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;_Height&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IRISD_Height&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;not-null&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;int&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;_BackgroundImageId&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IRISD_BackgroundImageId&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;             &lt;span class="attr"&gt;not-null&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;bag&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;_sensitiveRegions&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;cascade&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;all-delete-orphan&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;key&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IRIRD_ParentImageSheetId&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;foreign-key&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;FK_IRIRD_IRISD&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;one-to-many&lt;/span&gt; &lt;span class="attr"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;SID.Sphera.Controls.Extended.ImageRegion.Entities.ImageRegionData, SID.Sphera.Controls.Extended&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;bag&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;     &lt;span class="rem"&gt;&amp;lt;!-- Primary Key Rename --&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;database-object&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;create&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;             DECLARE @pkName Varchar(255)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;             ;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;             SET @pkName= (&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;                 SELECT [name] FROM sysobjects&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;                 WHERE [xtype] = 'PK'&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;                 AND [parent_obj] = OBJECT_ID(N'[dbo].[ImageRegionImageSheetData]')&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;             )&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;             ;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;             Exec sp_rename @pkName, 'PK_ImageRegionImageSheetData', 'OBJECT'&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;create&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;drop&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;drop&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;database-object&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  34:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;hibernate-mapping&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Look at line 24: with this query you get the actual name of the primary key which was generated by NHibernate, this is specific to SQL server/SQL express and is you use a different database engine you have to adapt those queries (I know you loose the decoupling to the database engine offered by NHibernate, but you can setup some strategies to load different mappings according to you current dialect). &lt;/p&gt;

&lt;p&gt;In line 30 we use a system stored procedure that allow us to rename the object we got before.&lt;/p&gt;

&lt;p&gt;If you know a different and more elegant way to reach the goal, please leave me a comment here.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:31fbfa1b-9c07-4dbb-b5f1-f8c474896441" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/NHibernate" rel="tag"&gt;NHibernate&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Primary+Key" rel="tag"&gt;Primary Key&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Name" rel="tag"&gt;Name&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-control-delete-rule-update-rule-foreign-key-schemaexport"&gt;NHibernate: how to control Delete Rule and Update Rule in a foreign key when using SchemaExport&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-nhibernate-day-is-coming.this-saturday"&gt;The NHibernate Day is coming...this Saturday!&lt;/a&gt; (10/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-give-primary-key-schemaexport-sql-server-sql-express"&gt;&lt;strong&gt;More related document (21)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-give-primary-key-schemaexport-sql-server-sql-express</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-give-primary-key-schemaexport-sql-server-sql-express#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-give-primary-key-schemaexport-sql-server-sql-express</guid><pubDate>Fri, 20 Mar 2009 21:09:00 GMT</pubDate><category>Name</category><category>Nhibernate</category><category>Primary key</category></item><item><title>Resharper 4.5 beta - give it a try!</title><description>&lt;p&gt;I’m a fan of Resharper, I think it’s one of the best (if not THE best) Visual Studio add-in you can find around; but it always have had stability problems (mitigated by a wrapper used to launch Visual Studio, see my previous post: &lt;a href="http://www.primordialcode.com/index.php/2008/12/23/resharper-outofmemoryexception-problem/" target="_blank"&gt;Resharper and the OutOfMemoryException&lt;/a&gt;) and it tended to slow down the whole IDE when you were working on medium to large projects (let’s say 30+ projects in a solution) and especially if you have to deal with old style web projects (it was a little better with web application projects).&lt;/p&gt;  &lt;p&gt;Thus I got the habit of keeping it disabled and enable it only when I have to do some refactoring to the project I’m working on, anyway this was you loose a lot of the great features Resharper offer to you.&lt;/p&gt;  &lt;p&gt;Usually I do not install beta version of tools in my main production environment; but after having heard some enthusiastic feedback from a couple of friends (&lt;a href="http://www.nablasoft.com/alkampfer/" target="_blank"&gt;Alkampfer's Place&lt;/a&gt; and &lt;a href="http://dotnetmarche.org/blogs/andreabalducci/Default.aspx" target="_blank"&gt;moleskine di un programmatore&lt;/a&gt;), I decided to give it a try.&lt;/p&gt;  &lt;p&gt;I can say this new version is a big improvement in speed and responsiveness of the whole environment, you do not have to wait anymore that Resharper caches all the assemblies in the project so you can start working immediately after opening the solution while it continues to load and parse assemblies in background. It’s generally faster in opening new code files and analyze them, that can be seen especially when working with aspx pages or xaml files.&lt;/p&gt;  &lt;p&gt;It also seems to use less memory and be more stable than the previous version: opening a very big solution with mixed language (C#, VB.net) and very different kinds of projects (library, Silverlight, WPF...) didn’t resulted in the usual OutOfMemoryException without using the wrapper.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:09660ab4-e306-4f1c-906c-715c9f8b55db" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Resharper" rel="tag"&gt;Resharper&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/resharper-45-beta-give"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/resharper-45-beta-give</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/resharper-45-beta-give#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/resharper-45-beta-give</guid><pubDate>Thu, 19 Mar 2009 18:04:00 GMT</pubDate><category>Resharper</category></item><item><title>VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!</title><description>&lt;p&gt;And it happened to me too...I was trying to add some new controls to my toolbox (the Silverlight toolkit in the specific) and I got that nasty IDE crash, it all shut down without notice nor errors.&lt;/p&gt;  &lt;p&gt;I started to look around in the Internet to see if some else had the same problem with a solution for it and I came to this forum post, which states it clearly a conflict between PowerCommands and VS2008 SP1:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://social.msdn.microsoft.com/Forums/en-US/vssetup/thread/e2434065-9921-4861-b914-9cc9d6c55553/" target="_blank"&gt;Xaml Editor, Class Explorer Crashes after Visual Studio 2008 SP1&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;They propose two solutions:&lt;/p&gt;  &lt;p&gt;1- a workaround from Microsoft, that I report here:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Through Microsoft's help they came up with a work around which is a simple modification to the devenv.exe.config file.      &lt;br /&gt;This will exist in (64 bit systems) C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\IDE       &lt;br /&gt;Or (32 bit systems) C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE       &lt;br /&gt;Add this XML token to the dependentAseembly list. They had me add it after the office one, but im not sure if that matters. &lt;/p&gt;    &lt;div class="csharpcode-wrapper"&gt;     &lt;div class="csharpcode"&gt;       &lt;pre class="alt"&gt;&amp;lt;dependentAssembly&amp;gt; &lt;/pre&gt;

      &lt;pre class="alteven"&gt;    &amp;lt;assemblyIdentity name=&lt;span class="str"&gt;&amp;quot;office&amp;quot;&lt;/span&gt; publicKeyToken=&lt;span class="str"&gt;&amp;quot;71e9bce111e9429c&amp;quot;&lt;/span&gt; culture=&lt;span class="str"&gt;&amp;quot;neutral&amp;quot;&lt;/span&gt;/&amp;gt; &lt;/pre&gt;

      &lt;pre class="alt"&gt;    &amp;lt;codeBase version=&lt;span class="str"&gt;&amp;quot;12.0.0.0&amp;quot;&lt;/span&gt; href=&lt;span class="str"&gt;&amp;quot;PrivateAssemblies\Office12\Office.dll&amp;quot;&lt;/span&gt;/&amp;gt; &lt;/pre&gt;

      &lt;pre class="alteven"&gt;&amp;lt;/dependentAssembly&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;p&gt;New stuff&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/p&gt;

  &lt;div class="csharpcode-wrapper"&gt;
    &lt;div class="csharpcode"&gt;
      &lt;pre class="alt"&gt;&amp;lt;dependentAssembly&amp;gt; &lt;/pre&gt;

      &lt;pre class="alteven"&gt;    &amp;lt;assemblyIdentity name=&lt;span class="str"&gt;&amp;quot;Microsoft.PowerCommands&amp;quot;&lt;/span&gt; publicKeyToken=&lt;span class="str"&gt;&amp;quot;null&amp;quot;&lt;/span&gt; culture=&lt;span class="str"&gt;&amp;quot;neutral&amp;quot;&lt;/span&gt;/&amp;gt; &lt;/pre&gt;

      &lt;pre class="alt"&gt;    &amp;lt;codeBase version=&lt;span class="str"&gt;&amp;quot;1.1.0.0&amp;quot;&lt;/span&gt; href=&lt;span class="str"&gt;&amp;quot;C:\Program Files\PowerCommands\Microsoft.PowerCommands.dll&amp;quot;&lt;/span&gt;/&amp;gt; &lt;/pre&gt;

      &lt;pre class="alteven"&gt;&amp;lt;/dependentAssembly&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;2- if the former doesn’t work for you (it worked for me), you just have to uninstall PowerCommands.&lt;/p&gt;

&lt;p&gt;If you try to use the workaround, pay attention to use the correct path where you have your PowerCommands installed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:e77bac76-d268-49f4-8fe3-239da902c99f" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Visual+Studio" rel="tag"&gt;Visual Studio&lt;/a&gt;,&lt;a href="http://technorati.com/tags/PowerCommands" rel="tag"&gt;PowerCommands&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Crash" rel="tag"&gt;Crash&lt;/a&gt;,&lt;a href="http://technorati.com/tags/AddItems" rel="tag"&gt;AddItems&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010"&gt;How to update your TFS Workspace after CodePlex upgrade to TFS2010&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;&lt;strong&gt;More related document (9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash</guid><pubDate>Tue, 17 Mar 2009 18:44:00 GMT</pubDate><category>Additems</category><category>Crash</category><category>Powercommands</category><category>Visual studio</category></item><item><title>C#/VB interop and reference problems in Visual Studio 2003 (BC30007)</title><description>&lt;p&gt;You never end learning something new, I taught I have seen enough when dealing with solutions with C# and VB.NET mixed projects, today working on a legacy system I found the following scenario:&lt;/p&gt;  &lt;p&gt;Project A - VB project, defines a set of base classes&lt;/p&gt;  &lt;p&gt;Project B - C# project, uses the base classes and defines a set of controls&lt;/p&gt;  &lt;p&gt;Project C - VB project, main application module, uses both classes defined in project A and B&lt;/p&gt;  &lt;p&gt;All the reference were made to the corresponding projects selecting the projects via the standard Visual Studio add reference dialog box.&lt;/p&gt;  &lt;p&gt;When we compiled the solution the compiler kept telling us:&lt;/p&gt;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;BC30007: Reference required to assembly ‘Project A’ containing the base class ‘XXX’. Add one to your project.&lt;/p&gt;  &lt;p&gt;The funny thing is that the reference is already there; I tried to build a test ‘Project C’ project using C# instead of VB and it all worked well...this seems to me like a bug in the compiler.&lt;/p&gt;  &lt;p&gt;Surfing around I wasn’t able to find a lot of info but a single reply to a post that says something like: &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;This is a known bug in the VB compiler -- there's a problem whereby the      &lt;br /&gt;compiler doesn't recognize that the &amp;quot;Project 1&amp;quot; that &amp;quot;Project 2&amp;quot; refers       &lt;br /&gt;to is the same &amp;quot;Project 1&amp;quot; that you've got open in the IDE. The       &lt;br /&gt;workaround is to do this: delete the references from Project 3 and       &lt;br /&gt;Project 4 to Project 4 and re-add them as file references. That is,       &lt;br /&gt;instead of making a reference from the Project tab of the references       &lt;br /&gt;dialog, go the .NET tab and Browse for the actual DLL built by Project       &lt;br /&gt;1. This should make the error go away and workaround the problem until       &lt;br /&gt;there is a fixed compiler.’&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;And actually I cannot remind the source nor the author, I’m sorry I cannot give the credits for this but I copied and paste the text in a blob document while I was gathering information and I wasn’t able to find it again...but I tried to use the workaround he proposed and it worked.&lt;/p&gt;  &lt;p&gt;But making a reference to the file instead to the project you have to be very careful about the compilation order of the assemblies, especially if you change something in the ‘Project A’ assembly.&lt;/p&gt;  &lt;p&gt;To completely fix the situation and let Visual Studio to handle the right compilation order for projects you have to follow a series of steps:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Go to ‘Project A’ properties and make sure that each configuration build places the final output files in the same directory (this is important cause we make reference to the compiled assembly instead of the project)      &lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/03/csharpvbinterop1.png"&gt;&lt;img title="CSharpVBInterop1" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="205" alt="CSharpVBInterop1" src="/UserFiles/Guardian/2009/03/csharpvbinterop1-thumb.png" width="584" border="0" /&gt;&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Then we have to look for any reference made to ‘Project A’ inside the solution and change it to a file reference; point the reference to the compiled assembly inside the project bin folder &lt;/li&gt;    &lt;li&gt;To let Visual Studio handle the correct order of projects compilation we need to explicitly inform the project that it depends from another project in the solution. So after changing the reference right click on the project and from the context menu select ‘Project dependencies...’      &lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/03/csharpvbinterop2.png"&gt;&lt;img title="CSharpVBInterop2" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="232" alt="CSharpVBInterop2" src="/UserFiles/Guardian/2009/03/csharpvbinterop2-thumb.png" width="368" border="0" /&gt;&lt;/a&gt;       &lt;br /&gt;In this dialog box place a check-mark on your ‘Project A’.       &lt;br /&gt;In this way when you recompile the projects or the solution you will always be sure that ‘Project A’ is compiled (or recompiled) before the ones that use it; the right compilation order is respected in the same way as we have used a project reference. &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;I don’t know if this problem is present in Visual Studio 2005 and 2008, I didn’t had the chance to test it yet; if someone has more information or suggestions about the whole thing, please write a comment here or contact me directly.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:4c36116c-49be-47a5-b99a-8485f1c0277f" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Visual+Studio" rel="tag"&gt;Visual Studio&lt;/a&gt;,&lt;a href="http://technorati.com/tags/2003" rel="tag"&gt;2003&lt;/a&gt;,&lt;a href="http://technorati.com/tags/BC30007" rel="tag"&gt;BC30007&lt;/a&gt;,&lt;a href="http://technorati.com/tags/C%23" rel="tag"&gt;C#&lt;/a&gt;,&lt;a href="http://technorati.com/tags/VB" rel="tag"&gt;VB&lt;/a&gt;,&lt;a href="http://technorati.com/tags/reference" rel="tag"&gt;reference&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/cvb-interop-reference-problems-visual-studio-2003-bc30007"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/cvb-interop-reference-problems-visual-studio-2003-bc30007</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/cvb-interop-reference-problems-visual-studio-2003-bc30007#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/cvb-interop-reference-problems-visual-studio-2003-bc30007</guid><pubDate>Thu, 12 Mar 2009 20:06:00 GMT</pubDate><category>2003</category><category>Bc30007</category><category>C</category><category>Reference</category><category>Vb</category><category>Visual studio</category><category>C#</category></item><item><title>Windows SharePoint Services - Developing and (Remotely) Debugging a Web Part</title><description>&lt;p&gt;Previous articles of this series:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/index.php/2009/02/24/windows-sharepoint-services-setup/" target="_blank"&gt;Windows SharePoint Services - first setup&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.primordialcode.com/index.php/2009/02/27/sharepoint-services-setting-website-forms-authentication/" target="_blank"&gt;SharePoint Services - setting up a Website with Forms Authentication&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;There are a lot of tools available to help you build up and deploy new SharePoint solutions, the two biggest are:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;STSDEV - &lt;a title="http://www.codeplex.com/stsdev" href="http://www.codeplex.com/stsdev"&gt;http://www.codeplex.com/stsdev&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;VSeWSS - look for it at &lt;a title="http://blogs.msdn.com/sharepoint/default.aspx" href="http://blogs.msdn.com/sharepoint/default.aspx"&gt;http://blogs.msdn.com/sharepoint/default.aspx&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Both those tools help you generate a valid Visual Studio 2005/2008 solution to successfully develop and deploy SharePoint extension projects.&lt;/p&gt;  &lt;p&gt;But being a newbie in SharePoint and WSS development I believe it’s better to keep things simple and start from the scratch with a very basic project and do everything by hand.&lt;/p&gt;  &lt;p&gt;The following links present some very good guides that allow you to develop a Web Part in a workstation machine (WinXP/Vista) without the need of a SharePoint or WSS installed.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/martinv/archive/2007/08/23/remote-webpart-development-for-moss-2007.aspx" target="_blank"&gt;Remote WebPart Development for MOSS 2007&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://justindevine.wordpress.com/2008/12/04/remote-development-deployment-and-remote-debugging-your-first-sharepoint-2007-program/" target="_blank"&gt;Remote Development, Deployment, and Remote Debugging your first SharePoint 2007 Program&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.wictorwilen.se/Post/How-to-get-Remote-Debugging-work-properly.aspx" target="_blank"&gt;How to get Remote Debugging work properly&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;To develop a Web Part in Visual Studio you basically have to copy all the SharePoint library assembly from the Server machine to the Dev Machine (the one with Visual Studio installed); those files can be found inside the path: “C:\Program Files\Common Files\microsoft shared\Web Server Extensions\12\isapi”.&lt;/p&gt;  &lt;p&gt;Create the corresponding folder in your dev machine and copy only the files that match the pattern: Microsoft.SharePoint.*.dll.&lt;/p&gt;  &lt;p&gt;To allow Visual Studio to correctly resolve the assembly reference if you use the above mentioned tools to generate your projects you have to install those assembly to the GAC too (use the standard gacutil.exe to perform the task).&lt;/p&gt;  &lt;p&gt;To keep things simple I’ll skip all the step needed to create setup projects for Web Parts and we do all the steps by hand, as said before almost anything can be automated using STSDEV or VSeWSS.&lt;/p&gt;  &lt;p&gt;If you do not have a domain with active directory, but you have access to the WSS machine via VPN make sure to create an account on the server that matches the same username and password you use on your develop machine, it will simplify a bit the deployment of the assemblies to the WSS website directories and it will be very useful to successfully setup remote debugging.&lt;/p&gt;  &lt;p&gt;Let’s start by creating a very simple Web Part:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Open Visual Studio 2008. &lt;/li&gt;    &lt;li&gt;Create a new C# library project names TestWebPart. &lt;/li&gt;    &lt;li&gt;Add a reference to System.Web.dll &lt;/li&gt;    &lt;li&gt;(Optional) Add a reference to Microsoft.SharePoint.dll if you plan to use the SharePoint Object Model. &lt;/li&gt;    &lt;li&gt;Create a class TestWebPart.cs with the following code:      &lt;div class="csharpcode-wrapper"&gt;       &lt;div class="csharpcode"&gt;         &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TestWebPart : WebPart&lt;/pre&gt;

        &lt;pre class="alteven"&gt;{&lt;/pre&gt;

        &lt;pre class="alt"&gt;   [WebBrowsable(), Personalizable(PersonalizationScope.Shared)]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Content { get; set; }&lt;/pre&gt;

        &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;   &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; RenderContents(System.Web.UI.HtmlTextWriter writer)&lt;/pre&gt;

        &lt;pre class="alt"&gt;   {&lt;/pre&gt;

        &lt;pre class="alteven"&gt;      writer.Write(Content);&lt;/pre&gt;

        &lt;pre class="alt"&gt;   }&lt;/pre&gt;

        &lt;pre class="alteven"&gt;}&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;To not reduce MOSS/WSS Security to fully trust all installed assemblies. we must sign our Web Part project with a strong name and add the following line to “AssemblyInfo.cs”: 
    &lt;br /&gt;[assembly: System.Security.AllowPartiallyTrustedCallers()] &lt;/li&gt;

  &lt;li&gt;If the machines are members of different domains, or you don’t have a domain with active directory at all, on the server machine create an account that matches the one you use on your develop machine (use the same username and password). Make the user member of the Administration group. &lt;/li&gt;

  &lt;li&gt;Establish a network sharing on the root folder of the SharePoint website, based on the folder structure we chose I will enable sharing on the following directory: C:\SharePoint\WebApps; make sure you have the right permissions to write to it. &lt;/li&gt;

  &lt;li&gt;Add a post-build event to the solution project to copy the dll and pdb files to the bin directory of all the SharePoint website that will use the web part (we have 2 different sites: intranet and internet). 
    &lt;div class="csharpcode-wrapper"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;copy /Y &lt;span class="str"&gt;&amp;quot;$(TargetDir)$(TargetName).*&amp;quot;&lt;/span&gt; &lt;span class="str"&gt;&amp;quot;\\WIN-UENR6M3NW8J\WebApps\80\bin&amp;quot;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;copy /Y &lt;span class="str"&gt;&amp;quot;$(TargetDir)$(TargetName).*&amp;quot;&lt;/span&gt; &lt;span class="str"&gt;&amp;quot;\\WIN-UENR6M3NW8J\WebApps\www.sharepointtest.com80\bin&amp;quot;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;We now have to tell SharePoint that is safe to use our assembly and the web parts defined in it, to do so we need to modify all the web.config of each website that will use the assembly; so open them in notepad, find the &amp;lt;SafeControls&amp;gt; section and add there the definition for our control: 
    &lt;br /&gt;

    &lt;div class="csharpcode-wrapper" style="width: 97.5%; height: 34px"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;&amp;lt;SafeControl Assembly=&lt;span class="str"&gt;&amp;quot;TestWebPart, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3101006faf258fa2&amp;quot;&lt;/span&gt; Namespace=&lt;span class="str"&gt;&amp;quot;TestWebPart&amp;quot;&lt;/span&gt; TypeName=&lt;span class="str"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; Safe=&lt;span class="str"&gt;&amp;quot;True&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;The last step needed is to enable this Web Part inside SharePoint and make it available to the website, so logon to the website and choose: ‘site action’ -&amp;gt; ‘site settings’, look for the ‘Galleries’ column and click on ‘Web Parts’. &lt;/li&gt;

  &lt;li&gt;To repopulate the Web Part galley hit the button ‘New’, select the TestWebPart and then hit the ‘Populate Gallery’ button; if your Web Part isn’t in the list check all the previous steps and perform an iisreset. &lt;/li&gt;

  &lt;li&gt;To use the Web Part on a page, navigate to the page and click ‘site actions’ -&amp;gt; ‘edit page’; you are then free to add it and configure its properties. 
    &lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/03/sharepointtestwebpart.png"&gt;&lt;img title="TestWebPart used in the Home Page" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="293" alt="TestWebPart used in the Home Page" src="/UserFiles/Guardian/2009/03/sharepointtestwebpart-thumb.png" width="493" border="0" /&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Remote Debugging the Web Part&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We start with the following scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SharePoint deployed in a development server machine &lt;/li&gt;

  &lt;li&gt;SharePoint website up and running &lt;/li&gt;

  &lt;li&gt;No domain and no special users policy active, the Server machine and the development machine are connected by Lan or Vpn. &lt;/li&gt;

  &lt;li&gt;Visual Studio isn’t installed on the Server machine. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be able to use remote debugging you must have Visual Studio Professional or Visual Studio Team System (it will not work with Visual Studio Standard). Since we do not have an active directory to hold our users policy we’ll have to define a user account (with the same username and password on both machines) that will be used to develop and debug; this is needed by the remote debugging monitor to work cause it needs access to both the machines. Here are the steps you have to perform:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the Remote Debugger Monitor to the Server: go to “C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\Remote Debugger”, there you will find 3 folders: ‘ia64’, ‘x64’, ‘x86’ copy to the server the one that matches your server installation. &lt;/li&gt;

  &lt;li&gt;Define a new user on the server machine (I used ‘alessandro.giorgetti’) and make it member of ‘Administrators’ and ‘WSS_ADMIN_WPG’ (so it cal also be used as an administrator for SharePoint). &lt;/li&gt;

  &lt;li&gt;Go to the folder where you copied the remote debugging monitor and launch it using the newly defined user. You can use the ‘runas /user:alessandro.giorgetti msvsmon.exe’ command from the command line prompt (remember to launch it with administrative privileges) or you can use the Sysinternals utility called “Shellrunas” to have the runas command back in you context menu. &lt;/li&gt;

  &lt;li&gt;At this point you’ll have the remote debugging monitor up and running: 
    &lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/03/sharepointremotedebuggingmonitor.png"&gt;&lt;img title="SharePointRemoteDebuggingMonitor" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="202" alt="SharePointRemoteDebuggingMonitor" src="/UserFiles/Guardian/2009/03/sharepointremotedebuggingmonitor-thumb.png" width="604" border="0" /&gt;&lt;/a&gt; &lt;/li&gt;

  &lt;li&gt;Take note of the instance name (usually it will be in the form: domain\&lt;a href="mailto:username@servername"&gt;username@servername&lt;/a&gt;) cause it will be used later to connect to the server, you can however change it from the ‘tools’ -&amp;gt; ‘options’ menu. &lt;/li&gt;

  &lt;li&gt;Open a web browser with an instance of your SharePoint website. &lt;/li&gt;

  &lt;li&gt;Log to your development machine and define the same user (if it doesn’t exists) with the same password. make it is member of the following groups: ‘administrators’, ‘debugger users’. &lt;/li&gt;

  &lt;li&gt;Add an entry to the “C:\WINDOWS\system32\drivers\etc\hosts” file that will allow to browse the SharePoint website without a DNS server: 
    &lt;br /&gt;

    &lt;p&gt;&lt;/p&gt;

    &lt;div class="csharpcode-wrapper" style="width: 97.5%; height: 26px"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;10.8.0.38    &lt;a href="http://www.sharepointtest.com"&gt;www.sharepointtest.com&lt;/a&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;/p&gt;
in this example 10.8.0.38 is the address of my SharePoint test server. &lt;/li&gt;
&lt;/ol&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the development machine using that user or user the runas feature to launch visual studio under the new account. &lt;/li&gt;

  &lt;li&gt;Open the TestWebPart solution project and chose ‘Debug’ -&amp;gt; ‘Attach to process...’ from the menu; in the dialog box write the remote debugging server name you took before in the Qualifier field and wait for the process list to be updated, after that select the w3wp.exe (or the corresponding IIS process). 
    &lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/03/sharepointattachtoprocess.png"&gt;&lt;img title="SharePointAttachToProcess" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="426" alt="SharePointAttachToProcess" src="/UserFiles/Guardian/2009/03/sharepointattachtoprocess-thumb.png" width="604" border="0" /&gt;&lt;/a&gt;&amp;#160; &lt;br /&gt;(the image is took from an Italian version of Visual Studio) &lt;/li&gt;

  &lt;li&gt;If you have trouble here and the system ends up saying you do not have enough privileges to debug the application, you’ll have to turn off the UAC mechanism on your development SharePoint server (the option is in control panel, user accounts). You can also try to right click msvsmon.exe on the server and under the compatibility tab check ‘run this program as administrator’, but it didn’t worked for me and I had to disable UAC to allow the debugger to successfully connect to the remote process. &lt;/li&gt;

  &lt;li&gt;You can now set a breakpoint on the solution, and when you refresh the website on the server machine you will notice that the breakpoint will be hit: 
    &lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/03/sharepointbreakpointhit.png"&gt;&lt;img title="SharePointBreakpointHit" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="208" alt="SharePointBreakpointHit" src="/UserFiles/Guardian/2009/03/sharepointbreakpointhit-thumb.png" width="604" border="0" /&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point you are able to remotely debug a SharePoint solution. &lt;/p&gt;

&lt;p&gt;See you next time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:1c8c073f-724b-4afe-aaa4-6434b3f97eec" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/SharePoint" rel="tag"&gt;SharePoint&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Windows+SharePoint+Services" rel="tag"&gt;Windows SharePoint Services&lt;/a&gt;,&lt;a href="http://technorati.com/tags/WSS+3.0" rel="tag"&gt;WSS 3.0&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Remote+Debugging" rel="tag"&gt;Remote Debugging&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-setup"&gt;Windows SharePoint Services - first setup&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication"&gt;SharePoint Services - Setting up a Website with Forms Authentication&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/get-sharepoint-designer-2007-for-free"&gt;Get SharePoint Designer 2007 for Free&lt;/a&gt; (04/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vsewss-unable-start-debuggingthe-web-server-configured-correctly"&gt;VSeWSS: Unable to start debugging.The web server is not configured correctly&lt;/a&gt; (09/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart (Current User Filter and others)&lt;/a&gt; (09/11/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part"&gt;&lt;strong&gt;More related document (11)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part</guid><pubDate>Tue, 03 Mar 2009 20:14:00 GMT</pubDate><category>Remote debugging</category><category>Sharepoint</category><category>Windows sharepoint services</category><category>Wss 30</category><category>Wss 3.0</category></item><item><title>SharePoint Services - Setting up a Website with Forms Authentication</title><description>&lt;p&gt;The SharePoint environment is up and running, we can now create a Web Application and a site collection that will be our portal.&lt;/p&gt;  &lt;p&gt;The goal is obtain a Web Application with two ‘interfaces’ to the users: we want to expose an internal site to the intranet that will use standard NTLM authentication method and an internet site that will use Forms Authentication; both sites will expose the same contents.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Intranet site: &lt;a href="http://sharepointtest"&gt;http://sharepointtest&lt;/a&gt; - NTLM authentication &lt;/li&gt;    &lt;li&gt;Internet site: &lt;a href="http://www.sharepointtest.com"&gt;http://www.sharepointtest.com&lt;/a&gt; - Forms Authentication &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Let’s start creating the Intranet site.&lt;/p&gt;  &lt;p&gt;From the steps made before we should already have a new empty content database (SharePointTestContent) to be used by the web application; to create a web application log to the SharePoint Administration Console and look for ‘Application Management’ -&amp;gt; ‘Create or Extend Web Application’ -&amp;gt; ‘Create a new Web Application’.&lt;/p&gt;  &lt;p&gt;You have to fill-in a form that specifies were to place the application and which database to use as the backend storage; I’ll highlight only the critical sections:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/02/sharepointiiswebsite1.png"&gt;&lt;img title="SharePointIISWebsite" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="203" alt="SharePointIISWebsite" src="/UserFiles/Guardian/2009/02/sharepointiiswebsite-thumb1.png" width="604" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I set the port to 80 and the host header to sharepointtest, I recommend of thinking of ports and host headers to use in advance because, once set, it’s not so easy to change them (as we’ll see at the end of the column).&lt;/p&gt;  &lt;p&gt;Change the default path for the web application so it will be created in our new directory structure (in this way you have all your files in a single location and it will simplify the deployment on the production machine at a later stage).&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/02/sharepointapppool1.png"&gt;&lt;img title="SharePointAppPool" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="230" alt="SharePointAppPool" src="/UserFiles/Guardian/2009/02/sharepointapppool-thumb1.png" width="604" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Define an Application Pool and the account under which the site will run.&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/02/sharepointdatabase.png"&gt;&lt;img title="SharePointDatabase" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="137" alt="SharePointDatabase" src="/UserFiles/Guardian/2009/02/sharepointdatabase-thumb.png" width="604" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Specify the content database (created before); if you use Windows authentication make sure have given the right permission to the user defined in the application pool section so she can access the database (that is: give him ‘db_owner’ rights).&lt;/p&gt;  &lt;p&gt;We can now create a Site Collection inside the web application: from the administration console select ‘Application Management’ -&amp;gt; ‘Create site collection’; fill in the information required and select a template for the website (I chosen a blank site), wait for the environment to setup the site... et voila, your brand new website is up and running.&lt;/p&gt;  &lt;p&gt;We can now put some test content inside the website, for example create a document library and add some files in it).&lt;/p&gt;  &lt;p&gt;To create the Internet site we need to extend the web application from the default Zone to the Internet (or extranet) zone, for this purpose we ask SharePoint to create a new website that will be used to present the same content to our external users, after creating the site we change the authorization to Forms Authentication.&lt;/p&gt;  &lt;p&gt;To create the new website from the administration console use: ‘Application Management’ -&amp;gt; ‘Create or Extend Web Application’ -&amp;gt; ‘Extend an existing Web Application’&lt;/p&gt;  &lt;p&gt;In my test deployment I used with the following settings:&lt;/p&gt;  &lt;p&gt;port: 80    &lt;br /&gt;host header: www.sharepointtest.com     &lt;br /&gt;path C:\SharePoint\WebApps\www.sharepointtest.com80     &lt;br /&gt;zone: Internet&lt;/p&gt;  &lt;p&gt;before we can use the site we also have to modify the C:\Windows\System32\drivers\etc\hosts file and add the following entries:&lt;/p&gt;  &lt;p&gt;127.0.0.1&amp;#160;&amp;#160;&amp;#160; www.sharepointtest.com    &lt;br /&gt;::1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; www.sharepointtest.com&lt;/p&gt;  &lt;p&gt;so we can browse to the site using the address we specified in the host header section.&lt;/p&gt;  &lt;p&gt;After this step we end up having two distinct website: the first to be used in the intranet and the second to be used in an internet scenario. We go on configuring the second one to use Forms Authentication instead of the standard NTLM or Kerberos.&lt;/p&gt;  &lt;p&gt;For this purpose we follow the instruction presented here:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb975136.aspx" target="_blank"&gt;Forms Authentication in SharePoint Products and Technologies (Part 1): Introduction&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Following the instructions in the above article, we create a new database to hold our users (I named it SharePointUsers)&lt;/p&gt;  &lt;p&gt;The test utility they use to create users and roles (MembershipSeeder) is actually hardcoded to be used only with the default ‘aspnetdb’ database, I’ve added a modified version to this article that will allow you to chose also which database to use. You can however use the standard ASP.Net Configuration Application that is generated by Visual Studio when you create a an asp.net website (just create a new website and make the needed changes to the web.config file to enable forms authentication and to point it towards our SharePointUsers database).&lt;/p&gt;  &lt;p&gt;Once we completed all the steps we have our two website up and running:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/02/sharepointntlmlogin.png"&gt;&lt;img title="SharePointNTLMLogin" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="184" alt="SharePointNTLMLogin" src="/UserFiles/Guardian/2009/02/sharepointntlmlogin-thumb.png" width="264" border="0" /&gt;&lt;/a&gt; &lt;a href="/UserFiles/Guardian/2009/02/sharepointformsauthlogin.png"&gt;&lt;img title="SharePointFormsAuthLogin" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="184" alt="SharePointFormsAuthLogin" src="/UserFiles/Guardian/2009/02/sharepointformsauthlogin-thumb.png" width="340" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;While trying to setup these two sites I learned an important lesson: think carefully and try to plan in advance which ports and which host headers tag you are going to use; changing them is not so easy SharePoint do not offer a way to modify those values and altering them only in IIS (modifying the parameters of the websites) is not enough.&lt;/p&gt;  &lt;p&gt;A procedure to change those values is described here: &lt;a href="http://www.virtual-generations.com/2007/03/26/how-to-modify-ports-and-host-headers-on-sharepoint-2007/" target="_blank"&gt;How to: modify ports and host headers on SharePoint 2007&lt;/a&gt;     &lt;br /&gt;Essentially what you have to do is extend an existing web application to a new web application with the right parameters and then remove the original one.&lt;/p&gt;  &lt;p&gt;MembershipSeeder:&lt;/p&gt;  &lt;p&gt;   &lt;div class="wlWriterEditableSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:dafb70df-a99e-4d4d-ac97-8e844bca3f9c" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2009/02/membershipseedersource1.zip" target="_self"&gt;MembershipSeeder - Source.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt; &lt;/p&gt;  &lt;p&gt;The next step will be how to develop/deploy web parts and how to remotely debug them.&lt;/p&gt;  &lt;p&gt;To be continued…&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:1c82b691-7ca9-48d4-a8cd-3b8134517878" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Forms+Authentication" rel="tag"&gt;Forms Authentication&lt;/a&gt;,&lt;a href="http://technorati.com/tags/SharePoint" rel="tag"&gt;SharePoint&lt;/a&gt;,&lt;a href="http://technorati.com/tags/WSS+3.0" rel="tag"&gt;WSS 3.0&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part"&gt;Windows SharePoint Services - Developing and (Remotely) Debugging a Web Part&lt;/a&gt; (03/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-setup"&gt;Windows SharePoint Services - first setup&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart (Current User Filter and others)&lt;/a&gt; (09/11/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/get-sharepoint-designer-2007-for-free"&gt;Get SharePoint Designer 2007 for Free&lt;/a&gt; (04/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/sharepoint-services-setting-website-forms-authentication"&gt;&lt;strong&gt;More related document (3)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication</guid><pubDate>Fri, 27 Feb 2009 18:35:00 GMT</pubDate><category>Forms authentication</category><category>Sharepoint</category><category>Wss 30</category><category>Wss 3.0</category></item><item><title>Windows SharePoint Services - first setup</title><description>&lt;p&gt;I know that SharePoint 2007 and SharePoint Services 3.0 are out since some time... but I never had the occasion to work with them yet. However in a recent project I’m evaluating it can fit well some of the needs of the customer, so I need to play with it a bit and setup a machine for testing.&lt;/p&gt;  &lt;p&gt;My Italian user-group (DotNetMarche) organized a workshop on SharePoint and SharePoint Services some time ago, so I started checking again the slides and documentation the speakers proposed.&lt;/p&gt;  &lt;p&gt;The major problems I want to address are:&lt;/p&gt;  &lt;p&gt;1- how to setup a good development machine for WSS 3.0&lt;/p&gt;  &lt;p&gt;2- how to put remote debugging to work (it can be very useful if you can’t install Visual Studio on the development or testing machine)&lt;/p&gt;  &lt;p&gt;3- how to handle SharePoint security and how to integrate (if it’s possible) a series of site built upon WSS 3.0 with a preexisting ASP.NET web application providing Single Sign-on between the two.&lt;/p&gt;  &lt;p&gt;The first thing to do is gather some documentation, I’ve spent the last two days reading and watching tutorials; the idea is to gather as many infos as possible and try to solve the problems before they hit you, so here are some links:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://dotnetmarche.org/eventi/Default.aspx?IDevento=23" target="_blank"&gt;DotNetMarche - Microsoft SharePoint Workshop&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.sharepointforum.com/en-US/Wiki/Installation%20WSS%203.0.aspx" target="_blank"&gt;Installation WSS 3.0&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blogs.msdn.com/arpans/archive/2008/05/09/sharepoint-end-user-security.aspx" target="_blank"&gt;SharePoint End User Security&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.wictorwilen.se/Post/How-to-get-Remote-Debugging-work-properly.aspx" target="_blank"&gt;How to get Remote Debugging work properly&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I will put myself in the worst case in a windows network for a developer: the machines aren’t member of a Domain, no Active Directory, no administration policies; that means we have to create all the users we need locally on each machine and grant them the right permissions.&lt;/p&gt;  &lt;p&gt;I recommend reading carefully the ‘Installation WSS 3.0’ post on &lt;a href="http://www.sharepointforum.com"&gt;www.sharepointforum.com&lt;/a&gt; cause it will lead you step by step in what you have to do to successfully setup a machine with WSS 3.0.&lt;/p&gt;  &lt;p&gt;The fist steps before installing WSS 3.0 are to setup a Virtual Machine (use a physical machine) with Windows Server 2003 or 2008; make sure it’s configured as a web server (enable/install IIS and configure it) and finally install a SQL Server (even express is good, I recommend an Advanced Edition so you can take advantage of the full-text indexing capabilities too) and define a database on it to hold SharePoint data. &lt;/p&gt;  &lt;p&gt;It’s also recommended to create a Windows account that will be used by SharePoint to connect to the configuration database and one further account for each web application you are going to define (they will be used to specify under which user the application pool will run and will connect to the website specific database); if you don’t have a domain a local account will be good; the user must be granted with &lt;em&gt;sysadmin&lt;/em&gt; and &lt;em&gt;db_owner&lt;/em&gt; rights in SQL Server in order to be correctly used by SharePoint.&lt;/p&gt;  &lt;p&gt;If you want to avoid having all your SharePoint files and applications spread around various directory in your system, I suggest to create a SharePoint folder with this structure and use it as your main SharePoint repository for applications and databases:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2009/02/sharepointfoldersstructure.png"&gt;&lt;img title="SharePointFoldersStructure" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="82" alt="SharePointFoldersStructure" src="/UserFiles/Guardian/2009/02/sharepointfoldersstructure-thumb.png" width="160" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;If you use that directory structure you will have to create the databases in advance (to avoid them being placed in the default SQL server data directory), if you do so remember to use ‘Latin1_General_CI_AS_WS_KS’ as your collation rule; plus you have to grant to the Windows Accounts that SharePoint uses db_owner rights to each database.&lt;/p&gt;  &lt;p&gt;So I started by creating 2 user accounts like the ones suggested in the installation guide:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;SharePointDB - used to access the main configuration database. &lt;/li&gt;    &lt;li&gt;SharePointAppPool - will be used by the WebApplication application pool and to connect to the website specific content database. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Then I manually created 2 empty database inside X:/SharePoint/Database: the first named ‘SharePoint’ that will be used to hold the general administrative settings, and another one named ‘SharePointTestContent’ that will be used later by the test WebApplication created inside the SharePoint environment. &lt;/p&gt;  &lt;p&gt;From SQL Management Studio set the right permissions for the users: SharePointDB should have the role of ‘sysadmin’ and ‘db_owner’ right for ‘SharePoint’ database, SharePointAppPool must have ‘db_owner’ right over ‘SharePointTestContent’ database.&lt;/p&gt;  &lt;p&gt;We are now ready to perform the WSS 3.0 installation.&lt;/p&gt;  &lt;p&gt;Since I’ve done all the preliminary steps by myself, for this test I’m not performing a Basic or Stand Alone installation, I’ll rather try to setup a ‘Farm’ with WSS 3.0; so when I’m asked to choose which installation type to perform I will go for ‘Advanced’ and then ‘Web Front End’; it’s now just a matter to follow the wizard steps and when you are asked to specify which database to use just use the one you have previously prepared.&lt;/p&gt;  &lt;p&gt;When the installation process finishes you’ll be able to see the SharePoint Central Administration console.&lt;/p&gt;  &lt;p&gt;To be Continued...&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:0aab6779-c087-43a6-870f-98f1fc4ddde0" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/SharePoint" rel="tag"&gt;SharePoint&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Windows+SharePoint+Services" rel="tag"&gt;Windows SharePoint Services&lt;/a&gt;,&lt;a href="http://technorati.com/tags/WSS+3.0" rel="tag"&gt;WSS 3.0&lt;/a&gt;,&lt;a href="http://technorati.com/tags/installation" rel="tag"&gt;installation&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/windows-sharepoint-services-developing-and-remotely-debugging-a-web-part"&gt;Windows SharePoint Services - Developing and (Remotely) Debugging a Web Part&lt;/a&gt; (03/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication"&gt;SharePoint Services - Setting up a Website with Forms Authentication&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-migrate-a-windows-xp-installation-from-an-ide-to-a-sata-hard-drive"&gt;How to migrate a Windows XP installation from an IDE to a SATA hard drive&lt;/a&gt; (11/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/get-sharepoint-designer-2007-for-free"&gt;Get SharePoint Designer 2007 for Free&lt;/a&gt; (04/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wsssharepoint-adding-filtering-capabilities-customlistviewwebpart-current-user-filter"&gt;WSS / SharePoint: adding filtering capabilities to the CustomListViewWebPart (Current User Filter and others)&lt;/a&gt; (09/11/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/windows-sharepoint-services-setup"&gt;&lt;strong&gt;More related document (11)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/windows-sharepoint-services-setup</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/windows-sharepoint-services-setup#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/windows-sharepoint-services-setup</guid><pubDate>Tue, 24 Feb 2009 22:06:00 GMT</pubDate><category>Installation</category><category>Sharepoint</category><category>Windows sharepoint services</category><category>Wss 30</category><category>Wss 3.0</category></item><item><title>New Revenant (World or Warcraft Sunstrider Alliance Raiding Guild) website online</title><description>&lt;p&gt;I’ve spent the weekend playing with MySql and Php-Fusion to setup our World of Warcraft Guild website.&lt;/p&gt;  &lt;p&gt;I have to admit that using and customizing Php-Fusion was quite easy considering that I knew nothing about php before trying this experiment.&lt;/p&gt;  &lt;p&gt;Anyway I believe the result is quite good for a 3 days of work done in the spare time.&lt;/p&gt;  &lt;p&gt;If you are curious or if you simply are a World of Warcraft player, go check Revenant’s Website at:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.wowrevenant.com" target="_blank"&gt;Revenant Guild Website&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;and if you play on Sunstrider (EU realm) consider making an application to our Raiding Guild, you’ll find a friendly and relaxed environment with great guys with whom spare some fun.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:0173825b-3aab-4d01-9f36-52167b30d173" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/World+of+Warcraft" rel="tag"&gt;World of Warcraft&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Raiding+Guild" rel="tag"&gt;Raiding Guild&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Revenant" rel="tag"&gt;Revenant&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Sunstrider" rel="tag"&gt;Sunstrider&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/structura-alpha-version-silverlightwpf-line-business-application-framework"&gt;Structura (Alpha version) a Silverlight/WPF Line of Business Application Framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/revenant-world-warcraft-sunstrider-alliance-raiding-guild-website-online"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/revenant-world-warcraft-sunstrider-alliance-raiding-guild-website-online</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/revenant-world-warcraft-sunstrider-alliance-raiding-guild-website-online#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/revenant-world-warcraft-sunstrider-alliance-raiding-guild-website-online</guid><pubDate>Wed, 11 Feb 2009 23:11:00 GMT</pubDate><category>World of warcraft</category><category>Raiding guild</category><category>Revenant</category><category>Sunstrider</category></item><item><title>How to use the Class Diagram designer in a Silverlight Project</title><description>If you are looking for the class designer when working with a Silverlight project you will notice that apparently you cannot use it, doing right click on the project and selecting ‘add new item’ bring you the following dialog box:

&lt;a href="/UserFiles/Guardian/2009/02/addnewitem.png"&gt;&lt;img style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="AddNewItem" src="/UserFiles/Guardian/2009/02/addnewitem-thumb.png" border="0" alt="AddNewItem" width="489" height="248" /&gt;&lt;/a&gt;

As you can see there’s no Class Diagram option.&lt;br /&gt;&lt;br /&gt;The good news is that you can use the designer anyway, you just to do the work of creating the item by hand, following this procedure:
&lt;ol&gt;
	&lt;li&gt;add a new text file (like ClassDiagram.txt).&lt;/li&gt;
	&lt;li&gt;rename it with ‘.cd’ extension (ClassDiagram.cd)&lt;/li&gt;
	&lt;li&gt;right click on it and select ‘open with...’ and then ‘notepad’&lt;/li&gt;
	&lt;li&gt;copy and paste the following xml snippet
&lt;div class="csharpcode-wrapper"&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="html"&gt;xml&lt;/span&gt; &lt;span class="attr"&gt;version&lt;/span&gt;&lt;span class="kwrd"&gt;="1.0"&lt;/span&gt; &lt;span class="attr"&gt;encoding&lt;/span&gt;&lt;span class="kwrd"&gt;="utf-8"&lt;/span&gt;?&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ClassDiagram&lt;/span&gt; &lt;span class="attr"&gt;MajorVersion&lt;/span&gt;&lt;span class="kwrd"&gt;="1"&lt;/span&gt; &lt;span class="attr"&gt;MinorVersion&lt;/span&gt;&lt;span class="kwrd"&gt;="1"&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Font&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;="Segoe UI"&lt;/span&gt; &lt;span class="attr"&gt;Size&lt;/span&gt;&lt;span class="kwrd"&gt;="9"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alteven"&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ClassDiagram&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Save the document and reopen it double clicking on the item.&lt;/li&gt;
&lt;/ol&gt;
Now you have your class designer working in a Silverlight Project.&lt;br /&gt;&lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/02/classdesignersilverlight.png"&gt;&lt;img style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="ClassDesignerSilverlight" src="/UserFiles/Guardian/2009/02/classdesignersilverlight-thumb.png" border="0" alt="ClassDesignerSilverlight" width="682" height="165" /&gt;&lt;/a&gt;

Note: you can always define a template to do the dirty work for you.
&lt;div id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:b5904bfc-6bcd-492d-a8e7-c841809074ae" class="wlWriterEditableSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a rel="tag" href="http://technorati.com/tags/Visual+Studio"&gt;Visual Studio&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/Silverlight"&gt;Silverlight&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/Class+Designer"&gt;Class Designer&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/class-diagram-designer-silverlight-project"&gt;&lt;strong&gt;More related document (55)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/class-diagram-designer-silverlight-project</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/class-diagram-designer-silverlight-project#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/class-diagram-designer-silverlight-project</guid><pubDate>Thu, 05 Feb 2009 01:41:00 GMT</pubDate><category>Class diagram</category><category>Silverlight</category><category>Visual studio</category><category>Class designer</category></item><item><title>Install SQL Server (Express) with your Application</title><description>During the last days I had to put my hands on an hold project written for .NET Framework 1.1 and convert his database from Access to SQL Express 2005, the conversion was quite easy but then the deployment phase stepped in.&lt;br /&gt;&lt;br /&gt;We had the requirement of allowing the deployment of the database engine along with the application (ClickOnce is not an option in VS.2003 :D), the Setup project that comes along with VS 2003 rely on merge modules to install external components, but unfortunately no merge module exists for SQL Express (they have been deprecated). So I started looking around for a solution and I came to this msdn article: &lt;a href="http://msdn.microsoft.com/en-us/library/bb264562.aspx" target="_blank"&gt;Embedding SQL Server Express into Custom Applications&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Basically they suggest to write down a wrapper around the installation of the two components (SQL Express and the application) and launch the SQL installer in unattended mode with a shell command like: “start /wait setup.exe /qb /settings c:\template.ini” in which the configuration settings are passed in using the template.ini file or passing all the configuration parameters as command line arguments.&lt;br /&gt;&lt;br /&gt;So I took out the code they present in the article, corrected a few minor problems and created a basic installation wrapper that offer the option to select if install the SQL Engine (along with the database files or with a series of scripts to create the databases...this implementation is left to you in this sample project), one or more MSI packages that install the real application software or both.&lt;br /&gt;&lt;br /&gt;The wizard is graphically ugly to see (some screens follows) and you need to customize it to fir your company installation templates styles; the code behind surely need some refactoring but it actually works.&lt;br /&gt;&lt;br /&gt;&lt;a href="/UserFiles/Guardian/2009/01/installerbootstrap1.png"&gt;&lt;img style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="InstallerBootStrap1" src="/UserFiles/Guardian/2009/01/installerbootstrap1-thumb.png" border="0" alt="InstallerBootStrap1" width="252" height="194" /&gt;&lt;/a&gt; &lt;a href="/UserFiles/Guardian/2009/01/installerbootstrap2.png"&gt;&lt;img style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="InstallerBootStrap2" src="/UserFiles/Guardian/2009/01/installerbootstrap2-thumb.png" border="0" alt="InstallerBootStrap2" width="248" height="190" /&gt;&lt;/a&gt;

&lt;a href="/UserFiles/Guardian/2009/01/installerbootstrap3.png"&gt;&lt;img style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="InstallerBootStrap3" src="/UserFiles/Guardian/2009/01/installerbootstrap3-thumb.png" border="0" alt="InstallerBootStrap3" width="252" height="194" /&gt;&lt;/a&gt; &lt;a href="/UserFiles/Guardian/2009/01/installerbootstrap4.png"&gt;&lt;img style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="InstallerBootStrap4" src="/UserFiles/Guardian/2009/01/installerbootstrap4-thumb.png" border="0" alt="InstallerBootStrap4" width="248" height="190" /&gt;&lt;/a&gt;

To be used the Installation Bootstrap requires that the SQLEXPR.EXE and the application MSI files are placed in the same directory of the bootstrap itself.&lt;br /&gt;&lt;br /&gt;Converting this project to be used with VS 2005/2008 and the new .NET Framework is really easy.&lt;br /&gt;&lt;br /&gt;Sample project:
&lt;div id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:3fb062fb-6320-4131-9d11-725e3bc0dd7d" class="wlWriterEditableSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;
&lt;div&gt;&lt;a href="/UserFiles/Guardian/2009/01/sidinstallerbootstrap.zip" target="_self"&gt;SID.Installer.BootStrap.zip&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="wlWriterEditableSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;/div&gt;
&lt;div class="wlWriterEditableSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a rel="tag" href="http://technorati.com/tags/SQL+Server+Express"&gt;SQL Server Express&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/Installation"&gt;Installation&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/Embedding"&gt;Embedding&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sql-server-scramble-mask-database-production-data"&gt;Sql Server - Scramble / Mask database production data&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-envers-customize-revision-entity"&gt;NHibernate.Envers - Customize the Revision Entity&lt;/a&gt; (08/05/2011)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010"&gt;How to update your TFS Workspace after CodePlex upgrade to TFS2010&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-prepare_sql-considerations-mapping-long-string-fields"&gt;NHibernate - prepare_sql and some considerations on mapping very long string fields&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator"&gt;Silverlight / WCF: fixing the Custom WCF Proxy Generator&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/install-sql-server-express-with-your-application"&gt;&lt;strong&gt;More related document (6)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/install-sql-server-express-with-your-application</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/install-sql-server-express-with-your-application#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/install-sql-server-express-with-your-application</guid><pubDate>Thu, 29 Jan 2009 20:32:00 GMT</pubDate><category>Custom setup</category><category>Embedding</category><category>Installation</category><category>Sql server express</category></item><item><title>Visual Studio Equalizer - Blinking Caption</title><description>&lt;p&gt;When I work on repetitive or very simple tasks I’m used to listen to some heavy metal music and some to some internet radios (by the way ‘Epic Rock Radio’ really rocks).&lt;/p&gt;  &lt;p&gt;I just ended my work and was about to close Visual Studio 2008, the radio was still playing in the background and...Visual Studio refused to close...plus I noted a very strange thing: is the Minimize Button blinking following the rhythm of the music !?!?!?!?&lt;/p&gt;  &lt;p&gt;I couldn’t believe it and I had to take some videos, the quality isn’t the best cause I took them with the first thing it came into my hands (a small photo camera); but it was a so curious thing that I had to report it here!&lt;/p&gt;  &lt;p&gt;here are the videos:&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:86a01522-9c3d-4fd5-85c7-03bd3abe2a29" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt; &lt;a href="/UserFiles/Guardian/2009/01/blinking1.mpg" target="_blank"&gt;Blinking1&lt;/a&gt;&lt;br /&gt; &lt;a href="/UserFiles/Guardian/2009/01/blinking2.mpg" target="_blank"&gt;Blinking2&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://www.primordialcode.com/blog/post/visual-studio-equalizer-blinking</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/visual-studio-equalizer-blinking#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/visual-studio-equalizer-blinking</guid><pubDate>Tue, 13 Jan 2009 23:40:00 GMT</pubDate></item><item><title>Silverlight Datagrid Updated</title><description>&lt;p&gt;In December Microsoft released an updater version of the Datagrid for Silverlight, look at this post for the download link and the installation instructions: &lt;a title="http://silverlight.net/forums/t/59990.aspx" href="http://silverlight.net/forums/t/59990.aspx"&gt;http://silverlight.net/forums/t/59990.aspx&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;I highly suggest to download and install this version cause it fixes some very annoying bugs that forced us to use nasty workarounds.&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:107ae0cc-31da-40d6-8c06-e13eacf702db" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Datagrid" rel="tag"&gt;Datagrid&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control"&gt;Silverlight: a generic Pagination Control&lt;/a&gt; (09/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-available"&gt;Silverlight 2 RC0 Available&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-datagrid-updated"&gt;&lt;strong&gt;More related document (41)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-datagrid-updated</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-datagrid-updated#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-datagrid-updated</guid><pubDate>Mon, 12 Jan 2009 20:04:00 GMT</pubDate><category>Silverlight</category><category>Datagrid</category></item><item><title>Resharper and the OutOfMemoryException problem</title><description>&lt;p&gt;After having tried (and still using CodeRush Xpress), it’s now time for me to give an eye at Resharper too.&lt;/p&gt;  &lt;p&gt;To be honest I really like some of its capabilities, but I’m used to get a lot of OutOfMemoryException from it which have a very bad impact on the usability of the product: it tends to hang up the whole Visual Studio environment; so you have to kill the whole environment and load again a fresh copy in memory (which takes time with very large solutions).&lt;/p&gt;  &lt;p&gt;A fix to this problem is to use a wrapper/bootstrapper provided by Jetbrains (&lt;a href="http://www.jetbrains.net/confluence/display/ReSharper/OutOfMemoryException+Fix" target="_blank"&gt;http://www.jetbrains.net/confluence/display/ReSharper/OutOfMemoryException+Fix&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;Using this small bootstrapper Visual Studio seems to be more stable and reactive when Resharper is enabled.&lt;/p&gt;  &lt;p&gt;   &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:45ce4ca1-b04c-41f0-b267-d72521855054" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Resharper" rel="tag"&gt;Resharper&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Visual+Studio" rel="tag"&gt;Visual Studio&lt;/a&gt;,&lt;a href="http://technorati.com/tags/OutOfMemoryException" rel="tag"&gt;OutOfMemoryException&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-45-beta-give"&gt;Resharper 4.5 beta - give it a try!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/resharper-outofmemoryexception-problem"&gt;&lt;strong&gt;More related document (10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem</guid><pubDate>Tue, 23 Dec 2008 21:57:00 GMT</pubDate><category>Resharper</category><category>Visual studio</category><category>Outofmemoryexception</category></item><item><title>Structura (Alpha version) a Silverlight/WPF Line of Business Application Framework</title><description>Here’s the first deploy of Structura, this project is related to our User Group DotNetMarche and will be part of a set of application frameworks and open source solutions we develop as community projects. Structura will be in our mind an application framework for building modular and pluggable line of business application in both Silverlight and WPF.&lt;br /&gt;&lt;br /&gt;It will also contain a series of guidelines that will help structuring the project in a way that the portability between Silverlight and WPF will be maximized, reducing the amount of code you have to ‘rewrite’ hopefully only to the Xaml that describes the user interface.&lt;br /&gt;&lt;br /&gt;The framework will make heavy use of patterns like MVP and MVVM for building the user interfaces, with a set of helper classes to structure the model, the views and the controllers. The model base class can be used also for your business entities and DTOs, cause it already implement all the interfaces to be effective when in binding with controls (using the dispatcher object all the PropertyChanged events will be called on the UI thread, so you don’t have to worry for access violations exceptions).&lt;br /&gt;&lt;br /&gt;The modularity and pluggability is implemented using IoC containers (shielded behind an interface, so they can be changed), actually we use &lt;em&gt;Unity&lt;/em&gt; for Silverlight and &lt;em&gt;Castle Windsor&lt;/em&gt; for WPF. If you want you can write a custom bootstrap for the application that is able to register the types in the IoC containers using their native syntax, or you can follow my approach and use a custom syntax and programmatically register the types (this obviously set some limits in the features of the IoC containers you can use...but remember we aim for portability so keeping things simple is not an error).&lt;br /&gt;&lt;br /&gt;All the Data Access logic is hidden behind WCF web services (you have to follow this way, cause Silverlight can’t realize a direct connection to a database or to any sort of data source). The DAL classes are implemented using NHibernate as ORM tool and follows a simple repository pattern. This is actually the ‘weakest ring of the chain’ for this sample cause I used a very basic implementation that we are already changing and improving in our other Open Source projects. You can use the ‘DataAccessLayer.UnitTest’ to generate the database used by the sample application, just change the connection string on the ‘DataService’ and ‘TestApp.DataAccessLayer.UnitTest’ projects, execute the first test and you are ready to go.&lt;br /&gt;&lt;br /&gt;The framework also contains a series of utilities and controls specifically developed for Silverlight (like a Window emulator a Menu control, a file uploading feature, etc...).&lt;br /&gt;&lt;br /&gt;The Test Application implemented is the very basis of an invoice system (it consists of 3 test modules, to show you the use of IoC as a plug-in engine, and 4 forms for inserting and managing clients and invoices). The project have a double user interface: Silverlight (TestApp.Silverlight.AppManagerWeb) and WPF (TestApp.AppManager).&lt;br /&gt;&lt;br /&gt;&lt;a href="/UserFiles/Guardian/2008/12/invoicemanagersl.png"&gt;&lt;img style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" title="InvoiceManagerSL" src="/UserFiles/Guardian/2008/12/invoicemanagersl-thumb.png" border="0" alt="InvoiceManagerSL" width="352" height="234" /&gt;&lt;/a&gt; &lt;a href="/UserFiles/Guardian/2008/12/invoicemanagerwpf.png"&gt;&lt;img style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" title="InvoiceManagerWPF" src="/UserFiles/Guardian/2008/12/invoicemanagerwpf-thumb.png" border="0" alt="InvoiceManagerWPF" width="305" height="234" /&gt;&lt;/a&gt;

You do not need to use IIS to run this sample cause it works nicely using Cassini.&lt;br /&gt;&lt;br /&gt;Attached to this article you’ll find the slides I made to present the project (and how it was planned from scratch) and an archive containing the solution (its weight should be around 5mb).&lt;br /&gt;&lt;br /&gt;Attachments:
&lt;div id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:2a5a6d26-becb-4dbd-98d9-839dc7d6ea25" class="wlWriterEditableSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;
&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/12/structurasilverlightlobpptx.zip" target="_self"&gt;StructuraSilverlightLOBpptx.zip&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:d2d4d0f7-d98b-481f-9ade-7cd70b3003d8" class="wlWriterEditableSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;
&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/12/structura-alpha1.zip" target="_self"&gt;Structura_Alpha1.zip&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
This project will also appear in our community website: &lt;a href="http://www.dotnetmarche.org"&gt;www.dotnetmarche.org&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;By the way, excuse the very bad English I can use in the code comments (some of them may also be in Italian too :D), they will be fixed as the project go on. See you next time.
&lt;div id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:d0b94529-4f84-4eb6-b774-a99d98327b63" class="wlWriterEditableSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a rel="tag" href="http://technorati.com/tags/Silverlight"&gt;Silverlight&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/WPF"&gt;WPF&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/Line+of+Business"&gt;Line of Business&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/IoC"&gt;IoC&lt;/a&gt;,&lt;a rel="tag" href="http://technorati.com/tags/framework"&gt;framework&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans"&gt;Silverlight, Pluggable Architectures, Composite Applications and future plans…&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1"&gt;Silverlight, M-V-VM ... and IoC - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3"&gt;Silverlight, M-V-VM ... and IoC - part 3&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container"&gt;Silverlight Navigation Framework: resolve the pages using an IoC container&lt;/a&gt; (04/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/structura-alpha-version-silverlightwpf-line-business-application-framework"&gt;&lt;strong&gt;More related document (54)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/structura-alpha-version-silverlightwpf-line-business-application-framework</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/structura-alpha-version-silverlightwpf-line-business-application-framework#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/structura-alpha-version-silverlightwpf-line-business-application-framework</guid><pubDate>Tue, 16 Dec 2008 19:28:00 GMT</pubDate><category>Application framework</category><category>Business application</category><category>Ioc</category><category>Open source solutions</category><category>Silverlight</category><category>Wpf</category><category>Line of business</category><category>Framework</category></item><item><title>Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’</title><description>&lt;p&gt;Yesterday DotNetMarche presented our last workshop for this year. We talked about how write a pluggable and modular architecture that can be a starting point for building Line of Business Application in Silverlight and WPF.&lt;/p&gt;  &lt;p&gt;I introduced the framework I’m currently working on (named ‘Structura’) which uses a series of custom controls to simulate a desktop environment in Silverlight (Dropdown menus and Windows) and that relies on IoC systems (unity, autofac, castle windsor, etc...) to implement a pluggable architecture in both Silverlight and WPF.&lt;/p&gt;  &lt;p&gt;The framework also have some facility and helper classes that can be used to implement an MVP/MVVM patter for building the user interfaces, so we can maximize the code reuse when ‘converting’ the application from Silverlight to WPF (you just have to modify the View of each form).&lt;/p&gt;  &lt;p&gt;I hope that those who attended enjoyed the workshop and that some interesting discussions may arise.&lt;/p&gt;  &lt;p&gt;Structura will go Open Source soon, and I will publish all the source code in this blog and in our community website (&lt;a href="http://www.dotnetmarche.org"&gt;www.dotnetmarche.org&lt;/a&gt;) soon, just let me fix a couple of things.&lt;/p&gt;  &lt;p&gt;In the meanwhile, lets look at some of pictures of the event :D&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/12/meinaction.jpg"&gt;&lt;img title="meinaction" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="242" alt="meinaction" src="/UserFiles/Guardian/2008/12/meinaction-thumb.jpg" width="318" border="0" /&gt;&lt;/a&gt;&amp;#160; &lt;a href="/UserFiles/Guardian/2008/12/theaudience.jpg"&gt;&lt;img title="theaudience" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="242" alt="theaudience" src="/UserFiles/Guardian/2008/12/theaudience-thumb.jpg" width="320" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/12/bringsomemore.jpg"&gt;&lt;img title="bringsomemore" style="border-top-width: 0px; display: block; border-left-width: 0px; float: none; border-bottom-width: 0px; margin-left: auto; margin-right: auto; border-right-width: 0px" height="242" alt="bringsomemore" src="/UserFiles/Guardian/2008/12/bringsomemore-thumb.jpg" width="320" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:912c4a82-545a-48a6-abb3-fb22c189066c" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/DotNetMarche" rel="tag"&gt;DotNetMarche&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Workshop" rel="tag"&gt;Workshop&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/ready-upcoming-dotnetmarche-workshop-july-16"&gt;Are you ready for the upcoming DotNetMarche workshop on July 16 ?&lt;/a&gt; (07/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/tomorrows-dotnetmarche-workshop-live-streaming"&gt;Tomorrow’s DotNetMarche Workshop Live Streaming&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/workshop-silverlight-action-starting-point-line-business-applications"&gt;&lt;strong&gt;More related document (49)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications</guid><pubDate>Sat, 13 Dec 2008 19:41:00 GMT</pubDate><category>Silverlight</category><category>Dotnetmarche</category><category>Workshop</category></item><item><title>Serialization Exception: PropertyChangedEventManager is not serializable</title><description>&lt;p&gt;Actually I’m working on a multi-target framework for Silverlight and WPF and I have developed a base to be used by any entity and DTO class that can also be sent back and forth through WCF or WebServices; a deriver class supports a generic clone method (see &lt;a href="http://www.primordialcode.com/index.php/2008/10/18/deep-clone-business-object-quick-dirty/" target="_blank"&gt;deep clone of a business object: the quick and dirty way&lt;/a&gt;). &lt;/p&gt;  &lt;p&gt;This class has en event method to handle PropertyChanged events (useful for binding scenarios):&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;which internally the compiler expands in something like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; PropertyChangedEventHandler _PropertyChanged;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;    add { _PropertyChanged += &lt;span class="kwrd"&gt;value&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;    remove { _PropertyChanged -= &lt;span class="kwrd"&gt;value&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Now suppose the object to participate in a binding with some control, and suppose you want to get this object and use its generic DeepClone&amp;lt;T&amp;gt;() function to get a copy of the object to be passed to another stage of processing, &lt;/p&gt;

&lt;p&gt;If you are in a Silverlight environment everything works, cause the DataContractSerializer isn’t able to serialize and de-serialize private members of a class.&lt;/p&gt;

&lt;p&gt;If you are in a standard WPF application you will get the following exception:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SerializationException: Il tipo 'System.ComponentModel.PropertyChangedEventManager' nell'assembly 'WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' non è contrassegnato come serializzabile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The message is in Italian, but it’s however pretty clear: we have a serialization exception cause the type System.ComponentModel.PropertyChangedEventManager is marked as non serializable. This happens because the BinaryFormatter also tries to serialize any private member of the class, and when the object is in a binding the PropertyChanged has references to the functions of the PropertyChangedEventManager that gets wired by the framework itself, using the debugger we can see it easily:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/12/propertychangedeventmanager.png"&gt;&lt;img title="PropertyChangedEventManager" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="162" alt="PropertyChangedEventManager" src="/UserFiles/Guardian/2008/12/propertychangedeventmanager-thumb.png" width="673" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The solution is simple: we have to tell the serializer that it has to skip this field in the serialization stage; you can do that by marking the event with the NonSerialized() attribute:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [field: NonSerialized]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;       &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; ... or ...&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt; [NonSerialized]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; PropertyChangedEventHandler _PropertyChanged;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;virtual&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;     add { _PropertyChanged += &lt;span class="kwrd"&gt;value&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     remove { _PropertyChanged -= &lt;span class="kwrd"&gt;value&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As last note... Silverlight doesn’t support Serializable and NonSerialized attributes so you have to ‘mock’ them up with empty custom classes that are compiled only in the Silverlight versions of the assemblies...so beware of the references...if the WPF application will get a reference to these assemblies (for any reason), the NonSerialized attribute will be empty and it will not work like the framework itself expects...so it will end up trying to serialize the private fields again and you’ll get the exception anyway.&lt;/p&gt;

&lt;p&gt;Be very careful cause it happened to me and it took 1 hour of my time to figure it out :D.&lt;/p&gt;

&lt;p&gt;See you next time.&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:4dac5e2f-1a9e-4017-b9e5-fb435bb79e44" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Serialization+Exception" rel="tag"&gt;Serialization Exception&lt;/a&gt;,&lt;a href="http://technorati.com/tags/WPF" rel="tag"&gt;WPF&lt;/a&gt;,&lt;a href="http://technorati.com/tags/PropertyChangedEventManager" rel="tag"&gt;PropertyChangedEventManager&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-x-name-referenced-objects"&gt;WPF: x:Name Referenced Objects&lt;/a&gt; (06/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-sqlserver-persist-generic-serializable-object-xml-field"&gt;NHibernate/SqlServer: persist a generic ‘serializable’ object to an XML field&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/deep-clone-business-object-quick-dirty"&gt;Deep Clone of a business object: the quick and dirty way&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-silverlight-wp7-async-ctp"&gt;WPF, Silverlight, WP7 and the Async CTP&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/serialization-exception-propertychangedeventmanager-serializable"&gt;&lt;strong&gt;More related document (15)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/serialization-exception-propertychangedeventmanager-serializable</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/serialization-exception-propertychangedeventmanager-serializable#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/serialization-exception-propertychangedeventmanager-serializable</guid><pubDate>Thu, 04 Dec 2008 18:30:00 GMT</pubDate><category>Propertychangedeventmanager</category><category>Serializationexception</category><category>Wpf</category><category>Serialization exception</category></item><item><title>'Silverlight in Action' on December, Thursday 11</title><description>&lt;p&gt;I will be the main speaker at the next workshop organized by DotNetMarche (the .Net User-group I belongs to); the workshop is organized in collaboration with Microsoft and it is part of the official ‘Microsoft Days Community After Hours’ events.&lt;/p&gt;  &lt;p&gt;I will show the basis of how to build a multi-target (Silverlight+WPF) line of business application using a lot of different technologies (like ORMs, Inversion of Control systems, etc...) and patterns (Strategy, MVP, MVVM, etc...) and how to integrate them in a framework (which I call ‘Structura’) for building pluggable and modular applications.&lt;/p&gt;  &lt;p&gt;To be honest this is driving away all my spare time, so that’s the main reasons for the lack of updates of this month.&lt;/p&gt;  &lt;p&gt;However after the event I will publish all the material and related code samples.&lt;/p&gt;  &lt;p&gt;For more info or to sign up for the event please refer to our community website: &lt;a href="http://www.dotnetmarche.org" target="_blank"&gt;www.dotnetmarche.org&lt;/a&gt; or go directly to the &lt;a href="http://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032396621&amp;amp;Culture=it-IT" target="_blank"&gt;event registration page&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;See you there.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:3aab5115-13bc-4159-b725-9887803489da" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/WPF" rel="tag"&gt;WPF&lt;/a&gt;,&lt;a href="http://technorati.com/tags/DotNetMarche" rel="tag"&gt;DotNetMarche&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Workshop" rel="tag"&gt;Workshop&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-january-workshop-wpf-mvvm-ui"&gt;DotNetMarche January Workshop - WPF, MVVM, UI&lt;/a&gt; (01/12/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/ready-upcoming-dotnetmarche-workshop-july-16"&gt;Are you ready for the upcoming DotNetMarche workshop on July 16 ?&lt;/a&gt; (07/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-action-december-thursday-11"&gt;&lt;strong&gt;More related document (58)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11</guid><pubDate>Tue, 02 Dec 2008 00:23:00 GMT</pubDate><category>Dotnetmarche</category><category>Silverlight</category><category>Workshop</category><category>Wpf</category></item><item><title>Wrap IList&lt;T&gt; and use it for effective binding in Silverlight and WPF</title><description>&lt;p&gt;If you use some ORM tool like NHibernate and your business entities or DTOs have to support collections of other elements, you are forced to use the interface notation IList&amp;lt;T&amp;gt; or ICollection&amp;lt;T&amp;gt; to hold a reference to the real collection implementation (cause usually those ORM tools tend to inject their own implementation of the collection classes).&lt;/p&gt;  &lt;p&gt;Such collections aren’t very well suited to be used in a binding cause they usually doesn’t support any mechanism to inform the binding object that the collection has been changed or altered, so the change is not propagated to the user interface.&lt;/p&gt;  &lt;p&gt;You have two way to solve the problem:&lt;/p&gt;  &lt;p&gt;1- Convert the collection to a well known ObservableCollection&amp;lt;T&amp;gt;, but in this way you’ll loose the flexibility of having an ORM for your entity cause you’re modifying its normal way to handle object instances.&lt;/p&gt;  &lt;p&gt;2- Wrap the ‘ISomething&amp;lt;T&amp;gt;’ collection with another class that exposes all you need to be effective as a binding source for Silverlight or WPF.&lt;/p&gt;  &lt;p&gt;I prefer to follow the second approach, cause it eliminates a lot of conversions between objects and preserves objects integrity. Here is a simple implementation of a wrapping class for a generic IList&amp;lt;T&amp;gt; collection:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [Serializable]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; [CollectionDataContract]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; NotifyCollectionWrapper&amp;lt;T&amp;gt; : IList&amp;lt;T&amp;gt;, IList, INotifyCollectionChanged&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; NotifyCollectionWrapper()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; NotifyCollectionWrapper(IList&amp;lt;T&amp;gt; innerlist)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         Reset(innerlist);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; NotifyCollectionWrapper&amp;lt;T&amp;gt; Reset(IList&amp;lt;T&amp;gt; innerlist)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;         _InnerList = innerlist;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;this&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;     &lt;span class="kwrd"&gt;private&lt;/span&gt; IList&amp;lt;T&amp;gt; _InnerList;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; INotifyCollectionChanged Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;event&lt;/span&gt; System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;     &lt;span class="rem"&gt;/// Fires the &amp;lt;see cref=&amp;quot;CollectionChanged&amp;quot;/&amp;gt; event to indicate an item has been&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;     &lt;span class="rem"&gt;/// added to the end of the collection.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;Item added to the collection.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;     &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnItemAdded(T item)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  34:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:&lt;/span&gt;             &lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; NotifyCollectionChangedEventArgs(&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  36:&lt;/span&gt;                                                         NotifyCollectionChangedAction.Add, item, &lt;span class="kwrd"&gt;this&lt;/span&gt;.Count - 1));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  37:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  38:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  39:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  40:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  41:&lt;/span&gt;     &lt;span class="rem"&gt;/// Fires the &amp;lt;see cref=&amp;quot;CollectionChanged&amp;quot;/&amp;gt; event to indicate the collection&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  42:&lt;/span&gt;     &lt;span class="rem"&gt;/// has been reset.  This is used when the collection has been cleared or&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  43:&lt;/span&gt;     &lt;span class="rem"&gt;/// entirely replaced.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  44:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  45:&lt;/span&gt;     &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnCollectionReset()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  46:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  47:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  48:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  49:&lt;/span&gt;             &lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; NotifyCollectionChangedEventArgs(&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  50:&lt;/span&gt;                                                         NotifyCollectionChangedAction.Reset));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  51:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  52:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  53:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  54:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  55:&lt;/span&gt;     &lt;span class="rem"&gt;/// Fires the &amp;lt;see cref=&amp;quot;CollectionChanged&amp;quot;/&amp;gt; event to indicate an item has&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  56:&lt;/span&gt;     &lt;span class="rem"&gt;/// been inserted into the collection at the specified index.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  57:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  58:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;index&amp;quot;&amp;gt;Index the item has been inserted at.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  59:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;Item inserted into the collection.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  60:&lt;/span&gt;     &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnItemInserted(&lt;span class="kwrd"&gt;int&lt;/span&gt; index, T item)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  61:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  62:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  63:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  64:&lt;/span&gt;             &lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; NotifyCollectionChangedEventArgs(&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  65:&lt;/span&gt;                                                         NotifyCollectionChangedAction.Add, item, index));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  66:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  67:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  68:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  69:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  70:&lt;/span&gt;     &lt;span class="rem"&gt;/// Fires the &amp;lt;see cref=&amp;quot;CollectionChanged&amp;quot;/&amp;gt; event to indicate an item has&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  71:&lt;/span&gt;     &lt;span class="rem"&gt;/// been replaced into the collection at the specified index.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  72:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  73:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;index&amp;quot;&amp;gt;Index the item has been inserted at.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  74:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;Item inserted into the collection.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  75:&lt;/span&gt;     &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnItemReplaced(T newItem, T oldItem, &lt;span class="kwrd"&gt;int&lt;/span&gt; index)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  76:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  77:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  78:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  79:&lt;/span&gt;             &lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; NotifyCollectionChangedEventArgs(&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  80:&lt;/span&gt;                                                         NotifyCollectionChangedAction.Replace, newItem, oldItem, index));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  81:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  82:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  83:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  84:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  85:&lt;/span&gt;     &lt;span class="rem"&gt;/// Fires the &amp;lt;see cref=&amp;quot;CollectionChanged&amp;quot;/&amp;gt; event to indicate an item has&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  86:&lt;/span&gt;     &lt;span class="rem"&gt;/// been removed from the collection at the specified index.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  87:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  88:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;Item removed from the collection.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  89:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;param name=&amp;quot;index&amp;quot;&amp;gt;Index the item has been removed from.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  90:&lt;/span&gt;     &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnItemRemoved(T item, &lt;span class="kwrd"&gt;int&lt;/span&gt; index)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  91:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  92:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  93:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  94:&lt;/span&gt;             &lt;span class="kwrd"&gt;this&lt;/span&gt;.CollectionChanged(&lt;span class="kwrd"&gt;this&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; NotifyCollectionChangedEventArgs(&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  95:&lt;/span&gt;                                                         NotifyCollectionChangedAction.Remove, item, index));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  96:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  97:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  98:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  99:&lt;/span&gt;     &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 100:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 101:&lt;/span&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; IList&amp;lt;T&amp;gt; Members&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 102:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 103:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; IndexOf(T item)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 104:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 105:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.IndexOf(item);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 106:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 107:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 108:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Insert(&lt;span class="kwrd"&gt;int&lt;/span&gt; index, T item)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 109:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 110:&lt;/span&gt;         _InnerList.Insert(index, item);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 111:&lt;/span&gt;         OnItemInserted(index, item);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 112:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 113:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 114:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; T &lt;span class="kwrd"&gt;this&lt;/span&gt;[&lt;span class="kwrd"&gt;int&lt;/span&gt; index]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 115:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 116:&lt;/span&gt;         get&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 117:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 118:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList[index];&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 119:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 120:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 121:&lt;/span&gt;         set&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 122:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 123:&lt;/span&gt;             T old = _InnerList[index];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 124:&lt;/span&gt;             _InnerList[index] = &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 125:&lt;/span&gt;             OnItemReplaced(&lt;span class="kwrd"&gt;value&lt;/span&gt;, old, index);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 126:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 127:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 128:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 129:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; RemoveAt(&lt;span class="kwrd"&gt;int&lt;/span&gt; index)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 130:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 131:&lt;/span&gt;         T item = _InnerList[index];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 132:&lt;/span&gt;         _InnerList.RemoveAt(index);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 133:&lt;/span&gt;         OnItemRemoved(item, index);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 134:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 135:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 136:&lt;/span&gt;     &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 137:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 138:&lt;/span&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; ICollection&amp;lt;T&amp;gt; Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 139:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 140:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Add(T item)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 141:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 142:&lt;/span&gt;         _InnerList.Add(item);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 143:&lt;/span&gt;         OnItemAdded(item);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 144:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 145:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 146:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; Contains(T item)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 147:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 148:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.Contains(item);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 149:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 150:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 151:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CopyTo(T[] array, &lt;span class="kwrd"&gt;int&lt;/span&gt; arrayIndex)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 152:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 153:&lt;/span&gt;         _InnerList.CopyTo(array, arrayIndex);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 154:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 155:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 156:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; Remove(T item)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 157:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 158:&lt;/span&gt;         &lt;span class="kwrd"&gt;int&lt;/span&gt; index = _InnerList.IndexOf(item);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 159:&lt;/span&gt;         &lt;span class="kwrd"&gt;bool&lt;/span&gt; result = _InnerList.Remove(item);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 160:&lt;/span&gt;         OnItemRemoved(item, index);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 161:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; result;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 162:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 163:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 164:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Clear()&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 165:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 166:&lt;/span&gt;         _InnerList.Clear();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 167:&lt;/span&gt;         OnCollectionReset();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 168:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 169:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 170:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; Count&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 171:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 172:&lt;/span&gt;         get&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 173:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 174:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; (_InnerList != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 175:&lt;/span&gt;                 &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.Count;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 176:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; 0;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 177:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 178:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 179:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 180:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsReadOnly&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 181:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 182:&lt;/span&gt;         get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.IsReadOnly; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 183:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 184:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 185:&lt;/span&gt;     &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 186:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 187:&lt;/span&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; Members&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 188:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 189:&lt;/span&gt;     IEnumerator&amp;lt;T&amp;gt; IEnumerable&amp;lt;T&amp;gt;.GetEnumerator()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 190:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 191:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (_InnerList != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 192:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.GetEnumerator();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 193:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 194:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 195:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 196:&lt;/span&gt;     &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 197:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 198:&lt;/span&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; IEnumerable Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 199:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 200:&lt;/span&gt;     IEnumerator IEnumerable.GetEnumerator()&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 201:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 202:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; GetEnumerator();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 203:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 204:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 205:&lt;/span&gt;     &lt;span class="kwrd"&gt;protected&lt;/span&gt; IEnumerator GetEnumerator()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 206:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 207:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (_InnerList != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 208:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.GetEnumerator();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 209:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;null&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 210:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 211:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 212:&lt;/span&gt;     &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 213:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 214:&lt;/span&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; IList Members&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 215:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 216:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; Add(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 217:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 218:&lt;/span&gt;         _InnerList.Add((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 219:&lt;/span&gt;         OnItemAdded((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 220:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; -1;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 221:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 222:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 223:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; Contains(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 224:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 225:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.Contains((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 226:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 227:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 228:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;int&lt;/span&gt; IndexOf(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 229:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 230:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList.IndexOf((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 231:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 232:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 233:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Insert(&lt;span class="kwrd"&gt;int&lt;/span&gt; index, &lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 234:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 235:&lt;/span&gt;         _InnerList.Insert(index, (T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 236:&lt;/span&gt;         OnItemInserted(index, (T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 237:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 238:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 239:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsFixedSize&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 240:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 241:&lt;/span&gt;         get { &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 242:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 243:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 244:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Remove(&lt;span class="kwrd"&gt;object&lt;/span&gt; &lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 245:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 246:&lt;/span&gt;         &lt;span class="kwrd"&gt;int&lt;/span&gt; index = _InnerList.IndexOf((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 247:&lt;/span&gt;         &lt;span class="kwrd"&gt;bool&lt;/span&gt; result = _InnerList.Remove((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 248:&lt;/span&gt;         OnItemRemoved((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;, index);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 249:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 250:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 251:&lt;/span&gt;     &lt;span class="kwrd"&gt;object&lt;/span&gt; IList.&lt;span class="kwrd"&gt;this&lt;/span&gt;[&lt;span class="kwrd"&gt;int&lt;/span&gt; index]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 252:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 253:&lt;/span&gt;         get&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 254:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 255:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; _InnerList[index];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 256:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 257:&lt;/span&gt;         set&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 258:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 259:&lt;/span&gt;             T old = _InnerList[index];&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 260:&lt;/span&gt;             _InnerList[index] = (T)&lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 261:&lt;/span&gt;             OnItemReplaced((T)&lt;span class="kwrd"&gt;value&lt;/span&gt;, old, index);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 262:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 263:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 264:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 265:&lt;/span&gt;     &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 266:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 267:&lt;/span&gt;     &lt;span class="preproc"&gt;#region&lt;/span&gt; ICollection Members&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 268:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 269:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; CopyTo(Array array, &lt;span class="kwrd"&gt;int&lt;/span&gt; index)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 270:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 271:&lt;/span&gt;         &lt;span class="kwrd"&gt;throw&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; NotImplementedException();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 272:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 273:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 274:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsSynchronized&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 275:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 276:&lt;/span&gt;         get { &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 277:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 278:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 279:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt; SyncRoot&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 280:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 281:&lt;/span&gt;         get { &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;this&lt;/span&gt;; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 282:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 283:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt; 284:&lt;/span&gt;     &lt;span class="preproc"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt; 285:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can Wrap an IList&amp;lt;T&amp;gt; just creating a new instance of the collection and passing in the reference as a constructor parameter or you can use the Reset() method which will reinitialize the innerList variable to the new collection to be wrapped; in this way you can unleash the full power of binding to a collection that comes directly from an object loaded with an ORM.&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:c6eec956-252b-4d0b-ac00-1bf02f4b4339" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/IList" rel="tag"&gt;IList&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Collection" rel="tag"&gt;Collection&lt;/a&gt;,&lt;a href="http://technorati.com/tags/NHibernat" rel="tag"&gt;NHibernat&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Binding" rel="tag"&gt;Binding&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wpf-bind-explicit-interface-indexer-implementation"&gt;Silverlight / WPF: is it possible to bind to an explicit interface indexer implementation?&lt;/a&gt; (07/06/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed"&gt;WPF: force all the validation rules attached to an object to be executed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-action-december-thursday-11"&gt;'Silverlight in Action' on December, Thursday 11&lt;/a&gt; (12/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlightwpf-uielement-find-ancestor-type-procedurally"&gt;Silverlight/WPF UIElement: how to find and ancestor of type &lt;T&gt; procedurally&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/wrap-ilist-effective-binding-silverlight-wpf"&gt;&lt;strong&gt;More related document (76)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/wrap-ilist-effective-binding-silverlight-wpf</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/wrap-ilist-effective-binding-silverlight-wpf#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/wrap-ilist-effective-binding-silverlight-wpf</guid><pubDate>Mon, 24 Nov 2008 21:05:00 GMT</pubDate><category>Binding</category><category>Collections</category><category>Nhibernate</category><category>Silverlight</category><category>Wpf</category><category>Ilist</category><category>Collection</category><category>Nhibernat</category></item><item><title>CodeRush Xpress Tips</title><description>&lt;p&gt;If you use CodeRush Xpress with Windows Vista you may experience continuous crash of the environment.&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/11/visualstudiopropertycompatibility.jpg"&gt;&lt;img title="VisualStudioPropertyCompatibility" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; margin-left: 0px; margin-right: 0px; border-right-width: 0px" height="311" alt="VisualStudioPropertyCompatibility" src="/UserFiles/Guardian/2008/11/visualstudiopropertycompatibility-thumb.jpg" width="233" align="right" border="0" /&gt;&lt;/a&gt;To resolve this issue you can right click on the Visual Studio exe (or link in the startup menu) and go to the compatibility tab.&lt;/p&gt;  &lt;p&gt;Then put a check on ‘Disable visual theme’ and ‘Execute as administrator’...the translation may not be accurate cause my OS is in Italian (look at the picture below).&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/11/coderushxpressoptions.jpg"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/11/coderushxpressoptions.jpg"&gt;&lt;img title="CodeRushXpressOptions" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; margin-left: 0px; margin-right: 0px; border-right-width: 0px" height="181" alt="CodeRushXpressOptions" src="/UserFiles/Guardian/2008/11/coderushxpressoptions-thumb.jpg" width="248" align="right" border="0" /&gt;&lt;/a&gt;Plus CodeRush Xpress do not appear to have any menu attached to the normal menu bar of Visual Studio 2008. To open its control panel you can use the following key combination:&lt;/p&gt;  &lt;p&gt;ctrl+alt+shift+o&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:ae856a58-0376-480e-9611-207b8290cb47" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Visual+Studio" rel="tag"&gt;Visual Studio&lt;/a&gt;,&lt;a href="http://technorati.com/tags/CodeRush+Xpress" rel="tag"&gt;CodeRush Xpress&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Tips" rel="tag"&gt;Tips&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nunitit-visual-studio-addin-support-nunit-customizations"&gt;NUnitit: Visual Studio Addin to support NUnit and some customizations to it&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/resharper-outofmemoryexception-problem"&gt;Resharper and the OutOfMemoryException problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/spot-hidden-exceptions-intellitrace"&gt;Spot Hidden Exceptions using IntelliTrace&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/visual-studio-2010-designer-error-null-parameter-objecttype"&gt;Visual Studio 2010 designer error: Value cannot be null. Parameter name: objectType&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/vs2008-sp1-powercommands-toolbox-additemscrash"&gt;VS2008 SP1 + PowerCommands = Toolbox AddItems...Crash!&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/update-tfs-workspace-codeplex-upgrade-tfs2010"&gt;How to update your TFS Workspace after CodePlex upgrade to TFS2010&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/coderush-xpress-tips"&gt;&lt;strong&gt;More related document (8)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/coderush-xpress-tips</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/coderush-xpress-tips#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/coderush-xpress-tips</guid><pubDate>Fri, 14 Nov 2008 18:38:00 GMT</pubDate><category>Coderush</category><category>Visual studio</category><category>Xpress</category><category>Coderush xpress</category><category>Tips</category></item><item><title>Silverlight: simulate a ‘Windows’ desktop application - part 3 (Resizable Window)</title><description>&lt;p&gt;It’s time to write the last chapter of this series and take a look at how the resizing capability of the Window is implemented. Since the last time some new feature were added:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Code ported to Silverlight 2.0 RTW. &lt;/li&gt;    &lt;li&gt;Solution refactored, the control is now available as a standalone assembly. &lt;/li&gt;    &lt;li&gt;The template of the Window has been revised to correct some bugs. &lt;/li&gt;    &lt;li&gt;We can now resize from any side and corner of the window. &lt;/li&gt;    &lt;li&gt;We have support for automatic scrolling if we set the minimum size (MinWidth and MinHeight) of the framework element contained into the window control. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Here’s the actual result:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/11/simulatingwindows3.jpg"&gt;&lt;img title="SimulatingWindows3" style="border-top-width: 0px; display: block; border-left-width: 0px; float: none; border-bottom-width: 0px; margin-left: auto; margin-right: auto; border-right-width: 0px" height="277" alt="SimulatingWindows3" src="/UserFiles/Guardian/2008/11/simulatingwindows3-thumb.jpg" width="421" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Like in the previous article, in which we talked about dragging the window around, the basic idea is to subscribe to any mouse event raised by the control and to write then code there to handle the resizing. &lt;/p&gt;  &lt;p&gt;Resizing the window is a bit more complicated than dragging it around, so more code will be required.&lt;/p&gt;  &lt;p&gt;We start with a consideration: we want to keep our template very very simple so, to avoid having some ‘hidden’ framework elements that defines the hotspot zones that the user can use to resize the window, we just get the current mouse position and we do some computations to see if it’s near the borders or the corners of the window (hotspots); if this condition is satisfied we can identify which side or corner the user is going to resize.&lt;/p&gt;  &lt;p&gt;Then, when the user moves the mouse around, if we are in resizing mode, we compute the new window size and position and we update the dimensions of the external control and of the inner content presenter.&lt;/p&gt;  &lt;p&gt;Let’s start with the xaml style template (some code was stripped):&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt; &lt;span class="attr"&gt;TargetType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;windows:Window&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Template&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ControlTemplate&lt;/span&gt; &lt;span class="attr"&gt;TargetType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;windows:Window&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{TemplateBinding Width}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{TemplateBinding Height}&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;PART_Window&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;                     &lt;span class="rem"&gt;&amp;lt;!-- Outer shadow --&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;                     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Border&lt;/span&gt; &lt;span class="attr"&gt;CornerRadius&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;4,4,4,4&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Background&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;#22000000&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;-2,-2,-2,-2&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;                       ...&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;                             &lt;span class="rem"&gt;&amp;lt;!-- Content presenter for hosting the content --&amp;gt;&lt;/span&gt; &lt;span class="rem"&gt;&amp;lt;!-- HorizontalScrollBarVisibility=&amp;quot;Auto&amp;quot; VerticalScrollBarVisibility=&amp;quot;Auto&amp;quot; --&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;                             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ScrollViewer&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;PART_ScrollContent&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Grid&lt;/span&gt;.&lt;span class="attr"&gt;Row&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                                 &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ContentPresenter&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;PART_ContentPresenter&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;                             &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ScrollViewer&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                       ...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Border&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ControlTemplate&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Setter.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here we can see the main elements that are involved into the resizing thing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PART_Window: the Grid that defines the layout of the control. &lt;/li&gt;

  &lt;li&gt;PART_ScrollContent: a ScrollViewer used to enable the automatic support for scrolling the content if it’s wider than the current size of the window (this is disabled by default). &lt;/li&gt;

  &lt;li&gt;PART_ContentPresenter: the placeholder for the real window content. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To support resizing we need two properties and an enum:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="rem"&gt;/// defines where the user mouse is positioned inside the control&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;enum&lt;/span&gt; ResizeAnchor&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     None,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;     Left,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;     TopLeft,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;     Top,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;     TopRight,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;     Right,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     BottomRight,&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;     Bottom,&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;     BottomLeft&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt; &lt;span class="rem"&gt;/// enable/disable support for resize this window&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; ResizeEnabled { get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _ResizeEnabled; } set { _ResizeEnabled = &lt;span class="kwrd"&gt;value&lt;/span&gt;; } }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; _ResizeEnabled = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt; &lt;span class="rem"&gt;/// returns true if the window can be resized&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt; &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; CanResize&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;     get { &lt;span class="kwrd"&gt;return&lt;/span&gt; ((ResizeEnabled) &amp;amp;&amp;amp; (resizeAnchor != ResizeAnchor.None)); }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then some code inside the mouse events:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MouseLeftButtonDown&lt;/strong&gt;&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; window_MouseLeftButtonDown(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, MouseButtonEventArgs e)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; (CanResize)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         &lt;span class="rem"&gt;// Capture the mouse&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         ((FrameworkElement)sender).CaptureMouse();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="rem"&gt;// Store the start position&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         &lt;span class="kwrd"&gt;this&lt;/span&gt;.initialResizePoint = e.GetPosition(&lt;span class="kwrd"&gt;this&lt;/span&gt;.Parent &lt;span class="kwrd"&gt;as&lt;/span&gt; UIElement);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         initialWindowSize.Width = (!&lt;span class="kwrd"&gt;double&lt;/span&gt;.IsNaN(&lt;span class="kwrd"&gt;this&lt;/span&gt;.Width) ? &lt;span class="kwrd"&gt;this&lt;/span&gt;.Width : &lt;span class="kwrd"&gt;this&lt;/span&gt;.ActualWidth);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         initialWindowSize.Height = (!&lt;span class="kwrd"&gt;double&lt;/span&gt;.IsNaN(&lt;span class="kwrd"&gt;this&lt;/span&gt;.Height) ? &lt;span class="kwrd"&gt;this&lt;/span&gt;.Height : &lt;span class="kwrd"&gt;this&lt;/span&gt;.ActualHeight);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         &lt;span class="kwrd"&gt;this&lt;/span&gt;.initialWindowLocation.X = Canvas.GetLeft(&lt;span class="kwrd"&gt;this&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         &lt;span class="kwrd"&gt;this&lt;/span&gt;.initialWindowLocation.Y = Canvas.GetTop(&lt;span class="kwrd"&gt;this&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;         &lt;span class="rem"&gt;// Set resizing to true&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;         &lt;span class="kwrd"&gt;this&lt;/span&gt;.isResizing = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;when we push the left mouse button if we can resize, we save some initial values that will be used to compute the offsets needed to resize the window, here we get: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the starting position of the mouse &lt;/li&gt;

  &lt;li&gt;the initial window size (we look for the Width and Height value first, and if they aren’t set we look for the ActaulWidth and AactualHeight that will be computed if the size isn’t explicitly set by the user) &lt;/li&gt;

  &lt;li&gt;the initial window position &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in the end we states that a resize operation is started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MouseLeftButtonUp&lt;/strong&gt;&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; window_MouseLeftButtonUp(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, MouseButtonEventArgs e)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; ((ResizeEnabled) &amp;amp;&amp;amp; (isResizing))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         &lt;span class="rem"&gt;// Release the mouse&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         ((FrameworkElement)sender).ReleaseMouseCapture();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="rem"&gt;// Set resizing to false&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         isResizing = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;here we just release the mouse and end the resize operation, if there’s one in progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MouseMove&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the resizing logic goes here, so it’s a quite long routine, we divide it in 2 sections based on the current state of the control: if a resize operation isn’t started, we use this event to find if the mouse is near/inside an hotspot for resize (border or corner) and if so, to identify the correct hotspot; if the resizing operation is started (that is the mouse is inside an hotspot and the user pressed the mouse button), we use this event to compute the new window size and position.&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; window_MouseMove(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, MouseEventArgs e)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; (ResizeEnabled)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         Point pos = e.GetPosition(window);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (!isResizing)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; ((pos.Y &amp;lt;= HotSpotWidth) &amp;amp;&amp;amp; (pos.X &amp;lt;= HotSpotWidth))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;                 window.Cursor = Cursors.Hand;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                 resizeAnchor = ResizeAnchor.TopLeft;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;             }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;             &lt;span class="kwrd"&gt;else&lt;/span&gt; &lt;span class="kwrd"&gt;if&lt;/span&gt; ((pos.Y &amp;lt;= HotSpotWidth) &amp;amp;&amp;amp; (pos.X &amp;gt;= (window.ActualWidth - HotSpotWidth)))&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;             {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                 window.Cursor = Cursors.Hand;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;                 resizeAnchor = ResizeAnchor.TopRight;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;             }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;             &lt;span class="kwrd"&gt;else&lt;/span&gt; &lt;span class="kwrd"&gt;if&lt;/span&gt; (pos.Y &amp;lt;= HotSpotWidth)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;             {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;                 ...&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;             }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;         &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;             ...resize the window...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;             &lt;span class="rem"&gt;//let's resize the contentpresenter to fix the resize bug of controls inside a scrollviewer with&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;             &lt;span class="rem"&gt;//horizontal scrollbar visible&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;             contentpresenter.Width = &lt;span class="kwrd"&gt;this&lt;/span&gt;.Width - innerContentPresenterOffset;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here we get the current mouse position, then we check which hotspot the user hits, so we can change the cursor and set the internal variable that will indicate which action the user is going to take when he will press the left mouse button to start the resize operation.&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; window_MouseMove(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, MouseEventArgs e)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; (ResizeEnabled)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         Point pos = e.GetPosition(window);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (!isResizing)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;             ...decide the resize action...&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;             Point position = e.GetPosition(&lt;span class="kwrd"&gt;this&lt;/span&gt;.Parent &lt;span class="kwrd"&gt;as&lt;/span&gt; UIElement);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;             &lt;span class="kwrd"&gt;double&lt;/span&gt; deltaX = position.X - initialResizePoint.X;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;             &lt;span class="kwrd"&gt;double&lt;/span&gt; deltaY = position.Y - initialResizePoint.Y;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;             &lt;span class="kwrd"&gt;switch&lt;/span&gt; (resizeAnchor)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;             {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;                 &lt;span class="kwrd"&gt;case&lt;/span&gt; ResizeAnchor.Left:&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;                     ResizeLeft(deltaX);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;                     &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;                 ...&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;                 &lt;span class="kwrd"&gt;case&lt;/span&gt; ResizeAnchor.TopLeft:&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;                     ResizeLeft(deltaX);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;                     ResizeTop(deltaY);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;                     &lt;span class="kwrd"&gt;break&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;                 ...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;             }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;             &lt;span class="rem"&gt;//let's resize the contentpresenter to fix the resize bug of controls inside a scrollviewer with&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;             &lt;span class="rem"&gt;//horizontal scrollbar visible&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;             contentpresenter.Width = &lt;span class="kwrd"&gt;this&lt;/span&gt;.Width - innerContentPresenterOffset;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  34:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A resize operation is in progress, here we get the mouse position relative to the parent surface and we compute some delta values from the starting mouse position that will be used by the ResizeLeft(), ResizeTop(), ResizeRight() and ResizeBottom() functions to compute and assign the new window dimensions.&lt;/p&gt;

&lt;p&gt;Implementing the autoscroll feature seemed simply at start, just wrap all inside a ScrollViewer (see the template posted at start) and create two dependency properties to show/hide the ScrollBars...then we encountered a nasty bug (see my previous post), the workaround for it is to explicitly set the content presenter size at start and during the resize operation (we need to take into account any offset that can originate from the template structure).&lt;/p&gt;

&lt;p&gt;This is the line added to the MouseMove event:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="rem"&gt;//let's resize the contentpresenter to fix the resize bug of controls inside a scrollviewer with&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="rem"&gt;//horizontal scrollbar visible&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; contentpresenter.Width = &lt;span class="kwrd"&gt;this&lt;/span&gt;.Width - innerContentPresenterOffset;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The offset is computed during the window LayoutUpdated() event:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Window_LayoutUpdated(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, EventArgs e)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="rem"&gt;// The layout is comepletely set, let's compute the content offset and fix its dimensions,&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     &lt;span class="rem"&gt;// we need to do this only the first time because it will cause reevaluation of the size of the &lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     &lt;span class="rem"&gt;// scrollviewer container too.&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     &lt;span class="rem"&gt;// This is the offset that takes into account any element of the window&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; (innerContentPresenterOffset == -1)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         &lt;span class="rem"&gt;// innerContentPresenterOffset = this.ActualWidth - contentpresenter.ActualWidth;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         &lt;span class="rem"&gt;// We cannot use the starting content presenter size to compute the offset cause it can be greater than&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         &lt;span class="rem"&gt;// the actual window sie (due to the minvalue), so we compute it taking into account any horizontal offset&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         &lt;span class="rem"&gt;// of the scrollviewer&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;         innerContentPresenterOffset = &lt;span class="kwrd"&gt;this&lt;/span&gt;.ActualWidth - (scrollcontent.ActualWidth - scrollcontent.Margin.Left&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;             - scrollcontent.Margin.Right - scrollcontent.Padding.Left - scrollcontent.Padding.Right&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;             - scrollcontent.BorderThickness.Left - scrollcontent.BorderThickness.Right);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;         innerContentPresenterOffset = Math.Max(innerContentPresenterOffset, 0);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;         SetContentPresenterSizeAndMinSize();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The full project is available at the end of the post.&lt;/p&gt;

&lt;p&gt;As usual the control still has some limitations: it’s possible to resize a window to the outside of the Canvas of the Silverlight application loosing control on it; the window still misses some Maximize and Minimize buttons; it can also be good to have a sort of ‘action bar’ to track any window active and reposition it.&lt;/p&gt;

&lt;p&gt;All these things will be introduced in some next release of this control, so stay tuned.&lt;/p&gt;

&lt;p&gt;Example Solution:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:702f2a65-f653-4474-a142-c819ed2dd9c6" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/11/simulatingwindowsv3.zip" target="_self"&gt;SimulatingWindowsV3.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Pervious posts:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/index.php/2008/10/16/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround/" target="_blank"&gt;Silverlight: Controls inside ScrollViewer - horizontal resize layout bug and related workaround&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/index.php/2008/09/30/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window/" target="_blank"&gt;Silverlight: simulate a ‘Windows’ desktop application - part 2 (Dragging Window)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.primordialcode.com/index.php/2008/08/20/silverlight-simulate-a-windows-desktop-application-part-1/" target="_blank"&gt;Silverlight: simulate a ‘Windows’ desktop application - part 1&lt;/a&gt;&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:98cab476-0ead-4e85-8f64-e081bae25aac" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Window" rel="tag"&gt;Window&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Resize" rel="tag"&gt;Resize&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround"&gt;Silverlight: Controls inside ScrollViewer - horizontal resize layout bug and related workaround&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window"&gt;Silverlight: simulate a ‘Windows’ desktop application - part 2 (Dragging Window)&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control"&gt;Silverlight: a generic Pagination Control&lt;/a&gt; (09/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-simulate-windows-desktop-application-part-3-resizable-window"&gt;&lt;strong&gt;More related document (41)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-simulate-windows-desktop-application-part-3-resizable-window</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-simulate-windows-desktop-application-part-3-resizable-window#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-simulate-windows-desktop-application-part-3-resizable-window</guid><pubDate>Sat, 08 Nov 2008 18:46:00 GMT</pubDate><category>Resizable</category><category>Resize</category><category>Silverlight</category><category>Window</category></item><item><title>Silverlight Plug-in and the Height Percentage problem in Firefox</title><description>&lt;p&gt;Today I added a small Silverlight application to an existing and styled website, the app was surrounded by the usual &amp;lt;div&amp;gt;:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;div&lt;/span&gt; &lt;span class="attr"&gt;style&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;height: 100%&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;asp:Silverlight&lt;/span&gt; &lt;span class="attr"&gt;ID&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Xaml1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;runat&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;server&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Source&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;~/ClientBin/XXX.xap&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;         &lt;span class="attr"&gt;MinimumVersion&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;2.0.31005.0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;100%&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;100%&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;div&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In IE7 all gone well but in FF the Silverlight application appeared to be completely collapsed and not visible at all. After some research I found that the problem is in the way Firefox renders the &amp;lt;object&amp;gt; tag when its height is relative (that is it’s a percentage). Since none of the containers around the Silverlight &amp;lt;object&amp;gt; tag had a Height defined Firefox assumed to use 0.&lt;/p&gt;

&lt;p&gt;You have 3 possible workarounds to this problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can set a Fixed Height for the Silverlight application (not always a good solution) &lt;/li&gt;

  &lt;li&gt;You can set the Height of all the main containers of the page to 100%, that is: &amp;lt;html&amp;gt;, &amp;lt;body&amp;gt; and &amp;lt;form&amp;gt; tags if you use ASP.NET, with something like this: 
    &lt;div class="csharpcode-wrapper"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;style&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     html, body, form&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     {&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         height: 100%;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     }&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;style&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;

  &lt;li&gt;You can use the following style for the &amp;lt;div&amp;gt; that wraps the Silverlight plug-in: 
    &lt;div class="csharpcode-wrapper"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;div&lt;/span&gt; &lt;span class="attr"&gt;style&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;position: fixed; height: 100%; width: 100%&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; ...silverlight app...&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;div&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Choose the solution that fit best with your current styling mode.&lt;/p&gt;

&lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:7a4dcf82-2ec7-497c-99c2-466160ce0eb9" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Height" rel="tag"&gt;Height&lt;/a&gt;,&lt;a href="http://technorati.com/tags/100%25" rel="tag"&gt;100%&lt;/a&gt;,&lt;a href="http://technorati.com/tags/FireFox" rel="tag"&gt;FireFox&lt;/a&gt;,&lt;a href="http://technorati.com/tags/workaround" rel="tag"&gt;workaround&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-available"&gt;Silverlight 2 RC0 Available&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-datagrid-updated"&gt;Silverlight Datagrid Updated&lt;/a&gt; (01/12/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-plugin-height-percentage-problem-firefox"&gt;&lt;strong&gt;More related document (40)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-plugin-height-percentage-problem-firefox</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-plugin-height-percentage-problem-firefox#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-plugin-height-percentage-problem-firefox</guid><pubDate>Thu, 06 Nov 2008 21:59:00 GMT</pubDate><category>Firefox</category><category>Height</category><category>Silverlight</category><category>Workarounds</category><category>100%</category><category>Workaround</category></item><item><title>Some Code Analysis and Refactoring Utilities you may like</title><description>&lt;p&gt;As a developer I always look for some utilities that can help raise my productivity bar and avoid common bugs. I always go for open-source projects and free software first, cause we all know that in many cases we have a very limited budget to invest. So here is some GREAT pieces of software that can help you.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;FxCop (&lt;a title="http://blogs.msdn.com/fxcop/" href="http://blogs.msdn.com/fxcop/"&gt;http://blogs.msdn.com/fxcop/&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;A very good tool for code analysis, your code will be checked against a wide rage of rule sets that cover almost everything. It can be integrated with Visual Studio 2008.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Microsoft StyleCop (&lt;a title="http://blogs.msdn.com/sourceanalysis/" href="http://blogs.msdn.com/sourceanalysis/"&gt;http://blogs.msdn.com/sourceanalysis/&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;StyleCop analyzes C# source code to enforce a set of style and consistency rules, it can be integrated and run directly inside Visual Studio.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;PowerCommands for Visual Studio 2008 (&lt;a title="http://code.msdn.microsoft.com/PowerCommands" href="http://code.msdn.microsoft.com/PowerCommands"&gt;http://code.msdn.microsoft.com/PowerCommands&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;It is a set of useful extensions for the Visual Studio 2008 adding additional functionality to various areas of the IDE.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;CodeRush Xpress (&lt;a title="http://devexpress.com/Products/Visual_Studio_Add-in/CodeRushX/" href="http://devexpress.com/Products/Visual_Studio_Add-in/CodeRushX/"&gt;http://devexpress.com/Products/Visual_Studio_Add-in/CodeRushX/&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;A free refactoring tool for C# language with limited functionalities that integrates a the default refactoring features exposed by Visual Studio 2008. It cannot be used with Visual Studio Express.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Refactor! for Visual Basic (&lt;a title="http://devexpress.com/Products/Visual_Studio_Add-in/VBRefactor/" href="http://devexpress.com/Products/Visual_Studio_Add-in/VBRefactor/"&gt;http://devexpress.com/Products/Visual_Studio_Add-in/VBRefactor/&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;A free refactoring tool for Visual Basic .NET, it cannot be used with Visual Studio Express.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Refactor! for ASP.NET (&lt;a title="http://devexpress.com/Products/Visual_Studio_Add-in/RefactorASP/" href="http://devexpress.com/Products/Visual_Studio_Add-in/RefactorASP/"&gt;http://devexpress.com/Products/Visual_Studio_Add-in/RefactorASP/&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;A free refactoring tool for ASP.NET, it cannot be used with Visual Studio Express.&lt;/p&gt;  &lt;p&gt;Note that CodeRush Xpress, Refactor! for Visual Basic and Refactor! for ASP.NET are limited versions of full products and they cannot be installed together, so you have to choose and use the one that matches best your actual developing environment.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:3a94819d-6136-4f69-bb77-aa974b806f29" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Code+Analysis" rel="tag"&gt;Code Analysis&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Refactor" rel="tag"&gt;Refactor&lt;/a&gt;,&lt;a href="http://technorati.com/tags/StyleCop" rel="tag"&gt;StyleCop&lt;/a&gt;,&lt;a href="http://technorati.com/tags/FxCop" rel="tag"&gt;FxCop&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Utilities" rel="tag"&gt;Utilities&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/dotnetmarche-workshop-material-refactoring-2-the-max"&gt;DotNetMarche Workshop material - Refactoring 2 the max&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/changing-the-blog-rss-feed"&gt;Changing the blog RSS feed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/get-sharepoint-designer-2007-for-free"&gt;Get SharePoint Designer 2007 for Free&lt;/a&gt; (04/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/importance-license"&gt;The importance of having a License&lt;/a&gt; (10/09/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/code-analysis-refactoring-utilities"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/code-analysis-refactoring-utilities</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/code-analysis-refactoring-utilities#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/code-analysis-refactoring-utilities</guid><pubDate>Mon, 03 Nov 2008 19:45:00 GMT</pubDate><category>Free software</category><category>Productivity</category><category>Refactor</category><category>Refactoring tool</category><category>Utilities</category><category>Code analysis</category><category>Stylecop</category><category>Fxcop</category></item><item><title>NHibernate: how to control Delete Rule and Update Rule in a foreign key when using SchemaExport</title><description>&lt;p&gt;If in your project you let NHibernate generate the database from the information you provide with the schema mappings (a thing extremely useful, especially for testing cause you can build up the database in engines like SQLite), sometimes you may need to control some attribute in a foreign key of a table.&lt;/p&gt;  &lt;p&gt;Here is a sample mapping:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;hibernate-mapping&lt;/span&gt; &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Structura.UsersManager.Entities.User, Structura.UsersManager.Entities&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;table&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;tblUSERS&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;generator&lt;/span&gt; &lt;span class="attr"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;assigned&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;CustomerID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;CUSTOMERID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;UserName&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;USERNAME&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;length&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mSalt&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;SALT&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;length&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mPassword&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;PASSWORD&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;length&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;200&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;bag&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mGroups&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;table&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;tblUSERS_GROUPS&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;cascade&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;none&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;key&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;USERID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;foreign-key&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;FK_USERS&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;many-to-many&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                               &lt;span class="attr"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Structura.UsersManager.Entities.Group, Structura.UsersManager.Entities&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                               &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;GROUPID&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                               &lt;span class="attr"&gt;foreign-key&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;FK_GROUPS&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;bag&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;hibernate-mapping&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Consider the Users-Groups relation, you see it’s a many-to-many with two foreign keys defined; if we look at what NHibernate generates for us in SQL Express:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/10/nhibernateforeignkeyproperties.jpg"&gt;&lt;img title="NHibernateForeignKeyProperties" style="border-top-width: 0px; display: block; border-left-width: 0px; float: none; border-bottom-width: 0px; margin-left: auto; margin-right: auto; border-right-width: 0px" height="274" alt="NHibernateForeignKeyProperties" src="/UserFiles/Guardian/2008/10/nhibernateforeignkeyproperties-thumb.jpg" width="431" border="0" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see the Delete Rule and the Update Rule are set to ‘No Action’, cause NHibernate handles object relationship internally using the ‘cascade’ attribute of the bag. &lt;/p&gt;

&lt;p&gt;If you need to alter these values and use ‘Cascade’ instead of ‘No Action’, here are your options: in NHibernate 1.2 you have no direct way to modify the default behavior of a foreign key; in NHibernate 2.0 (and up) you can specify the delete rule using the &lt;em&gt;on-delete&lt;/em&gt; attribute of the key tag, but it will work only with one-to-many relations.&lt;/p&gt;

&lt;p&gt;So if you want full control, it seems you have no choice but to write some good old SQL code and ask NHibernate to execute it when creating the schema. For this purpose you can use the &lt;em&gt;&amp;lt;database-object&amp;gt;&lt;/em&gt; tag in your mapping.&lt;/p&gt;

&lt;p&gt;The &amp;lt;database-object&amp;gt; was created/introduced to let you create some object which NHibernate is not able to handle directly (like views and stored procedures for example), but you can use it to execute almost any SQL code. It has tree nested tags &lt;em&gt;&amp;lt;create&amp;gt;&lt;/em&gt;, &lt;em&gt;&amp;lt;drop&amp;gt;&lt;/em&gt;, &lt;em&gt;&amp;lt;dialect-scope&amp;gt;&lt;/em&gt; for a full description of their functionality have a look at the official NHibernate documentation.&lt;/p&gt;

&lt;p&gt;The SchemaExport() works by first dropping all the elements it can find in mappings and then recreating them: &amp;lt;drop&amp;gt; is used to supply NHibernate a script to use when dropping the objects, &amp;lt;create&amp;gt; is used...try to guess...you won, to create objects.&lt;/p&gt;

&lt;p&gt;For our purpose we do not need to use the &amp;lt;drop&amp;gt; tag, so all the work will be made in the &amp;lt;create&amp;gt; tag; here we can add the SQL code needed to remove the foreign key automatically generated by NHibernate and create our key that specify the correct rules. Using this technique it’s important to explicitly specify the names of the foreign keys, otherwise will be impossible to interact with them because NHibernate will generate an ‘unpredictable’ name for them.&lt;/p&gt;

&lt;p&gt;Our final mapping will look like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;hibernate-mapping&lt;/span&gt; &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;urn:nhibernate-mapping-2.2&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Structura.UsersManager.Entities.User, Structura.UsersManager.Entities&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;table&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;tblUSERS&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;generator&lt;/span&gt; &lt;span class="attr"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;assigned&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;id&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;CustomerID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;CUSTOMERID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;guid&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;UserName&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;USERNAME&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;length&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mSalt&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;SALT&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;length&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;property&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mPassword&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;PASSWORD&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;length&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;200&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;bag&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mGroups&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;access&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;table&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;tblUSERS_GROUPS&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;cascade&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;none&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;key&lt;/span&gt; &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;USERID&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;foreign-key&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;FK_USERS&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;many-to-many&lt;/span&gt; &lt;span class="attr"&gt;lazy&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                               &lt;span class="attr"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Structura.UsersManager.Entities.Group, Structura.UsersManager.Entities&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                               &lt;span class="attr"&gt;column&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;GROUPID&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                               &lt;span class="attr"&gt;foreign-key&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;FK_GROUPS&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;bag&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;class&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;database-object&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;create&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;             ALTER TABLE [dbo].[tblUSERS_GROUPS] DROP CONSTRAINT [FK_GROUPS]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;             ;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;             ALTER TABLE [dbo].[tblUSERS_GROUPS]  WITH CHECK ADD  CONSTRAINT [FK_GROUPS] FOREIGN KEY([GROUPID])&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;             REFERENCES [dbo].[tblGROUPS] ([ID])&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;             ON UPDATE CASCADE&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;             ON DELETE CASCADE&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;             ;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;             ALTER TABLE [dbo].[tblUSERS_GROUPS] CHECK CONSTRAINT [FK_GROUPS]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;create&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;drop&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;drop&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;database-object&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;database-object&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;create&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt;             ALTER TABLE [dbo].[tblUSERS_GROUPS] DROP CONSTRAINT [FK_USERS]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  34:&lt;/span&gt;             ;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:&lt;/span&gt;             ALTER TABLE [dbo].[tblUSERS_GROUPS]  WITH CHECK ADD  CONSTRAINT [FK_USERS] FOREIGN KEY([USERID])&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  36:&lt;/span&gt;             REFERENCES [dbo].[tblUSERS] ([ID])&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  37:&lt;/span&gt;             ON UPDATE CASCADE&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  38:&lt;/span&gt;             ON DELETE CASCADE&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  39:&lt;/span&gt;             ;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  40:&lt;/span&gt;             ALTER TABLE [dbo].[tblUSERS_GROUPS] CHECK CONSTRAINT [FK_USERS]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  41:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;create&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  42:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;drop&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;drop&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  43:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;database-object&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  44:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;hibernate-mapping&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This time we’ll have the correct rules for our foreign keys relations.&lt;/p&gt;

&lt;p&gt;As you can imagine being able to intervene in the database schema creation can be extremely useful in a wide range of circumstances. &lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:b80af8f0-6fba-4294-9f9d-8236ff8d9d42" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/NHibernate" rel="tag"&gt;NHibernate&lt;/a&gt;,&lt;a href="http://technorati.com/tags/foreign+key" rel="tag"&gt;foreign key&lt;/a&gt;,&lt;a href="http://technorati.com/tags/delete+rule" rel="tag"&gt;delete rule&lt;/a&gt;,&lt;a href="http://technorati.com/tags/update+rule" rel="tag"&gt;update rule&lt;/a&gt;,&lt;a href="http://technorati.com/tags/schemaexport" rel="tag"&gt;schemaexport&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-give-primary-key-schemaexport-sql-server-sql-express"&gt;NHibernate: how to give a name to your Primary Key using SchemaExport (in SQL Server/ SQL Express)&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/wpf-force-validation-rules-attached-object-executed"&gt;WPF: force all the validation rules attached to an object to be executed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/breaking-news-european-nhibernate-day-officially-announced"&gt;Breaking news: the First European NHibernate Day had been officially announced&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-impressions-conform"&gt;NHibernate - First impressions on ConfORM&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-customize-linq-provider-user-defined-sql-functions"&gt;NHibernate - Customize the Linq provider to call your user defined SQL functions&lt;/a&gt; (10/01/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/nhibernate-control-delete-rule-update-rule-foreign-key-schemaexport"&gt;&lt;strong&gt;More related document (22)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/nhibernate-control-delete-rule-update-rule-foreign-key-schemaexport</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/nhibernate-control-delete-rule-update-rule-foreign-key-schemaexport#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/nhibernate-control-delete-rule-update-rule-foreign-key-schemaexport</guid><pubDate>Sat, 25 Oct 2008 18:31:28 GMT</pubDate><category>Delete rule</category><category>Foreign key</category><category>Nhibernate</category><category>Update rule</category><category>Schemaexport</category></item><item><title>Deep Clone of a business object: the quick and dirty way</title><description>&lt;p&gt;I was implementing the IEditableObject interface for some entity classes in my current project and I needed a quick and dirty way to do the deep clone of an object, since my entity classes are shared between WCF, WPF and Silverlight (yes I’m one of the guys so crazy to build multi-target applications) I needed a method that could work in all the environments.&lt;/p&gt;  &lt;p&gt;In WPF and WCF you can rely on the binary formatter and the serialization (entity classes have to be marked with the &lt;em&gt;Serializable&lt;/em&gt; attribute), and use code like this:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Helpers&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; T DeepClone&amp;lt;T&amp;gt;(&lt;span class="kwrd"&gt;this&lt;/span&gt; T obj)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         T cloned = &lt;span class="kwrd"&gt;default&lt;/span&gt;(T);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         var serializer = &lt;span class="kwrd"&gt;new&lt;/span&gt; BinaryFormatter();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;using&lt;/span&gt; (var ms = &lt;span class="kwrd"&gt;new&lt;/span&gt; MemoryStream())&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             serializer.Serialize(ms, obj);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;             ms.Position = 0;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;             cloned = (T)serializer.Deserialize(ms);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; cloned;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In Silverlight you can write something similar and use the DataContractSerializer and the xml serialization:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Helpers&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; T DeepClone&amp;lt;T&amp;gt;(&lt;span class="kwrd"&gt;this&lt;/span&gt; T obj)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         T cloned = &lt;span class="kwrd"&gt;default&lt;/span&gt;(T);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         var serializer = &lt;span class="kwrd"&gt;new&lt;/span&gt; DataContractSerializer(&lt;span class="kwrd"&gt;typeof&lt;/span&gt;(T));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;using&lt;/span&gt; (var ms = &lt;span class="kwrd"&gt;new&lt;/span&gt; MemoryStream())&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             serializer.WriteObject(ms, obj);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;             ms.Position = 0;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;             cloned = (T)serializer.ReadObject(ms);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;         &lt;span class="kwrd"&gt;return&lt;/span&gt; cloned;        &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Due to the restriction of Silverlight the DataContractSerializer has some limitations and they depends if you are using or not the DataContract + DataMember attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With no attributes you can only serialize types that have a default public constructor with no arguments and all public fields/properties, for example something like: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TestEntityNoAttributes&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; PublicField;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; TestEntityNoAttributes()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; TestEntityNoAttributes(&lt;span class="kwrd"&gt;string&lt;/span&gt; pub)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         PublicField = pub;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;strong&gt;DataContract&lt;/strong&gt; + &lt;strong&gt;DataMember&lt;/strong&gt; attribute you can choose what to serialize, you do not need the default constructor anymore, but still you are limited to public fields only...unless you use the &lt;strong&gt;InternalsVisibleTo&lt;/strong&gt; attribute and convert the &lt;em&gt;protected&lt;/em&gt; and &lt;em&gt;private&lt;/em&gt; fields you want to serialize to &lt;em&gt;internal&lt;/em&gt;, the class will look like: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [DataContract]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; TestEntityAttributes&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     [DataMember]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; PublicField;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;     &lt;span class="rem"&gt;/// changed from protected to internal&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;     &lt;span class="rem"&gt;/// it has to be internal to allow serialization and be used with InternalsVisibleTo assembly attribute&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;     [DataMember]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     &lt;span class="kwrd"&gt;internal&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; _ProtectedField;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ProtectedField&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;         get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _ProtectedField; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;     &lt;span class="rem"&gt;/// changed from private to internal&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;     &lt;span class="rem"&gt;/// it has to be internal to allow serialization and be used with InternalsVisibleTo assembly attribute&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;     &lt;span class="rem"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;     [DataMember]&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;     &lt;span class="kwrd"&gt;internal&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; _PrivateField;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; PrivateField&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;         get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _PrivateField; }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; TestEntityAttributes(&lt;span class="kwrd"&gt;string&lt;/span&gt; pub, &lt;span class="kwrd"&gt;string&lt;/span&gt; pro, &lt;span class="kwrd"&gt;string&lt;/span&gt; pri)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt;         PublicField = pub;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  32:&lt;/span&gt;         _ProtectedField = pro;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:&lt;/span&gt;         _PrivateField = pri;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  34:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;plus you have to tag the assembly that holds the entities and make its internal members visibile to the serializer, since DataContractSerializer resides in the System.Runtime.Serialization you have to mark the assembly with:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="rem"&gt;//needed to allow the serializer to access internal members&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; [assembly: InternalsVisibleTo(&lt;span class="str"&gt;&amp;quot;System.Runtime.Serialization&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then using the &lt;a href="http://code.msdn.microsoft.com/silverlightut/" target="_blank"&gt;Silverlight Unit Testing Framework&lt;/a&gt; from &lt;a href="http://www.jeff.wilcox.name/" target="_blank"&gt;Jeff Wilcox&lt;/a&gt;, you can write a couple of tests like the following ones to verify that it works.&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [TestMethod]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TestEntityNoAttributeDeepClone()&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     TestEntityNoAttributes e = &lt;span class="kwrd"&gt;new&lt;/span&gt; TestEntityNoAttributes(&lt;span class="str"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     TestEntityNoAttributes eCloned = e.DeepClone();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     Assert.AreEqual(e.PublicField, eCloned.PublicField);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt; [TestMethod]&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; TestEntityAttributeDeepClone()&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     TestEntityAttributes e = &lt;span class="kwrd"&gt;new&lt;/span&gt; TestEntityAttributes(&lt;span class="str"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;     TestEntityAttributes eCloned = e.DeepClone();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;     Assert.AreEqual(e.PublicField, eCloned.PublicField);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;     Assert.AreEqual(e.ProtectedField, eCloned.ProtectedField);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;     Assert.AreEqual(e.PrivateField, eCloned.PrivateField);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Naturally using both those methods you incur in performance penalty...but hey...this is the quick and dirty way after all.&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:60925ca7-5818-4efc-b05f-d7d14fb00dc0" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/.net" rel="tag"&gt;.net&lt;/a&gt;,&lt;a href="http://technorati.com/tags/C%23" rel="tag"&gt;C#&lt;/a&gt;,&lt;a href="http://technorati.com/tags/deep+clone" rel="tag"&gt;deep clone&lt;/a&gt;,&lt;a href="http://technorati.com/tags/clone" rel="tag"&gt;clone&lt;/a&gt;,&lt;a href="http://technorati.com/tags/serialization" rel="tag"&gt;serialization&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/nhibernate-sqlserver-persist-generic-serializable-object-xml-field"&gt;NHibernate/SqlServer: persist a generic ‘serializable’ object to an XML field&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/castle-windsor-enabling-xml-configuration-files-silverlight"&gt;Castle Windsor enabling XML configuration files in Silverlight&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/serialization-exception-propertychangedeventmanager-serializable"&gt;Serialization Exception: PropertyChangedEventManager is not serializable&lt;/a&gt; (12/04/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/cvb-interop-reference-problems-visual-studio-2003-bc30007"&gt;C#/VB interop and reference problems in Visual Studio 2003 (BC30007)&lt;/a&gt; (03/12/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/deep-clone-business-object-quick-dirty"&gt;&lt;strong&gt;More related document (55)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/deep-clone-business-object-quick-dirty</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/deep-clone-business-object-quick-dirty#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/deep-clone-business-object-quick-dirty</guid><pubDate>Sat, 18 Oct 2008 21:08:00 GMT</pubDate><category>Clone</category><category>Deep clone</category><category>Silverlight</category><category>Xml serialization</category><category>.net</category><category>C#</category><category>Serialization</category></item><item><title>Silverlight: Controls inside ScrollViewer - horizontal resize layout bug and related workaround</title><description>&lt;p&gt;I was updating my sample on how to simulate a Window environment in Silverlight, after having implemented some fixes to the resize functions and having added the support for scrollbars inside a window, I realized a simple test form with a series of textboxes. &lt;/p&gt;  &lt;p&gt;During the horizontal resize operation I encountered a very strange behavior: only the first textbox changed its width according to the new windows size...while all the others retained their previous value; when you start a vertical resize operation all the textboxes were redrawn with the correct width.&lt;/p&gt;  &lt;p&gt;To be sure it wasn’t my control template’s fault and to try to reproduce this situation I prepared a simple test page, something like:&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ScrollViewer&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ScrollBox&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HorizontalScrollBarVisibility&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Auto&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;VerticalScrollBarVisibility&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Auto&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt; &lt;span class="attr"&gt;MinWidth&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ScrollContent&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;TextBoxes&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBox&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0,2,0,2&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;t1&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBox&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0,2,0,2&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;t2&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;my:MyTextBox&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0,2,0,2&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mt1&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;my:MyTextBox&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;0,2,0,2&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;mt2&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;PasswordBoxes&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;PasswordBox&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;PasswordBox&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Buttons&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;BTN1&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;BTN2&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ScrollViewer&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Some controls inside a ScrollViewer with both scrollbars set on Auto (you can download the whole code at the end of the article). If you open this page in a small browser window and the you resize it horizontally you can see what I was talking about:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/10/scrollviewcontrollayoutbug1.jpg"&gt;&lt;img title="ScrollViewControlLayoutBug1" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; margin-left: 0px; margin-right: 0px; border-right-width: 0px" height="272" alt="ScrollViewControlLayoutBug1" src="/UserFiles/Guardian/2008/10/scrollviewcontrollayoutbug1-thumb.jpg" width="223" border="0" /&gt;&lt;/a&gt;&amp;#160;&lt;a href="/UserFiles/Guardian/2008/10/scrollviewcontrollayoutbug2.jpg"&gt;&lt;img title="ScrollViewControlLayoutBug2" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; margin-left: 0px; margin-right: 0px; border-right-width: 0px" height="280" alt="ScrollViewControlLayoutBug2" src="/UserFiles/Guardian/2008/10/scrollviewcontrollayoutbug2-thumb.jpg" width="274" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As an information it seems that the layout arrange operations aren’t performed for the controls that follow the first one inside the children collection of the StackPanel; to see that I have just derived a new TextBox class and overridden the default behavior of the protected ArrangeOverride() function to report in the debug window some information regarding the size of the controls. If you run the example you can see that we have logs only for the first control inside the StackPanel.&lt;/p&gt;

&lt;p&gt;I was able to find a workaround for this and it is to set explicitly the size of the first container inside the ScrollViewer: we ca write some code for the ScrollViewr’s SizeChanged() event in which we set the dimensions of the contained element, here’s the snippet.&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; ScrollBox_SizeChanged(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, SizeChangedEventArgs e)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;      ScrollContent.Width = Math.Max(ScrollBox.ViewportWidth - 1.0, 0);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I have also added a small offset to avoid another graphic artifact: sometimes during shrink operations a disabled horizontal scrollbar used to appear, making the container a little smaller avoid this problem.&lt;/p&gt;

&lt;p&gt;I have to admit I haven’t done the same tests in WPF yet.&lt;/p&gt;

&lt;p&gt;Example Solution:&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:0aa6f300-efef-43ea-b3af-4eee32871e59" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/10/silverlightlayoutbug1.zip" target="_self"&gt;SilverlightLayoutBug.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:6692fa5b-047d-43d4-8b99-509acb5291b7" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Layout" rel="tag"&gt;Layout&lt;/a&gt;,&lt;a href="http://technorati.com/tags/ScrollViewer" rel="tag"&gt;ScrollViewer&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Resize" rel="tag"&gt;Resize&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-windows-desktop-application-part-3-resizable-window"&gt;Silverlight: simulate a ‘Windows’ desktop application - part 3 (Resizable Window)&lt;/a&gt; (11/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window"&gt;Silverlight: simulate a ‘Windows’ desktop application - part 2 (Dragging Window)&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control"&gt;Silverlight: a generic Pagination Control&lt;/a&gt; (09/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround"&gt;&lt;strong&gt;More related document (42)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround</guid><pubDate>Fri, 17 Oct 2008 00:19:00 GMT</pubDate><category>Control</category><category>Silverlight</category><category>Window</category><category>Layout</category><category>Scrollviewer</category><category>Resize</category></item><item><title>Invoking a Java/AXIS Web Service from .NET: the ‘return null’ issue</title><description>&lt;p&gt;When you try invoke a Java/Axis Web Service from a proxy class generated by Visual Studio 2005 or Visual Studio 2008 you often crash against the ‘return null’ issue.&lt;/p&gt;  &lt;p&gt;The web service seems to get called correctly and it responds to your client in the right way (you have no exception of any sort), but your returned object is null, it happened to me to face this situation today for the first time, there are a couple of things you can do to debug and resolve this situation:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Let’s consider our function call:      &lt;div class="csharpcode-wrapper"&gt;       &lt;div class="csharpcode"&gt;         &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [Test]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; T1()&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; {&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     Test.TestWs ws = &lt;span class="kwrd"&gt;new&lt;/span&gt; AxisWebService.Test.TestWs ();&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     Test.State[] arr = ws.getStates(1);&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     Assert.IsNotNull(arr);&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; }&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;here we expect to have back an array of State objects, instead we obtain the hated ‘null’.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first thing to do is to download and install ‘Fiddler’ (do it right now if you don’t have it already) and have a look at what the web service respond to us (the snippet is a trimmed response): 
    &lt;div class="csharpcode-wrapper"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; HTTP/1.1 200 OK&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; Connection: close&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; Date: Wed, 15 Oct 2008 12:36:26 GMT&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; Server: Microsoft-IIS/6.0&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt; X-Powered-By: ASP.NET&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt; Content-Type: text/xml;charset=utf-8&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="html"&gt;xml&lt;/span&gt; &lt;span class="attr"&gt;version&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;encoding&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;utf-8&amp;quot;&lt;/span&gt;?&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;soapenv:Envelope&lt;/span&gt; &lt;span class="attr"&gt;xmlns:soapenv&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;xmlns:xsd&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;xmlns:xsi&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;soapenv:Body&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;getStatesResponse&lt;/span&gt; &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;item&lt;/span&gt; &lt;span class="attr"&gt;xsi:type&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ns1:State&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;xmlns:ns1&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://mynamespace.it/&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Code&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;A001&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Code&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Description&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Description&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;item&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;getStatesResponse&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;soapenv:Body&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;soapenv:Envelope&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the web service is responding correctly the problem is in the deserialization stage of the data stream sent back by the web service.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s time to show some hidden file of the solution and look inside the ‘reference.cs’ (this is the default file in which Visual Studio creates some proxy classes). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking at the proxy classes generated by Visual Studio, it seems that we have all that we need: a class to call the web service and series of classes that map the objects the service returns; where’s the problem then? it turns out that the web service client can’t understand the response stream, so the problem is in a mismatch somewhere.&lt;/p&gt;

&lt;p&gt;Given the fact we have all the classes and all of them have the right properties, it’s time to look for the &lt;strong&gt;namespaces&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Visual Studio 2005 
    &lt;div class="csharpcode-wrapper"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [System.Web.Services.Protocols.SoapDocumentMethodAttribute(&lt;span class="str"&gt;&amp;quot;http://mynamespace.it/getStates&amp;quot;&lt;/span&gt;,&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     Use = System.Web.Services.Description.SoapBindingUse.Literal,&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; [&lt;span class="kwrd"&gt;return&lt;/span&gt;: System.Xml.Serialization.XmlArrayAttribute(&lt;span class="str"&gt;&amp;quot;getStatesResponse&amp;quot;&lt;/span&gt;, Namespace = &lt;span class="str"&gt;&amp;quot;http://mynamespace.it/&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt; [&lt;span class="kwrd"&gt;return&lt;/span&gt;: System.Xml.Serialization.XmlArrayItemAttribute(&lt;span class="str"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;, Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = &lt;span class="kwrd"&gt;false&lt;/span&gt;)]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; Stato[] getStates([System.Xml.Serialization.XmlElementAttribute(Namespace = &lt;span class="str"&gt;&amp;quot;http://mynamespace.it/&amp;quot;&lt;/span&gt;)] &lt;span class="kwrd"&gt;int&lt;/span&gt; getStatesRequest)&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; {&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;     &lt;span class="kwrd"&gt;object&lt;/span&gt;[] results = &lt;span class="kwrd"&gt;this&lt;/span&gt;.Invoke(&lt;span class="str"&gt;&amp;quot;getStates&amp;quot;&lt;/span&gt;, &lt;span class="kwrd"&gt;new&lt;/span&gt; &lt;span class="kwrd"&gt;object&lt;/span&gt;[] {&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;                 getStatesRequest});&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;     &lt;span class="kwrd"&gt;return&lt;/span&gt; ((State[])(results[0]));&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt; }&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pay attention to line number 4:&lt;/p&gt;

&lt;div class="csharpcode-wrapper" style="width: 97.5%; height: 33px"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [&lt;span class="kwrd"&gt;return&lt;/span&gt;: System.Xml.Serialization.XmlArrayAttribute(&lt;span class="str"&gt;&amp;quot;getStatesResponse&amp;quot;&lt;/span&gt;, Namespace = &lt;span class="str"&gt;&amp;quot;http://mynamespace.it/&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;here it states that the getResponseState element is qualified with the ‘http://mynamespace.it'/’ namespace...but look at what Fiddler captured for us (line 11 of the previous snippet): there we see that the namespace associated with the element is “” (empty string), so here it is our mismatch. To fix the problem you have to manually edit the attribute and correct the namespace to “” (empty string).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be very careful: writing Namespace = “” or removing it at all are two completely different things.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having made this fix our test passes and we are able to get our objects back from the web service.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Visual Studio 2008 
    &lt;br /&gt;It produces a completely different set of classes to call the web service, we have an interface that describes the service, a series of classes that represent the request and response of each method exposed by the interface and finally we have the proxy classes for the objects returned. We know that the problem is at the ‘client’ side so checking the request classes is useless, we focus our attention on the response classes and on object classes to verify the namespace mappings: 

    &lt;div class="csharpcode-wrapper"&gt;
      &lt;div class="csharpcode"&gt;
        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; [System.Diagnostics.DebuggerStepThroughAttribute()]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; [System.CodeDom.Compiler.GeneratedCodeAttribute(&lt;span class="str"&gt;&amp;quot;System.ServiceModel&amp;quot;&lt;/span&gt;, &lt;span class="str"&gt;&amp;quot;3.0.0.0&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; [System.ServiceModel.MessageContractAttribute(IsWrapped=&lt;span class="kwrd"&gt;false&lt;/span&gt;)]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; getStatesResponse {&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     &lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;     [System.ServiceModel.MessageBodyMemberAttribute(Name=&lt;span class="str"&gt;&amp;quot;getStatesResponse&amp;quot;&lt;/span&gt;, Namespace=&lt;span class="str"&gt;&amp;quot;http://mynamespace.it/&amp;quot;&lt;/span&gt;, Order=0)]&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;     [System.Xml.Serialization.XmlArrayItemAttribute(&lt;span class="str"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;, Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=&lt;span class="kwrd"&gt;false&lt;/span&gt;)]&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; State[] getStatesResponse1;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;     &lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; getStatesResponse() {&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;     }&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;     &lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;     &lt;span class="kwrd"&gt;public&lt;/span&gt; getStatesResponse(State[] getStatesResponse1) {&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;         &lt;span class="kwrd"&gt;this&lt;/span&gt;.getStatesResponse1 = getStatesResponse1;&lt;/pre&gt;

        &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;     }&lt;/pre&gt;

        &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt; }&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;look at line 6, you can see a namespace mismatch again, the fix is the same applied before.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the end, if you are using a Java/Axis Web Service and you get null results from you service calls, don't trust the auto-generated proxy classes too much and check that the attribute that defines the namespace for each object match what you get from the wsdl and from the traced response. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:fffa9d56-b141-44db-b072-13e166bfa894" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/.NET" rel="tag"&gt;.NET&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Web+Service" rel="tag"&gt;Web Service&lt;/a&gt;,&lt;a href="http://technorati.com/tags/WCF" rel="tag"&gt;WCF&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Axis" rel="tag"&gt;Axis&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Java" rel="tag"&gt;Java&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/passing-json-serialized-objects-wcf-service-jquery"&gt;Passing JSON serialized objects to a WCF service with jQuery&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/jquery-wcf-json-datetime-serialization"&gt;JQuery, WCF and the JSON DateTime serialization&lt;/a&gt; (03/04/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/unity-wcf-service-resolution-container-extension"&gt;Unity: WCF service resolution container extension&lt;/a&gt; (06/08/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-fixing-custom-wcf-proxy-generator"&gt;Silverlight / WCF: fixing the Custom WCF Proxy Generator&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-wcf-writing-custom-wcf-proxy-generator-support-validation"&gt;Silverlight / WCF : Writing your own Custom WCF Proxy Generator to support validation&lt;/a&gt; (12/09/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/invoking-javaaxis-web-service-net-return-null-issue"&gt;&lt;strong&gt;More related document (13)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/invoking-javaaxis-web-service-net-return-null-issue</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/invoking-javaaxis-web-service-net-return-null-issue#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/invoking-javaaxis-web-service-net-return-null-issue</guid><pubDate>Wed, 15 Oct 2008 23:49:00 GMT</pubDate><category>Axis</category><category>Java</category><category>Web service</category><category>.net</category><category>Wcf</category></item><item><title>Silverlight 2.0 RTW silently released</title><description>&lt;p&gt;Microsoft silently released Silverlight 2...if you navigate to &lt;a href="http://www.silverlight.net"&gt;www.silverlight.net&lt;/a&gt; and go to the ‘Get Started’ section you will notice that the ‘Beta 2’ marker on the Silverlight download button were removed.&lt;/p&gt;  &lt;p&gt;Plus the developers tools were updated too, you can reach the new versions from the same section you used to get the RC0 version...I just double checked the page and found that they have already changed the ‘Get Section’ to point to the new tools.&lt;/p&gt;  &lt;p&gt;So...to get the latest version navigate to: &lt;a title="http://silverlight.net/GetStarted/" href="http://silverlight.net/GetStarted/"&gt;http://silverlight.net/GetStarted/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-available"&gt;Silverlight 2 RC0 Available&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-datagrid-updated"&gt;Silverlight Datagrid Updated&lt;/a&gt; (01/12/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-20-rtw-silently-released"&gt;&lt;strong&gt;More related document (41)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released</guid><pubDate>Tue, 14 Oct 2008 18:35:00 GMT</pubDate><category>Silverlight</category></item><item><title>The importance of having a License</title><description>&lt;p&gt;Sometimes, especially when you have a technical blog and publish code examples or even fully working controls, it can be important to clearly states the License under which you release your work and how others can/should use it.&lt;/p&gt;  &lt;p&gt;I always underestimated this point and didn’t spent too much time on it in the past, but recently I started to look around at what types of licenses one can use for the software he produces that he want to share with the community.&lt;/p&gt;  &lt;p&gt;Today, after checking some options, I decided to opt for a Creative Common license system (have a look at &lt;a title="http://creativecommons.org/" href="http://creativecommons.org/"&gt;http://creativecommons.org/&lt;/a&gt;) which also allow distribution and commercial use of the samples I will post here.&lt;/p&gt;  &lt;p&gt;If you have a blog and/or post code samples attaching a license to them, will help your readers to use the code the way it was meant to be by the author.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:dc85c686-60a4-4710-adbc-a0cd317be1e8" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Software+License" rel="tag"&gt;Software License&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Copyright" rel="tag"&gt;Copyright&lt;/a&gt;&lt;/div&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/code-analysis-refactoring-utilities"&gt;Some Code Analysis and Refactoring Utilities you may like&lt;/a&gt; (11/03/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/importance-license"&gt;&lt;strong&gt;More related document (1)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/importance-license</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/importance-license#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/importance-license</guid><pubDate>Thu, 09 Oct 2008 22:34:00 GMT</pubDate><category>Software license</category><category>Copyright</category></item><item><title>XAML Power Toys and Mole</title><description>&lt;p&gt;Reading &lt;a href="http://timheuer.com/blog/Default.aspx" target="_blank"&gt;Tim Heuer's Blog&lt;/a&gt; I discovered these two very nice tools written by &lt;a href="http://karlshifflett.wordpress.com/" target="_blank"&gt;Karl Shifflett&lt;/a&gt;. They are a very nice XAML code generator to build basic business form in WPF and Silverlight, and a tool that provides a series of advanced Visualizers that interact with Visual Studio 2008 (excerpt from mole documentation: Mole was designed to not only allow the developer to view objects or data, but to also allow the developer to drill into properties of those objects and then edit them).&lt;/p&gt;  &lt;p&gt;I played with them a bit and found that both XAML Power Toys and Mole are extremely easy to use: XAML Power Toys can speed-up the process of creating a basic business form a lot, Mole is an invaluable support during debugging sessions; both the programs are offered for FREE and they come with a very good documentation and with a series of videos/tutorials that explains how to use them.&lt;/p&gt;  &lt;p&gt;The guys working on these projects made a very good job and their products should be part of the toolset any WPF/Silverlight developer should use (for sure they go in my favorite programs list).&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;   &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:08500490-b572-43ff-83bb-75f799895ba9" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/WPF" rel="tag"&gt;WPF&lt;/a&gt;,&lt;a href="http://technorati.com/tags/XAML+Power+Toys" rel="tag"&gt;XAML Power Toys&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Mole" rel="tag"&gt;Mole&lt;/a&gt;&lt;/div&gt; &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-power-of-canvas"&gt;Silverlight: The Power of &lt;Canvas&gt;&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control"&gt;Silverlight: Dropdown Menu Control&lt;/a&gt; (10/07/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/xaml-power-toys-mole"&gt;&lt;strong&gt;More related document (51)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/xaml-power-toys-mole</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/xaml-power-toys-mole#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/xaml-power-toys-mole</guid><pubDate>Thu, 09 Oct 2008 18:47:00 GMT</pubDate><category>Silverlight</category><category>Xaml</category><category>Wpf</category><category>Xaml power toys</category><category>Mole</category></item><item><title>Silverlight: Dropdown Menu Control</title><description>&lt;p&gt;In a previous post I showed how we can build a simple menu control for Silverlight 2 Beta 2 (&lt;a href="http://www.primordialcode.com/index.php/2008/09/25/silverlight-how-to-build-a-simple-menu-control/"&gt;Silverlight: how to build a simple menu control&lt;/a&gt;); then with the release of Silverlight RC0 some things were changed and the menu stopped working, due to how events are handled for disabled controls (&lt;a href="http://www.primordialcode.com/index.php/2008/09/27/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls/"&gt;Silverlight 2 RC0 – first problems due to undocumented breaking changes on disabled controls&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;The only way to overcome these problems was to completely rewrite the control, I also took advantage of this to implement some more features, such as the possibility to have nested menus and a better support for skinning through styles.&lt;/p&gt;  &lt;p&gt;Here’s what we want to obtain:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/10/silverlightmenu3.jpg"&gt;&lt;img title="SilverlightMenu3" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="186" alt="SilverlightMenu3" src="/UserFiles/Guardian/2008/10/silverlightmenu3-thumb.jpg" width="244" border="0" /&gt;&lt;/a&gt; &lt;a href="/UserFiles/Guardian/2008/10/silverlightmenu4.jpg"&gt;&lt;img title="SilverlightMenu4" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="177" alt="SilverlightMenu4" src="/UserFiles/Guardian/2008/10/silverlightmenu4-thumb.jpg" width="244" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;The new dropdown menu is now composed of 4 different controls:&lt;/p&gt;  &lt;p&gt;- MenuBar: a container for the menu, it only supports horizontal placing of elements right now.&lt;/p&gt;  &lt;p&gt;- MenuPanel: a control that provides the frame in which the menu items are displayed (for styling purposes).&lt;/p&gt;  &lt;p&gt;- MenuItem: the base class for a single menu item, it can contain a list of menu items (to support nested menus).&lt;/p&gt;  &lt;p&gt;- MainMenuItem: the class that ‘describes’ a menu item that belongs to the MenuBar, it keeps a list of Menu Items.&lt;/p&gt;  &lt;p&gt;The MenuItem control is still based on the Button control, but instead of having it placed in a xaml file alongside a grid, this time we derive the new control from the Button class. This way the control can be skinned using the standard way with templates.&lt;/p&gt;  &lt;p&gt;The MainMenuItem derives from MenuItem and overrides some internal members.&lt;/p&gt;  &lt;p&gt;The previous PopupProvider class was renamed MenuPopupProvider and modified to handle special cases related to the way the popup windows of chained menus are closed when the user clicks on menu items or when he moves the mouse outside the menu itself; with the current modification this class is no more a generic popup handler but it’s became specific for this menu control.&lt;/p&gt;  &lt;p&gt;The two major changes were made to the ClosePopup() function, which now has to take into account the fact that we cannot close a menu if there’s a submenu opened and also, if the closing of the current menu is confirmed, it has to forward the closing request to the parent menu (if there’s any).&lt;/p&gt;  &lt;div class="csharpcode-wrapper"&gt;   &lt;div class="csharpcode"&gt;     &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; ClosePopup()&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;if&lt;/span&gt; (_isPopupOpen &amp;amp;&amp;amp; _isPopupClosing)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         _closeTimer.Stop();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         &lt;span class="rem"&gt;//the popup logically belongs to the owner, so we have to check in one of his children have a popup opened. &lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (_owner &lt;span class="kwrd"&gt;is&lt;/span&gt; MenuItem)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             MenuItem mi = _owner &lt;span class="kwrd"&gt;as&lt;/span&gt; MenuItem;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; (mi.HasSubItems)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                 &lt;span class="kwrd"&gt;foreach&lt;/span&gt; (MenuItem m &lt;span class="kwrd"&gt;in&lt;/span&gt; mi.MenuItems)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;                     &lt;span class="kwrd"&gt;if&lt;/span&gt; (m.IsSubMenuOpen)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                         &lt;span class="rem"&gt;//if so we cancel the closing request&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                         _isPopupClosing = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;                         &lt;span class="kwrd"&gt;return&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;                     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt;         _isPopupOpen = _isPopupClosing = _popup.IsOpen = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  22:&lt;/span&gt;         &lt;span class="rem"&gt;//if this is a menuitem and his parent is not null, we have to ask it to close its menu too,&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:&lt;/span&gt;         &lt;span class="rem"&gt;//however we have to close the parent menu only if the mouse is not over the menu itself&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  24:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (_owner.GetType() == &lt;span class="kwrd"&gt;typeof&lt;/span&gt;(MenuItem))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  26:&lt;/span&gt;             MenuItem parent = (_owner &lt;span class="kwrd"&gt;as&lt;/span&gt; MenuItem).ParentMenuItem;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; (parent != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  28:&lt;/span&gt;                 parent.CloseMenuPopup();&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  30:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We also added an event handler for the MouseEnter() event on the _trigger control to open a submenu when the user hovers the parent item with the mouse.&lt;/p&gt;

&lt;p&gt;The most interesting thing is however how we deal with the disabled controls, if a menu item is disabled it will not fire any mouse event (as it should be), but with the RC0 release it seems that when we move the mouse over a disabled control we also go outside the scope of his parent/container too... let me explain: the menu items are contained in a StackPanel, if we move the mouse over a disabled control inside the StackPanel we also get a MouseLeave() event from the StackPanel too..and this caused the PopupProvider to close the menu (see my previous posts on the subject).&lt;/p&gt;

&lt;p&gt;To overcome this situation we have to keep the control alive (enabled) and we have to do some magic to ‘fool’ the user and let him see a disabled control, we put our ‘Magician Hat’ on and we write some code to create a Custom Visual State Manager, that we inject in the control template:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; MenuVisualStateManager : VisualStateManager&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; GoToStateCore(Control control, FrameworkElement templateRoot, &lt;span class="kwrd"&gt;string&lt;/span&gt; stateName, VisualStateGroup group, VisualState state, &lt;span class="kwrd"&gt;bool&lt;/span&gt; useTransitions)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;         MenuItem mi = (MenuItem)control;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (mi.IsEnabled == &lt;span class="kwrd"&gt;false&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;             &lt;span class="rem"&gt;//force the control to have a disabled appearence&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;             stateName = &lt;span class="str"&gt;&amp;quot;Disabled&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;             &lt;span class="kwrd"&gt;if&lt;/span&gt; (group != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                 &lt;span class="kwrd"&gt;for&lt;/span&gt; (&lt;span class="kwrd"&gt;int&lt;/span&gt; i = 0; i &amp;lt; group.States.Count; i++)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;                     &lt;span class="kwrd"&gt;if&lt;/span&gt; ((group.States[i] &lt;span class="kwrd"&gt;is&lt;/span&gt; VisualState) &amp;amp;&amp;amp; (((VisualState)(group.States[i])).Name == stateName))&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                         state = group.States[i] &lt;span class="kwrd"&gt;as&lt;/span&gt; VisualState;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;         }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (state != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;base&lt;/span&gt;.GoToStateCore(control, templateRoot, stateName, group, state, useTransitions);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt;         &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt;             &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  20:&lt;/span&gt; }&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;What it does is quite simple: every time the control tries to change state, our MenuVisualStateManager gets called and we have a chance to modify the next state that will be displayed: if the MenuItem related is disabled we force the VSM to display the ‘Disabled’ visual state of the button; the trick works cause the appearance of the control is completely disjoint from its operational status.&lt;/p&gt;

&lt;p&gt;We assign the custom visual state manager in the xaml that defines the default template for the menu in the Generic.xaml file:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt; &lt;span class="attr"&gt;TargetType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ctrl:MenuItem&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;IsEnabled&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;         ...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Template&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter.Value&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;                 &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ControlTemplate&lt;/span&gt; &lt;span class="attr"&gt;TargetType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;ctrl:MenuItem&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;                     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;MenuItemLayout&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;                         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid.Resources&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;                         ...&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;                         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid.Resources&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;                         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;vsm:VisualStateManager.CustomVisualStateManager&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;                             &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ctrl:MenuVisualStateManager&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;vsm&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;                         &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;vsm:VisualStateManager.CustomVisualStateManager&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;                         &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;vsm:VisualStateManager.VisualStateGroups&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt;                         ...&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The last thing to do is to override the default behavior of the IsEnabled property:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsEnabled&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;     get { &lt;span class="kwrd"&gt;return&lt;/span&gt; _isEnabled; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;     set&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt;     {&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt;         _isEnabled = &lt;span class="kwrd"&gt;value&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt;         ForceVisualState(&lt;span class="kwrd"&gt;value&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt;         &lt;span class="rem"&gt;//this is not strictly needed if the menu control is implemented as a button and we can&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt;         &lt;span class="rem"&gt;//'really' disable the control, cause if the control is disabled no event will be fired&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt;         &lt;span class="kwrd"&gt;if&lt;/span&gt; (&lt;span class="kwrd"&gt;value&lt;/span&gt;)&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;             EnablePopupProvider();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt;         &lt;span class="kwrd"&gt;else&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt;             DisablePopupProvider();&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt;     }&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt; }&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt; &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; _isEnabled = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;At this time you can use the new Dropdown Menu Control adding menu items in code only, with something like this:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="rem"&gt;//Dynamically buildup a menu&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt; MainMenuItem m1 = Menu.AddMenu(&lt;span class="str"&gt;&amp;quot;Test1&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt; m1.AddSubmenu(&lt;span class="str"&gt;&amp;quot;Sub1&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt; m1.AddSubmenu(&lt;span class="str"&gt;&amp;quot;Long Sub1 string&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt; MenuItem sb1 = Menu.CreateMenuItem(&lt;span class="str"&gt;&amp;quot;Disabled Sub1&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   6:&lt;/span&gt; sb1.IsEnabled = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:&lt;/span&gt; m1.AddSubmenu(sb1);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   8:&lt;/span&gt; sb1 = Menu.CreateMenuItem(&lt;span class="str"&gt;&amp;quot;Click Me! Sub1&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:&lt;/span&gt; sb1.MenuClick += &lt;span class="kwrd"&gt;new&lt;/span&gt; MenuClickEventHandler(sb1_MenuClick);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  10:&lt;/span&gt; m1.AddSubmenu(sb1);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:&lt;/span&gt;&amp;#160; &lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  12:&lt;/span&gt; MainMenuItem m2 = Menu.CreateMainMenuItem(&lt;span class="str"&gt;&amp;quot;Disabled Test2&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:&lt;/span&gt; m2.IsEnabled = &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  14:&lt;/span&gt; m2.AddSubmenu(Menu.CreateMenuItem(&lt;span class="str"&gt;&amp;quot;Sub2 1&amp;quot;&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:&lt;/span&gt; m2.AddSubmenu(Menu.CreateMenuItem(&lt;span class="str"&gt;&amp;quot;Sub2 2&amp;quot;&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  16:&lt;/span&gt; m2.AddSubmenu(Menu.CreateMenuItem(&lt;span class="str"&gt;&amp;quot;Sub2 3&amp;quot;&lt;/span&gt;));&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:&lt;/span&gt; Menu.AddMenu(m2);&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;  18:&lt;/span&gt; ...&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can override the default template for PanelMenus, MainMenuItems and MenuItems using the PanelMenuStyle, MainMenuItemStyle and MenuItemStyle properties exposed by the MenuBar control:&lt;/p&gt;

&lt;div class="csharpcode-wrapper"&gt;
  &lt;div class="csharpcode"&gt;
    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;LayoutRoot&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Background&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;White&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   2:&lt;/span&gt;     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;ctrl:MenuBar&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Menu&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:&lt;/span&gt;         &lt;span class="attr"&gt;MenuItemStyle&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{StaticResource mi}&amp;quot;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alteven"&gt;&lt;span class="lnum"&gt;   4:&lt;/span&gt;         &lt;span class="attr"&gt;MenuPanelStyle&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{StaticResource miPanel}&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;ctrl:MenuBar&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

    &lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;StackPanel&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I’m not a professional graphic designer so my templates are actually quite questionable, in the demo solution you can find a couple of pages that show you how to use and skin this control with different graphic templates.&lt;/p&gt;

&lt;p&gt;As usual this is a starting point for further work and a lot of improvements can be made (I’m thinking to completely remove the button control as base class and implement it from scratch, add support for icons and some cool animations, also I’m working on keyboard navigation of the menu itself).&lt;/p&gt;

&lt;p&gt;There are also some fix to make to improve the templates assignment to each control, actually you need to use the factory methods provided by the MenuBar control to have templates correctly assigned to each MenuItem.&lt;/p&gt;

&lt;p&gt;The solution still contains the old menu control code for you to check for changes made.&lt;/p&gt;

&lt;p&gt;Note: I believe there are still some bugs in the way the Popup control interacts with the normal event flow, you can see this when you open a submenu window: if you keep moving the mouse over another menu item at the same level you will notice that the status of the control is not changed and the hover effect is not applied.&lt;/p&gt;

&lt;p&gt;(thanks to Giuseppe Polverini for reviewing my English)&lt;/p&gt;

&lt;p&gt;Example Solution:&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:9a349514-55bd-428f-8055-2dbbe931837f" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/10/silverlightmenuv21.zip" target="_self"&gt;SilverlightMenuV2.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:cda7458c-1bda-467b-8dd9-ca886251a730" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Drop+Down+Menu" rel="tag"&gt;Drop Down Menu&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Menu" rel="tag"&gt;Menu&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Menu+Control" rel="tag"&gt;Menu Control&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control"&gt;Silverlight: how to build a simple Menu Control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls"&gt;Silverlight 2 RC0 – first problems due to undocumented breaking changes on disabled controls&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-dropdown-menu-control"&gt;&lt;strong&gt;More related document (42)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control</guid><pubDate>Tue, 07 Oct 2008 23:24:27 GMT</pubDate><category>Control</category><category>Menu</category><category>Menu control</category><category>Silverlight</category><category>Window</category><category>Xaml</category><category>Drop down menu</category></item><item><title>Silverlight: simulate a ‘Windows’ desktop application - part 2 (Dragging Window)</title><description>&lt;p&gt;With the release of Silverlight RC0 it was finally time to update this sample application. Let’s now go on with the tutorial and take a look at how the dragging capability of the Window is implemented, you can state if you want to enable or disable the dragging feature for an instance of the control simply by setting the ‘DraggingEnabled’ property. &lt;/p&gt;  &lt;p&gt;All the code is encapsulated in the “Dragging functions” region, the Idea is quite simple, we will subscribe to the MouseLeftButtonDown, MouseMove and MouseLeftButtonUp events and handle the stuff from there:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;MouseLeftButtonDown : here we capture the mouse, then we take note of the current Window position and the position where the user clicked (this value will be used to compute the offset of the movement). In the end we set the internal status variable that states we are inside a dragging operation. &lt;/li&gt; &lt;/ul&gt;  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:409295fe-f6cc-4473-83ad-1d830759534a" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; captionBar_MouseLeftButtonDown(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, MouseButtonEventArgs e)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (DraggingEnabled)
            {
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Bring the panel to the front&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                Canvas.SetZIndex(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;, currentZIndex&lt;/span&gt;&lt;span style="color: #000000;"&gt;++&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Capture the mouse&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                ((FrameworkElement)sender).CaptureMouse();
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Store the start position&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.initialDragPoint &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; e.GetPosition(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.Parent &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; UIElement);
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.initialWindowLocation.X &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; Canvas.GetLeft(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.initialWindowLocation.Y &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; Canvas.GetTop(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Set dragging to true&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.isDragging &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;true&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            }
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;MouseMove: if we are in a dragging operation, we compute the offset and finally we set the new window position using the Canvas.SetLeft() or Canvas.SetTop() functions. &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:3e205d2f-1068-4920-978b-371f6c9eb2f2" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; captionBar_MouseMove(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, MouseEventArgs e)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.isDragging)
            {
                Point position &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; e.GetPosition(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.Parent &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; UIElement);
                Canvas c &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.Parent &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; Canvas;
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Move the panel&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;double&lt;/span&gt;&lt;span style="color: #000000;"&gt; X &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; initialWindowLocation.X &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; position.X &lt;/span&gt;&lt;span style="color: #000000;"&gt;-&lt;/span&gt;&lt;span style="color: #000000;"&gt; initialDragPoint.X;
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; ((X &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style="color: #000000;"&gt; (X &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; captionBar.ActualWidth &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; c.ActualWidth))
                    Canvas.SetLeft(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;, X);
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;double&lt;/span&gt;&lt;span style="color: #000000;"&gt; Y &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; initialWindowLocation.Y &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; position.Y &lt;/span&gt;&lt;span style="color: #000000;"&gt;-&lt;/span&gt;&lt;span style="color: #000000;"&gt; initialDragPoint.Y;
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; ((Y &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style="color: #000000;"&gt; (Y &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; captionBar.ActualHeight &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; c.ActualHeight))
                    Canvas.SetTop(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;, Y);
            }
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;note that here we also set some limits for the position that the window can assume, actually we do not want to drag the window outside the Silverlight application area.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MouseLeftButtonUp: we release the mouse and we end the dragging operation. &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:818485d5-7b63-4037-8826-cadc1d25c90c" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; captionBar_MouseLeftButtonUp(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, MouseButtonEventArgs e)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (DraggingEnabled)
            {
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Release the mouse&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                ((FrameworkElement)sender).ReleaseMouseCapture();
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Set dragging to false&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                isDragging &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;false&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            }
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;See you next time.&lt;/p&gt;

&lt;p&gt;Example Solution: &lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:3a808dbe-e606-4d0f-9159-858e84a0fb87" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/09/simulatingwindowsv2.zip" target="_self"&gt;SimulatingWindowsV2.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:2ec67193-b4a2-4484-b1b6-710cf6e6ece4" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Window" rel="tag"&gt;Window&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Dragging" rel="tag"&gt;Dragging&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Draggable" rel="tag"&gt;Draggable&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Control" rel="tag"&gt;Control&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround"&gt;Silverlight: Controls inside ScrollViewer - horizontal resize layout bug and related workaround&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control"&gt;Silverlight: a generic Pagination Control&lt;/a&gt; (09/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window"&gt;&lt;strong&gt;More related document (42)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window</guid><pubDate>Tue, 30 Sep 2008 23:57:00 GMT</pubDate><category>Control</category><category>Silverlight</category><category>Window</category><category>Dragging</category><category>Draggable</category></item><item><title>Silverlight, Pluggable Architectures, Composite Applications and future plans…</title><description>&lt;p&gt;The new project my small company is working on is quite interesting…since this will be our first ‘real’ application developed in .NET 3.5 we evaluated the possibility to develop the whole application as a web application due to the new possibilities offered by the environment.&lt;/p&gt;  &lt;p&gt;The hard task is mainly that we need to develop it as a composite application to have the possibility to ‘inject’ new blocks of functionality when the users ask for them, also separate the application in small blocks make our life a little easier.&lt;/p&gt;  &lt;p&gt;I will not go into detail of how composite applications works cause you can already find a lot of good sources of information on the web.&lt;/p&gt;  &lt;p&gt;Why use Silverlight instead of..lets say Flash? well we made a preliminary check of all the ‘coolest’ feature we needed and we made some simple test projects to see if they could be doable as a web app (it took some time yes), stated that..we made a simple consideration…since we are not yet 100% sure we can make it all (you never know what your users will ask to you in the future) we decided to try Silverlight simply cause if the project is well structured you can easily build a safe WPF application for the UI interaction.&lt;/p&gt;  &lt;p&gt;Spoke like that it seems an easy task to do…but believe me it’s not, so the first thing to do is look around for some framework that can you along the way, I knew it existed a ‘Composite Application Guidance for WPF’ from the P&amp;amp;P team (codename PRISM) and some days ago they released new version which start to have Silverlight support too (see &lt;a title="http://www.pnpguidance.net/Post/Prism2Drop1CompositeWPFSilverlightApplicationGuidancePatternsPractices.aspx" href="http://www.pnpguidance.net/Post/Prism2Drop1CompositeWPFSilverlightApplicationGuidancePatternsPractices.aspx"&gt;http://www.pnpguidance.net/Post/Prism2Drop1CompositeWPFSilverlightApplicationGuidancePatternsPractices.aspx&lt;/a&gt; for details).&lt;/p&gt;  &lt;p&gt;Actually they are introducing multi-targeting…that is structuring the project to isolate the completely the business code from the presentation code so you can easily have multiple UIs for the same application…PERFECT just what I needed…the only drawback is that the whole project still uses SL2B2 :) however I’ll give it a shot for sure to see if it completely fits my needs (hoping to not have to convert too many things).&lt;/p&gt;  &lt;p&gt;The second point to note is that a Silverlight application can become quite huge fast and it’s not very good to force the users to download all the modules during the startup (even the ones they do not use or the ones they’ll use at a later time), the first version of composite application for Silverlight (you can still get the source code from Codeplex as a spike from the main project) used the Unity IoC container to obtain the modularity, but didn’t supported the ‘deferred loading and registration of types’. That is you still had to download the whole application at start.&lt;/p&gt;  &lt;p&gt;So In the past days I was working on a wrapper over the default Unity IoC Container to add support for delayed download of assemblies and ‘deferred registration of types’, the goal is obtain a generic IoC layer (with the ability to swap the default container, cause sooner or later Spring.NET or Castle Windsor will also offer a Silverlight solution, NInject is also a good project, at that point one will choose the one he loves most) that is able to register Types from already downloaded and available assemblies so the types can be directly created, and to store the registration of types in assemblies that have to be downloaded in some internal structures.&lt;/p&gt;  &lt;p&gt;In this way when the code ask for a type the container is not able to create, we start download the related assembly, load it into the runtime, proceed to register the type into the IoC container, and finally we use the IoC to instantiate the type, all the next requests of the same time do not require to download the assembly (or the xap containing it) anymore. All of it it completely transparent to the caller which only ask the Container Wrapper to resolve a type. I call this process ‘deferred downloading and registration’.&lt;/p&gt;  &lt;p&gt;A basic version of this IoC wrapper with limited configuration functionality (it’s still too much tight coupled to Unity yet) is ready so expect an article ‘soon’.&lt;/p&gt;  &lt;p&gt;In the end I just want to thank the P&amp;amp;P team for their effort and Michael Sync for the porting of Unity to Silverlight.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:fa2b8399-8aad-427a-9680-a798a6ec2997" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Composite+Applications" rel="tag"&gt;Composite Applications&lt;/a&gt;,&lt;a href="http://technorati.com/tags/IoC" rel="tag"&gt;IoC&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-1"&gt;Silverlight, M-V-VM ... and IoC - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-2"&gt;Silverlight, M-V-VM … and IoC – part 2&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-mvvm-ioc-part-3"&gt;Silverlight, M-V-VM ... and IoC - part 3&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-navigation-framework-resolve-pages-ioc-container"&gt;Silverlight Navigation Framework: resolve the pages using an IoC container&lt;/a&gt; (04/08/2010)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/structura-alpha-version-silverlightwpf-line-business-application-framework"&gt;Structura (Alpha version) a Silverlight/WPF Line of Business Application Framework&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-pluggable-architectures-composite-applications-and-future-plans"&gt;&lt;strong&gt;More related document (43)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-pluggable-architectures-composite-applications-and-future-plans</guid><pubDate>Sun, 28 Sep 2008 21:20:44 GMT</pubDate><category>Silverlight</category><category>Composite applications</category><category>Ioc</category></item><item><title>Silverlight 2 RC0 – first problems due to undocumented breaking changes on disabled controls</title><description>&lt;p&gt;&lt;/p&gt;  &lt;p&gt;Yesterday I was about to use my brand new menu control in a new project, and after having recompiled and run the test with the brand new runtime…well…as usual the first problems arose.&lt;/p&gt;  &lt;p&gt;It seems that some undocumented changes were made again to the event bubbling and mechanics…so when I was moving the mouse over some disabled menu items I saw the whole popup disappear.&lt;/p&gt;  &lt;p&gt;The problem is caused by the fact that the menu is implemented like a bunch of buttons inside a StackPanel, the popup is closed when the MouseLeave event of the StackPanel is fired; with SL2RC0 when I move the mouse over a disabled button the StackPanel fire an ‘unwanted’ MouseLeave event too…this behaviour wasn’t present in SL2B2.&lt;/p&gt;  &lt;p&gt;For some more info look at my post in Silverlight Forum: &lt;a title="http://silverlight.net/forums/t/30778.aspx" href="http://silverlight.net/forums/t/30778.aspx"&gt;http://silverlight.net/forums/t/30778.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The ‘Breaking Changes’ document doesn’t mention anything about the ‘new’ event system, so we are left alone and have to experiment a bit.&lt;/p&gt;  &lt;p&gt;I have a workaround for this in mind but it will require a complete rework of the Menu Control, stay tuned for updates.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:31e8c424-0843-41bf-b9ad-14a25d2f4bf9" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/disabled+control" rel="tag"&gt;disabled control&lt;/a&gt;,&lt;a href="http://technorati.com/tags/breaking+changes" rel="tag"&gt;breaking changes&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control"&gt;Silverlight: Dropdown Menu Control&lt;/a&gt; (10/07/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control"&gt;Silverlight: how to build a simple Menu Control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed"&gt;Silverlight Pagination Control – bug fixed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls"&gt;&lt;strong&gt;More related document (42)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls</guid><pubDate>Sun, 28 Sep 2008 01:43:55 GMT</pubDate><category>Control</category><category>Menu</category><category>Silverlight</category><category>Disabled control</category><category>Breaking changes</category></item><item><title>Silverlight 2 RC0 Available</title><description>&lt;p&gt;Finally we have new update of the runtime and of the development tools that will bring us closer to the final release, for more info:&lt;/p&gt;  &lt;p&gt;&lt;a title="http://silverlight.net/GetStarted/sl2rc0.aspx" href="http://silverlight.net/GetStarted/sl2rc0.aspx"&gt;http://silverlight.net/GetStarted/sl2rc0.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I’ll start to convert all my projects this afternoon, note that this update is devoted to developers only the runtime will not be available to all users yet by the automated installation process, you have to install it manually :D&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-20-rtw-silently-released"&gt;Silverlight 2.0 RTW silently released&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-datagrid-updated"&gt;Silverlight Datagrid Updated&lt;/a&gt; (01/12/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/days-sign-12th-dotnetmarche-community-tour-2009-workshop"&gt;Last few days to sign up for the 12th DotNetMarche / Community Tour 2009 workshop&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/getting-ready-for-the-12th-dotnetmarche-workshop-community-tour-2009"&gt;Getting ready for the 12th DotNetMarche Workshop “Community Tour 2009”&lt;/a&gt; (12/03/2009)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/workshop-silverlight-action-starting-point-line-business-applications"&gt;Workshop: ‘Silverlight in Action - a starting point for Line of Business Applications’&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-2-rc0-available"&gt;&lt;strong&gt;More related document (41)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-2-rc0-available</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-2-rc0-available#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-2-rc0-available</guid><pubDate>Fri, 26 Sep 2008 20:59:49 GMT</pubDate><category>Silverlight</category></item><item><title>Silverlight: how to build a simple Menu Control</title><description>&lt;p&gt;In my current project I needed to use a dynamic Menu Control (a completely declarative approach hardcoding the structure in XAML wasn’t a good fit for my application cause I need to dynamically add, remove, enable and disable menu items). Since Silverlight doesn’t support a menu control yet I had 3 options:&lt;/p&gt;  &lt;p&gt;1- look for a 3rd party component (which actually can be an expensive solution if you need only a single control)&lt;/p&gt;  &lt;p&gt;2- look around the web to see if there’s something free to use as a starting point&lt;/p&gt;  &lt;p&gt;3- build it from scratch.&lt;/p&gt;  &lt;p&gt;I tryed the way number 2 first but I wasn’t able to find anything, so I gathered some information and started to build it from ground up.&lt;/p&gt;  &lt;p&gt;Control requirements:&lt;/p&gt;  &lt;p&gt;1- a basic menu control which will expose Add() and Remove() functions to manage menuitems.&lt;/p&gt;  &lt;p&gt;2- the menu will be hosted in a menu bar control which will display the menu items in an horizontal fashion, each ‘level 0’ menu can have sub items (that is the drop down with some menu items in it), a sub menu cannot have children (yet).&lt;/p&gt;  &lt;p&gt;Here’s the final result at this stage:    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/09/silverlightmenu1.jpg"&gt;&lt;img title="SilverlightMenu1" style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="193" alt="SilverlightMenu1" src="/UserFiles/Guardian/2008/09/silverlightmenu1-thumb.jpg" width="208" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;    &lt;p&gt;Let’s have a look at the solution.&lt;/p&gt;    &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/09/silverlightmenu2.jpg"&gt;&lt;img title="SilverlightMenu2" style="border-right: 0px; border-top: 0px; margin: 0px 20px 0px 0px; border-left: 0px; border-bottom: 0px" height="222" alt="SilverlightMenu2" src="/UserFiles/Guardian/2008/09/silverlightmenu2-thumb.jpg" width="174" align="left" border="0" /&gt;&lt;/a&gt; &lt;/p&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;The final control is actually composed of 3 XAML files and 2 support files:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;MainMenu.xaml – contains the definition of the menu bar that will host all the ‘Level 0’ menu items, actually it’s nothing more than a stackpanel with horizontal orientation.&lt;/li&gt;    &lt;li&gt;Menu.xaml – contains the definition of Menu Items hosted in the MainMenu control, the menu is actually just a button contained in a Grid, its template was completely redefined using blend to obtain a more ‘flat’ appearence.&lt;/li&gt;    &lt;li&gt;SubMenu.xaml – contains the Menu Items that can be nested in a Menu control, again it’s a simple button with its template redefined.&lt;/li&gt;    &lt;li&gt;PopupProvider – defines the class that manages the popup menu display logic, the original code was taken from Chuck Kinnan article (&lt;a title="http://www.codeproject.com/KB/silverlight/Silverlight_Popup_Logic.aspx" href="http://www.codeproject.com/KB/silverlight/Silverlight_Popup_Logic.aspx"&gt;http://www.codeproject.com/KB/silverlight/Silverlight_Popup_Logic.aspx&lt;/a&gt;); some fixes were made to it.&lt;/li&gt;    &lt;li&gt;MenuSupport – contains interfaces declaration and some support classes.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Going on a complete code analysys is beyond the scope of this article, mainly cause it’s extremly simple to follow, so just focus on why we made soem choices:&lt;/p&gt;  &lt;p&gt;We have different classes for ‘Level 0’ and ‘Level 1’ menu items cause we need different graphical representation for them, this way we leave some room for customize it.&lt;/p&gt;  &lt;p&gt;Why use buttons: mainly cause they already support all the state needed by a menu: normal, hover and pressed state (some states were removed like the focus ones).&lt;/p&gt;  &lt;p&gt;The menu is actually displayed using a Popup which contains a StackPanel with vertical orientation, both the Popup and the StackPanel are created by code in the AddMenu() function exposed by the Menu control for two reasons: 1- to save resources (if a menu do not have childern it’s useless to create them); 2- it seems there’s a bug of some sort in how the silverlight runtime manages the Popups, if they were declared in Xaml, with a name given to them, and you dynamically adds the controls to the bar when you try to open 2 or more popups at the same that have the same name (even if they have different parents in the visualization tree) you get an exception, this doesn’t happens if you create the controls by code.&lt;/p&gt;  &lt;p&gt;here’s the AddMenu() function&lt;/p&gt;  &lt;p&gt;   &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6a1a6527-0996-464d-9930-6a088ee44f0c" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; AddSubmenu(SubMenu sm)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (p &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
            {
                p &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; System.Windows.Controls.Primitives.Popup();
                pnl &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; StackPanel();
                p.Child &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; pnl;
                MenuLayout.Children.Add(p);
            }
            pnl.Children.Add(sm);
            sm.ParentMenu &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            EnablePopupProvider();
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Menu and SubMenu items have a ParentMenu property to trace who’s his parent cause when you click on a SubMenu you have to close the popup which is holded by it’s parent control; the first attempt to identify a parent menu of a submenu was made by using a while cycle looking at the ‘Parent’ propery of each control that is the visualization tree until we found a ‘Menu’ or ‘SubMenu’ control, so for a Level 1 SubMenu the sequence could have been something like this:&lt;/p&gt;

&lt;p&gt;MenuButton –&amp;gt; Grid –&amp;gt; StackPanel –&amp;gt; Popup –&amp;gt; Menu Control&lt;/p&gt;

&lt;p&gt;but it came out that the parent property of a StackPanel inside a Popup control returned null..so we were forced to add a ParentMenu property and populate it on the Add() and Remove() functions.&lt;/p&gt;

&lt;p&gt;The last thing to note was a ‘Bug’ in the state management of the control, when you use a menu you usually open it up by clicking on the menu voice which will open the popup, then you select a subitem hovering on it with the mouse (the control changes its state to ‘mouseover’) then you click on it (‘pressed’ state); at this point, on the internal button click event 2 things happens: the subitem ask it’s parent to close the menu popup and a MenuClick event is raised for the application to handle it.&lt;/p&gt;

&lt;p&gt;But the popup closes itself when the mouse is STILL over the submenu item and the internal control will retain its ‘mouseover’ status (the menu is highlighted) and when you open the popup again you get the last item you clicked on still highlighted.&lt;/p&gt;

&lt;p&gt;The solution is to ask the VisualStateManager to change the state of each control to ‘Normal’ each time the popup is shown, so we add the call on the Loaded event (which is called every time we open the popup) of the SubItem control, here’s the code:&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:047a5b42-e665-4ea9-9d2d-b062000b4a96" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu_Loaded(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, RoutedEventArgs e)
        {
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;force the visualization to switch to the normal state to avoid the
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;hovering bug: the control is in the hover state when we ask to close 
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;the popup that contains it, if we do not change the state manually
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;it will retain the 'mouse hover' status&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (IsEnabled)
                VisualStateManager.GoToState(MenuButton, &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Normal&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;true&lt;/span&gt;&lt;span style="color: #000000;"&gt;);                
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;In the end, let’s have a look at how you can use it:&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:bfb9e877-8154-44ea-8507-833691437b62" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;Dynamically buildup a menu&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            Menu m1 &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Menu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Test1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            m1.AddSubmenu(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Sub1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
            m1.AddSubmenu(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Long Sub1 string&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
            SubMenu sb1 &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Disabled Sub1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            sb1.IsEnabled &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;false&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            m1.AddSubmenu(sb1);
            sb1 &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Click Me! Sub1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            sb1.MenuClick &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; MenuClickEventHandler(sb1_MenuClick);
            m1.AddSubmenu(sb1);
            Menu.AddMenu(m1);
            Menu m2 &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Menu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Disabled Test2&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            m2.IsEnabled &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;false&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            m2.AddSubmenu(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Sub2&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
            m2.AddSubmenu(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Sub2&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
            m2.AddSubmenu(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Sub2&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
            Menu.AddMenu(m2);
            Menu m3 &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Menu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Test3&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            m3.AddSubmenu(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Sub3&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
            m3.AddSubmenu(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Sub3&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
            SubMenu sb3 &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SubMenu(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Sub3&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            m3.AddSubmenu(sb3);
            Menu.AddMenu(m3);&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This is only the first version of this control, and there’s room for LOTS of improvements (like adding a child menu to each submenu; and a better templating system), but nonetheless it’s a good starting point for your own menu control.&lt;/p&gt;

&lt;p&gt;Example Solution: &lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:24aea43f-e725-4c8c-8c7b-1dc3792d0f99" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/09/silverlightmenu.zip" target="_self"&gt;SilverlightMenu.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:2592db9e-6199-4379-b92a-7cdee6c8cd49" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Menu" rel="tag"&gt;Menu&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Main+Menu" rel="tag"&gt;Main Menu&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Drop+Down" rel="tag"&gt;Drop Down&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Control" rel="tag"&gt;Control&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control"&gt;Silverlight: Dropdown Menu Control&lt;/a&gt; (10/07/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-power-of-canvas"&gt;Silverlight: The Power of &lt;Canvas&gt;&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-how-to-build-a-simple-menu-control"&gt;&lt;strong&gt;More related document (42)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control</guid><pubDate>Thu, 25 Sep 2008 21:33:03 GMT</pubDate><category>Control</category><category>Menu</category><category>Silverlight</category><category>Window</category><category>Xaml</category><category>Main menu</category><category>Drop down</category></item><item><title>Silverlight Pagination Control – bug fixed</title><description>&lt;p&gt;&lt;/p&gt;  &lt;p&gt;There were a couple of bugs in how the number of pages were computed, the problem is now solved and the solution is updated, see the article at: &lt;a href="http://www.primordialcode.com/index.php/2008/09/08/silverlight-a-generic-pagination-control/"&gt;Silverlight: a generic Pagination Control&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I start to believe that I really have to test my controls a little more before posting them :D, consider also that I’m using most of my code in production applications, so these small project are always subject to changes and fix as new feature can be introduced from time to time.&lt;/p&gt;  &lt;p&gt;If you try my code and find some bug in it, don’t be shy and don’t hesitate to post your fixes they can save me some time during everyday’s life.&lt;/p&gt;  &lt;p&gt;Maybe can be useful to have a page on the site in which I’ll regroup all the small projects with their corresponding version number…but to be honest I’m a bit lazy to do it right now.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:d82a409b-9b22-4452-beaa-9678ae6ac2e9" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Pagination" rel="tag"&gt;Pagination&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control"&gt;Silverlight: a generic Pagination Control&lt;/a&gt; (09/08/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-2-rc0-first-problems-due-to-undocumented-braking-changes-on-disabled-controls"&gt;Silverlight 2 RC0 – first problems due to undocumented breaking changes on disabled controls&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window"&gt;Silverlight: simulate a ‘Windows’ desktop application - part 2 (Dragging Window)&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-pagination-control-bug-fixed"&gt;&lt;strong&gt;More related document (44)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed</guid><pubDate>Fri, 19 Sep 2008 18:56:24 GMT</pubDate><category>Control</category><category>Silverlight</category><category>Pagination</category></item><item><title>DotNetKicks and DZone Live Writer plugins</title><description>&lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Beeing a noob blogger as I am, I continously discover something new. Some time ago my friend Alkampfer introduced me to the DotNetKicks world, it’s an aggregator site for those who don’t know used mainly by developers. Recently I discovered DZone which do the same job. Now I use them both regularly to keep trace of what happens around and find interesting articles to read.&lt;/p&gt;  &lt;p&gt;But adding the code to link manually both can be boring, so I want to thank John Papa for his great Live Writer plugins that covers both worlds, you can reach his posts on the plugins starting from this link: &lt;a title="http://johnpapa.net/all/dzone-plugin-for-windows-live-writer/" href="http://johnpapa.net/all/dzone-plugin-for-windows-live-writer/"&gt;http://johnpapa.net/all/dzone-plugin-for-windows-live-writer/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Using the updated versions of those plugin + the new beta of Live Writer both the anchors will be added at the post footer automatically without anything else to do…that’s a lot of time saved.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/dotnetkicks-and-dzone-live-writer-plugins</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/dotnetkicks-and-dzone-live-writer-plugins#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/dotnetkicks-and-dzone-live-writer-plugins</guid><pubDate>Fri, 12 Sep 2008 20:06:07 GMT</pubDate></item><item><title>Silverlight: a generic Pagination Control</title><description>&lt;p&gt;The default silverlight controls like DataGrid and ItemsControl come without a default paging mechanism like we have in ASP.NET, so this article will be forcused in developing a generic Pager Control in Silverlight. This is what we want to obtain:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/09/silverlightpagination1.jpg"&gt;&lt;img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="293" alt="SilverlightPagination1" src="/UserFiles/Guardian/2008/09/silverlightpagination1-thumb.jpg" width="204" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I was lurking around looking for some informations on ASP.NET MVC, and I found two interesting articles on how to do pagination in ASP.NET MVC (&lt;a title="http://blog.wekeroad.com/2007/12/10/aspnet-mvc-pagedlistt/" href="http://blog.wekeroad.com/2007/12/10/aspnet-mvc-pagedlistt/"&gt;http://blog.wekeroad.com/2007/12/10/aspnet-mvc-pagedlistt/&lt;/a&gt; and &lt;a title="http://code-inside.de/blog-in/2008/04/08/aspnet-mvc-pagination-view-user-control/" href="http://code-inside.de/blog-in/2008/04/08/aspnet-mvc-pagination-view-user-control/"&gt;http://code-inside.de/blog-in/2008/04/08/aspnet-mvc-pagination-view-user-control/&lt;/a&gt;), the tecnique seemed inetersting and I decided to use it in my pager control.&lt;/p&gt;  &lt;p&gt;The control will be divided in 2 major areas, the pager itself a series of helper classes that will give us different views of the data (a single 'page' of data can be tought as a view) and the selection control (which will use the pager) that will display a series of buttons to choose which page of data to display.&lt;/p&gt;  &lt;p&gt;Let's start with the pager, since the control do not have to know the exact type of the data for which he will provide the paging features we need to define two interfaces: one that represent the view of the data we want to display (the actual page displayed) and another that will be the functions exposed by the pager itself.&lt;/p&gt;  &lt;p&gt;Here we have some snippets of code taken from the two interfaces:&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c1c526c8-50c7-4d8d-b393-961af8ab9908" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Generic functions exposed by the view, the actual implementation
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; of this interface will be based on a list class to hold also the 
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; data of the view.
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;interface&lt;/span&gt;&lt;span style="color: #000000;"&gt; IPagedList : System.Collections.IList
    {
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; total number of records
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; TotalCount { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; index of the page represented by this view
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; PageIndex { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Size of the page
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; PageSize { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }

        ...&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; do a previous page exists?
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; IsPreviousPage { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; do a next page exist?
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;bool&lt;/span&gt;&lt;span style="color: #000000;"&gt; IsNextPage { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt;; }

        ...
    }

    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; functions exposed by the pager, they will build a view over the data
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;interface&lt;/span&gt;&lt;span style="color: #000000;"&gt; IPager
    {
        IPagedList ToPageList(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; index);

        IPagedList ToPageList(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; index, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; pagesize);
    }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;We need this level of abstraction cause we provide a strongly type implementation of the classes using Generics. All the paging job is done in the constructors of the view, here we take advantage of the current implementation of List&amp;lt;T&amp;gt; and IQuerable&amp;lt;T&amp;gt;:&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9955bc61-7497-4678-a7d4-9f8349e83c3a" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; The physical implementatio of the view, it's based on a List&lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; to also hold the data
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; the source can be a List of anything or the result of a Linq query
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; PagedList&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; : List&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;, IPagedList
    {
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; PagedList(IQueryable&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; source, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; index, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; pageSize)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._TotalCount &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; source.Count();
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._PageSize &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; pageSize;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._PageIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; index;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.AddRange(source.Skip(index &lt;/span&gt;&lt;span style="color: #000000;"&gt;*&lt;/span&gt;&lt;span style="color: #000000;"&gt; pageSize).Take(pageSize).ToList());
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; PagedList(List&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; source, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; index, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; pageSize)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._TotalCount &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; source.Count();
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._PageSize &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; pageSize;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;._PageIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; index;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.AddRange(source.Skip(index &lt;/span&gt;&lt;span style="color: #000000;"&gt;*&lt;/span&gt;&lt;span style="color: #000000;"&gt; pageSize).Take(pageSize).ToList());
        }
...&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; TotalCount
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt; { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; _TotalCount; }
        }
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; _TotalCount;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;and :&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:46030678-f8b9-4e9c-ad4a-883e20739c53" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; extremely simple implementation of the pager, 
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; given a list of data or a Linq query
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; this class will build a series of views over it
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; Pager&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; : IPager
    {
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Pager(List&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; source)
        {
            lSource &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; source;
        }
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; List&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; lSource;

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Pager(IQueryable&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; source)
        {
            qSource &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; source;
        }
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; IQueryable&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; qSource;

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;const&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; DefaultPageSize &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;;

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; IPagedList ToPageList(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; index)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (lSource &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; PagedList&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;(lSource, index, DefaultPageSize);

            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; PagedList&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;(qSource, index, DefaultPageSize);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; IPagedList ToPageList(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; index, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; pagesize)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (pagesize &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                pagesize &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; DefaultPageSize;

            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (lSource &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; PagedList&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;(lSource, index, pagesize);

            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; PagedList&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;T&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;(qSource, index, pagesize);
        }
    }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;That's all for our set of helpers classes, on to the Control itself now; This first implementation will be extremely simple, The basic idea is to use a StackPanel as the main container and to dynamically add buttons to it, we will have 1 button for each page, plus button for previous, next, first and last page selection.&lt;/p&gt;

&lt;p&gt;This control will act as a DataSource (or ItemsSource) for other controls able to render lists of data, so we need a way to specify to which control it will be linked, for the purpose we define a 'LinkedControl' property which will be setted to the name of the control we want to use to display the paginated data. The control has to support the 'ItemsSource' property so we need to do a check:&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:49545001-0a6a-4bbe-80dd-c618c07f4e95" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;...
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; 
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gets or sets the LinkedControl possible Value of the Control object.
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Control LinkedControl
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt; { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; (Control)GetValue(LinkedControlProperty); }
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            {
                &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;check if the control supports the items source property&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;                _itemsSource &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; value.GetType().GetProperty(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;ItemsSource&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (_itemsSource &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;throw&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; ArgumentException(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;ItemsSource not supported&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
                SetValue(LinkedControlProperty, value);
            }
        }

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; 
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Identifies the LinkedControl dependency property.
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;static&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;readonly&lt;/span&gt;&lt;span style="color: #000000;"&gt; DependencyProperty LinkedControlProperty &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                        DependencyProperty.Register(
                                &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;LinkedControl&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;,
                                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;typeof&lt;/span&gt;&lt;span style="color: #000000;"&gt;(Control),
                                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;typeof&lt;/span&gt;&lt;span style="color: #000000;"&gt;(SilverlightPager),
                                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; PropertyMetadata(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;));

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; PropertyInfo _itemsSource;
...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;The control will also be able to support the use of templates to define the graphical representations of the buttons, so we'll have two dependancy properties (PagerButtonStyle and PagerSelectedButtonStyle) to set the staticresources to use for the buttons.&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:650d3091-106f-4b02-ab97-7548ecf7086e" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;...
&lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; 
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gets or sets the PagerButtonStyle possible Value of the Style object.
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style PagerButtonStyle
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt; { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; (Style)GetValue(PagerButtonStyleProperty); }
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt; { SetValue(PagerButtonStyleProperty, value); }
        }

        &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Using a DependencyProperty as the backing store for PagerButtonStyle.  This enables animation, styling, binding, etc...&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;static&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;readonly&lt;/span&gt;&lt;span style="color: #000000;"&gt; DependencyProperty PagerButtonStyleProperty &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt;
             DependencyProperty.Register(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;PagerButtonStyle&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;typeof&lt;/span&gt;&lt;span style="color: #000000;"&gt;(Style), &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;typeof&lt;/span&gt;&lt;span style="color: #000000;"&gt;(SilverlightPager), &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; PropertyMetadata(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;));


        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; 
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gets or sets the PagerSelectedButtonStyle possible Value of the Style object.
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style PagerSelectedButtonStyle
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt; { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; (Style)GetValue(PagerSelectedButtonStyleProperty); }
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt; { SetValue(PagerSelectedButtonStyleProperty, value); }
        }
...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;The main core function actually gets the data for the view to visualize and recreate the whole sets of buttons everytime you select a new page:&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:53984f47-60b4-4fd1-846c-8245b4613314" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:White;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; buildup the pager aligning the buttons
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetDataAndBuildPager()
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (_Source &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;throw&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; ArgumentException(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;No pager setted&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;Get the page data&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            IPagedList page &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; _Source.ToPageList(_CurrentPageIndex, PageSize);
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;Build the layout&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            LayoutRoot.Children.Clear();
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;First button&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            Button b &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button();
            b.Tag &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            b.IsEnabled &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;!&lt;/span&gt;&lt;span style="color: #000000;"&gt;page.IsFirst;
            b.Content &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            b.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(b_Click);
            SetButtonStyle(b, PagerButtonStyle);
            LayoutRoot.Children.Add(b);
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;Prev button&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            b &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button();
            b.Tag &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; _CurrentPageIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;-&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;1&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            b.IsEnabled &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; page.IsPreviousPage;
            b.Content &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            b.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(b_Click);
            SetButtonStyle(b, PagerButtonStyle);
            LayoutRoot.Children.Add(b);
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt;&lt;span style="color: #000000;"&gt; (&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; i &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; Math.Max(&lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;, _CurrentPageIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;-&lt;/span&gt;&lt;span style="color: #000000;"&gt; PageInterval); i &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; Math.Min(page.TotalPages, _CurrentPageIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; PageInterval); i&lt;/span&gt;&lt;span style="color: #000000;"&gt;++&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
            {
                b &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button();
                b.Tag &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; i;
                b.Content &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; i.ToString();
                b.IsEnabled &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;true&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
                LayoutRoot.Children.Add(b);
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; ((i &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; page.PageIndex) &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style="color: #000000;"&gt; (PagerSelectedButtonStyle &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;))
                    SetButtonStyle(b, PagerSelectedButtonStyle);
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;else&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                {
                    b.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(b_Click);
                    SetButtonStyle(b, PagerButtonStyle);
                }

            }
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;Next Button&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            b &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button();
            b.Tag &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; _CurrentPageIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;1&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            b.IsEnabled &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; page.IsNextPage;
            b.Content &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            b.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(b_Click);
            SetButtonStyle(b, PagerButtonStyle);
            LayoutRoot.Children.Add(b);
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;Last Button&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            b &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button();
            b.Tag &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; page.TotalPages;
            b.IsEnabled &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;!&lt;/span&gt;&lt;span style="color: #000000;"&gt;page.IsLast;
            b.Content &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            b.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(b_Click);
            SetButtonStyle(b, PagerButtonStyle);
            LayoutRoot.Children.Add(b);

            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;update the linked control&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            SetItemsSource(page);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; b_Click(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, RoutedEventArgs e)
        {
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;set the new current page&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            _CurrentPageIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; (&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt;)(((Button)sender).Tag);
            GetDataAndBuildPager();
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;This is only a first release and the control itself is far from beeing optimized, it can be a starting point for deriving your own Pager control, The test solution accluded shows an example of paginating a Datagrid and an ItemsControl.&lt;/p&gt;

&lt;p&gt;Example Solution: &lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:aa33dbe4-0247-401e-92b7-1147d9d7f5ba" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/09/silverlightpagination.zip" target="_self"&gt;SilverlightPagination.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:a68539dc-20ff-48c3-a5d2-5fadba3d2cd5" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tag: &lt;a href="http://technorati.com/tags/Silverlight" rel="tag"&gt;Silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Pagination" rel="tag"&gt;Pagination&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Datagrid" rel="tag"&gt;Datagrid&lt;/a&gt;,&lt;a href="http://technorati.com/tags/ItemsControl" rel="tag"&gt;ItemsControl&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-pagination-control-bug-fixed"&gt;Silverlight Pagination Control – bug fixed&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-2-dragging-window"&gt;Silverlight: simulate a ‘Windows’ desktop application - part 2 (Dragging Window)&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-controls-scrollviewer-horizontal-resize-layout-bug-related-workaround"&gt;Silverlight: Controls inside ScrollViewer - horizontal resize layout bug and related workaround&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-a-generic-pagination-control"&gt;&lt;strong&gt;More related document (44)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-a-generic-pagination-control</guid><pubDate>Tue, 09 Sep 2008 02:29:48 GMT</pubDate><category>Control</category><category>Silverlight</category><category>Window</category><category>Pagination</category><category>Datagrid</category><category>Itemscontrol</category></item><item><title>GMail: Account Suspended = Account Forever Lost</title><description>&lt;p&gt;In the first days of August I have created a brand new GMail account to use some of thervices Google provided...15 to 20 days later I had to access that account via web interface...unfortunately happened that I had forgot the password and after some attempt the system blocked my account.&lt;/p&gt;  &lt;p&gt;I tried every so-called password recovery procedure that google has, tried to fill every form they provide with all the in formation I could remind and this was their automated reply:&lt;/p&gt;  &lt;p&gt;&amp;quot;Thank you for your report. The account in question is disabled, and we   &lt;br /&gt;can't provide you with access to it. For more information about disabled    &lt;br /&gt;accounts, please visit the following link in the Google Accounts Help    &lt;br /&gt;Center: ... etc etc...&amp;quot;&lt;/p&gt;  &lt;p&gt;which basically brought me to the same password recovery shit tried before.&lt;/p&gt;  &lt;p&gt;I tried to look in their user assistance forum and saw that many many people have the same problem...after an account block it seems there's no way to resume it, writing to the assistance center is pointless..they don't reply anyway.&lt;/p&gt;  &lt;p&gt;As you can immagine I'm a bit disappointed by the low quality of the service provided by google with GMail, I have many free emails account made with different companies that offers similar services and it never happened something like this.&lt;/p&gt;</description><link>http://www.primordialcode.com/blog/post/gmail-account-suspended-account-forever-lost</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/gmail-account-suspended-account-forever-lost#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/gmail-account-suspended-account-forever-lost</guid><pubDate>Wed, 03 Sep 2008 18:49:58 GMT</pubDate></item><item><title>Silverlight: Custom Buttons with Templates</title><description>&lt;p&gt;Sometimes you want to define a consistent look for all you application and maybe you completely replace the template of a control (lets say...a button :D), then you want to use the same template with small variations (colors or images for example).&lt;/p&gt;  &lt;p&gt;Lets say we have realized the usual round button with a gradient background and that you want to use different colors which have different meanings for the interface, the same principles apply to any other control or custom controls.&lt;/p&gt;  &lt;p&gt;Actually you can do it all just defining styles in the App.xaml file, like this:&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:20b8afb3-4569-45db-a58b-dbd146ab807e" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;RadialGradientBrush x:Name&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;RedRadialBrush&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; GradientOrigin&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;0.2,0.2&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;GradientStop Color&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;#FFFFFFFF&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;GradientStop Color&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Red&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;  Offset&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;RadialGradientBrush&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;

        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Style x:Key&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;RoundTextButton&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; TargetType&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Button&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter Property&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Background&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Value&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource GrayRadialBrush}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter Property&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Width&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Value&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;30&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter Property&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Height&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Value&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;30&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter Property&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;FontSize&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Value&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;10&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;

            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter Property&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Template&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter.Value&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                    &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;ControlTemplate TargetType&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Button&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Grid Width&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{TemplateBinding Width}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Height&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{TemplateBinding Height}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;vsm:VisualStateManager.VisualStateGroups&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;vsm:VisualStateGroup x:Name&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;FocusStates&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                                    &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;vsm:VisualState x:Name&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Unfocused&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                                    ...
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;and you can instantiate some on a page like this:&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f57f0029-f93d-4248-9b73-0499ef947f41" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Grid x:Name&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;LayoutRoot&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;White&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel Orientation&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Horizontal&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit2&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource YellowRadialBrush}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit3&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource GreenRadialBrush}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit4&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RedRadialBrush}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            ...
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
    &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;Grid&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;The code above produce this:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/09/custombuttons1.jpg"&gt;&lt;img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="184" alt="CustomButtons1" src="/UserFiles/Guardian/2008/09/custombuttons1-thumb.jpg" width="205" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;4 small round buttons with animations when your mause move over them or when you press them.&lt;/p&gt;

&lt;p&gt;What we see here is that the xaml code of the page looks a little bloated and not very well readable, plus changing a single resource as the background color of the buttons in code is a little messy cause you have to create a new brush consistent with the previous ones.&lt;/p&gt;

&lt;p&gt;What we can do is define our own Button control (which inherits from Button), define the properties we want to access directly (as dependancy properties to support binding and templating) and then move the master template in the Generic.xaml file. The button class is straightforward and doesn't need many comments:&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:52d2892a-71b2-4131-8405-971d59ff5516" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; CustomButton : Button, INotifyPropertyChanged
    {
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; CustomButton() : &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;base&lt;/span&gt;&lt;span style="color: #000000;"&gt;()
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.DefaultStyleKey &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;typeof&lt;/span&gt;&lt;span style="color: #000000;"&gt;(CustomButton);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;override&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; OnApplyTemplate()
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;base&lt;/span&gt;&lt;span style="color: #000000;"&gt;.OnApplyTemplate();

            GradientStop gs &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetTemplateChild(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;EllipseBackGroundColor&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; GradientStop;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (gs &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                gs.Color &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; BackgroundColor;
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;#region&lt;/span&gt;&lt;span style="color: #000000;"&gt; BackgroundColor&lt;/span&gt;&lt;span style="color: #000000;"&gt;

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; 
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gets or sets the BackgroundColor possible Value of the Color object.
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Color BackgroundColor
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt; { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; (Color)GetValue(BackgroundColorProperty); }
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt; { SetValue(BackgroundColorProperty, value); }
        }

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; 
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Identifies the BackgroundColor dependency property.
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;static&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;readonly&lt;/span&gt;&lt;span style="color: #000000;"&gt; DependencyProperty BackgroundColorProperty &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                        DependencyProperty.Register(
                                &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;BackgroundColor&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;,
                                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;typeof&lt;/span&gt;&lt;span style="color: #000000;"&gt;(Color),
                                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;typeof&lt;/span&gt;&lt;span style="color: #000000;"&gt;(CustomButton),
                                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; PropertyMetadata(OnBackgroundColorPropertyChanged));

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; BackgroundColorProperty property changed handler. 
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;param name=&amp;quot;d&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;CustomButton that changed its BackgroundColor.&lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;DependencyPropertyChangedEventArgs.&lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;static&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; OnBackgroundColorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            CustomButton _CustomButton &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; d &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; CustomButton;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (_CustomButton &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
            {
                OnPropertyChanged(_CustomButton, &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;BackgroundColor&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            }
        }
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;#endregion&lt;/span&gt;&lt;span style="color: #000000;"&gt; BackgroundColor&lt;/span&gt;&lt;span style="color: #000000;"&gt;

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;#region&lt;/span&gt;&lt;span style="color: #000000;"&gt; INotifyPropertyChanged Members&lt;/span&gt;&lt;span style="color: #000000;"&gt;
    }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The DefaultStyleKey propery setted in the constructor tells what is the default style to load from the Generic.xaml file.&lt;/p&gt;

&lt;p&gt;The interesting thing happens in the OnApplyTemplate() functions; here since we cannot use TemplateBinding to change the color of the GradientStop used in the RadialBrush that defines the background color of the button, we have to access to the element in code and change its value 'at runtime'.&lt;/p&gt;

&lt;p&gt;I modified my xaml like this:&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:ef4a4feb-0861-4371-8300-5b01c0b8b536" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Grid x:Name&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;LayoutRoot&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;White&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel Orientation&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Horizontal&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit2&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource YellowRadialBrush}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit3&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource GreenRadialBrush}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Button Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit4&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Style&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RoundTextButton}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Background&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;{StaticResource RedRadialBrush}&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel Orientation&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Horizontal&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;ctrl:CustomButton Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;ctrl:CustomButton Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; BackgroundColor&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Yellow&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;ctrl:CustomButton Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; BackgroundColor&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Green&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;ctrl:CustomButton Content&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Edit1&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; BackgroundColor&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Red&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
    &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #000000;"&gt;Grid&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;But this isnt enough yet since the first time I run the code I saw that the buttons weren't working well:&lt;/p&gt;

&lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/09/custombuttons2.jpg"&gt;&lt;img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="107" alt="CustomButtons2" src="/UserFiles/Guardian/2008/09/custombuttons2-thumb.jpg" width="142" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The 4 buttons were rendered circular but their color was not right and the animation didnt worked too...it tooks me a while (and the help of &lt;a href="http://blogs.msdn.com/delay/archive/2008/06/06/continuing-access-to-silverlight-2-s-generic-xaml-resources-silverlightdefaultstylebrowser-updated-for-silverlight-2-beta-2.aspx"&gt;SilverlightDefaultStyleBrowser&lt;/a&gt;) to realize that by default every control is created in a DISABLED state and that you have to enable it (in the xaml style or in code). &lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:376e1e5f-40b7-4822-80f7-a5af80a6fbe4" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Style TargetType&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;ctrl:CustomButton&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;!--&lt;/span&gt;&lt;span style="color: #000000;"&gt; key lines to enable the control &lt;/span&gt;&lt;span style="color: #000000;"&gt;--&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter Property&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;IsEnabled&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Value&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;true&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Setter Property&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;IsTabStop&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; Value&lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;true&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;/&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;After placing the right lines in the default style in Generic.xaml it all finally worked and you can now have your buttons working with a more compact and readable xaml.&lt;/p&gt;

&lt;p&gt;Example Solution: &lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:dcd97132-3fce-475c-99c0-7561495955eb" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/09/custombuttons.zip" target="_self"&gt;CustomButtons.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:bc60873f-4e07-4f2d-8a41-548495dfdc3c" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tag: &lt;a href="http://technorati.com/tags/silverlight" rel="tag"&gt;silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/custom%20control" rel="tag"&gt;custom control&lt;/a&gt;,&lt;a href="http://technorati.com/tags/template" rel="tag"&gt;template&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-power-of-canvas"&gt;Silverlight: The Power of &lt;Canvas&gt;&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control"&gt;Silverlight: Dropdown Menu Control&lt;/a&gt; (10/07/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control"&gt;Silverlight: how to build a simple Menu Control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-custom-buttons-with-templates"&gt;&lt;strong&gt;More related document (46)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates</guid><pubDate>Mon, 01 Sep 2008 21:12:48 GMT</pubDate><category>Control</category><category>Silverlight</category><category>Window</category><category>Xaml</category><category>Custom control</category><category>Template</category></item><item><title>Silverlight: simulate a 'Windows' desktop application - part 1</title><description>&lt;p&gt;As my first real experiment in building a Silverlight control, I wanted to realize something that could permit me to offer to the users a windows-like experience application hosted in the browser, so I started wondering how difficult was to implement a control that could host other silverlight control and even pages, this control should then act as a 'real' window and can be dragged on the surface (over other controls) and with resizing and closing capabilities, plus I want to give the Window a look similar to WIndows Vista Aero Desktop windows.&lt;/p&gt;  &lt;p&gt;To be honest Silverlight is very flexible and its templating capabilities made the task a lot simplier than I tought at start, here's what we want to obtain:&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/08/simulatingwindows1.jpg"&gt;&lt;img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="291" alt="SimulatingWindows1" src="/UserFiles/Guardian/2008/08/simulatingwindows1-thumb.jpg" width="356" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;This 'tutorial' will be divided in a series of 3 articles that describe:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;the basic idea and the creation of the control.&lt;/li&gt;    &lt;li&gt;implementation of dragging capabilities.&lt;/li&gt;    &lt;li&gt;implementation of resizing capabilities.&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;The source code that comes with each part will however include the complete example solution (since I'm too lazy to divide it in parts), so let's get started.&lt;/p&gt;  &lt;p&gt;There are a bunch of articles out there that describes how to create a user control and how to skin it so I won't dig deep in that; one of the best and very simple to follow is: 'Craft Custom Controls for SIlverlight 2' by Jeff Prosise (&lt;a title="http://msdn.microsoft.com/en-us/magazine/cc721611.aspx" href="http://msdn.microsoft.com/en-us/magazine/cc721611.aspx"&gt;http://msdn.microsoft.com/en-us/magazine/cc721611.aspx&lt;/a&gt;), so use it as you main reference in creating your new controls.&lt;/p&gt;  &lt;p&gt;Let's point out the ideas that are behind the Window control:&lt;/p&gt;  &lt;p&gt;To move the windows around and resize them freely we need to use the 'Canvas trick' and place an outside Canvas that encapsulate any other controls on the page in which we want to use the windows, this is a must since I've not yet found a way to inject dinamically a canvas on a preexisting page.&lt;/p&gt;  &lt;p&gt;We then need 2 classes basically: a Window class that will handle the windows features and a WindowManager class that act like a supervisor for all the windows hosted on the page, this is a very simple class that act like the operating system do with normal windows...it creates them and when he receive the WM_CLOSE message (placed in the message pump by the windows) it closes them.&lt;/p&gt;  &lt;p&gt;We are forced to implement our own mecanics since silverlight do not offer any native way (yet) to handle windows like we want to do, we also do not have a message pump to use so we will use the notification events that will be raised by the Window.&lt;/p&gt;  &lt;p&gt;The Windows control is quite simple to realize at start, its main template will be contained in the Generic.xaml file of the solution and will be automatically loaded for each instance since we specify the DefaultStyleKey property in the constructor of the class, the template will define some pure graphical controls and 4 named controls that will represent: &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;the window surface itself - used for resizing the control&lt;/li&gt;    &lt;li&gt;the caption bar - used for dragging the window around&lt;/li&gt;    &lt;li&gt;the caption bar text&lt;/li&gt;    &lt;li&gt;the close button.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The style for the close button is defined in the App.xaml file and redefines the template of a normal silverlight button, you can use Expression Blend to take a look at both files and edit the templates.&lt;/p&gt;  &lt;p&gt;We will get a reference to those control when the template will be loaded by the runtime (just before rendering it) in the overridden OnApplyTemplate() function:&lt;/p&gt;  &lt;p&gt;   &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:9206b5b7-304e-4d23-a78f-e0cc1bd1053c" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gets called once the template is applied
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;override&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; OnApplyTemplate()
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;base&lt;/span&gt;&lt;span style="color: #000000;"&gt;.OnApplyTemplate();

            window &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetTemplateChild(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;PART_Window&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; Grid;

            captionBar &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetTemplateChild(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;PART_CaptionBar&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; FrameworkElement;

            captionText &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetTemplateChild(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;PART_CaptionText&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; TextBlock;
            captionText.Text &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; _Caption;

            Button closeButton &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; GetTemplateChild(&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;PART_CloseButton&lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (closeButton &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                closeButton.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(closeButton_Click);

            DefineDragEvents();
            DefineResizeEvents();

            Canvas.SetZIndex(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;, currentZIndex);
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We also have to provide the window with an event that will be raised whrn the user click on the close button.&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:2d883801-65fe-4f7c-af8b-9c0094010618" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;event&lt;/span&gt;&lt;span style="color: #000000;"&gt; EventHandler Closed;

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; Close()
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.Visibility &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; Visibility.Collapsed;
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;raise the closed event&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (Closed &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                Closed(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;, EventArgs.Empty);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; closeButton_Click(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, RoutedEventArgs e)
        {
            Close();
        }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;the handler will hide the window and notify the manager to take all the actions it has to do to remove the window from the surface and destroy it.&lt;/p&gt;

&lt;p&gt;An intereresting thing to note is how it was implemented the Caption property, used to set the title of the window:&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:7c352bc7-b6bf-48ad-9f94-1945a51a9ab9" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; Caption
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;get&lt;/span&gt;&lt;span style="color: #000000;"&gt; { &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; (captionText &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #000000;"&gt;?&lt;/span&gt;&lt;span style="color: #000000;"&gt; captionText.Text : _Caption; }
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;set&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            {
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (captionText &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
                    captionText.Text &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; value;
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;else&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                    _Caption &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; value;
            }
        }
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; _Caption &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;It may happen that you want to get or set this property before the template is actually loaded, so you have to
  &lt;br /&gt;bufferize the value and apply it later in the OnApplyTemplate() function.&lt;/p&gt;

&lt;p&gt;The WindowManager class is extremely simple, it will get a refence to the Canvas in which any window will be placed and will offer function to create new windows specifing the control that will be hosted inside and the position where to display it. It will internally subscribe to the Closed() event raised by the windows and will automatically remove them from the surface whenever they are closed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:f1a0fb71-8dc4-4ca8-a196-00a2ecbca7be" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; Class that handles the creation and destruction of dynamic windows
    &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; WindowsManager
    {
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; Canvas _canvas &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
        
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; creates the manager and stores the canvas to which attach the windows
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;param name=&amp;quot;surface&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; WindowsManager(Canvas surface)
        {
            _canvas &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; surface;
        }
        
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Window ShowWindow(FrameworkElement content, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; caption, Point location)
        {
            Window w &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Window();
            w.Caption &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; caption;
            w.Content &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; content;
            w.Closed &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; EventHandler(w_Closed);
            Canvas.SetLeft(w, location.X);
            Canvas.SetTop(w, location.Y);            
            _canvas.Children.Add(w);
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;return&lt;/span&gt;&lt;span style="color: #000000;"&gt; w;
        }

        ...&lt;br /&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; w_Closed(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, EventArgs e)
        {
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;remove the object from the childern colelction and dispose it dispose the object &lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            Window w &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; (Window)sender;
            _canvas.Children.Remove(w);
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;todo: dispose the object&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        }
    }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;You have a series of options on how to use this control, you can define it directly in xaml:&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c4a5be42-de48-43d7-8e41-a04f663bfca2" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Canvas &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;x:Name&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;LayoutRoot&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; Background&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;White&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;ctrl:Window &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;Width&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; Canvas.Top&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; Caption&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;Test 0&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;TextBlock&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;TEST&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;TextBlock&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;ctrl:Window&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        ...
&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Or you can create them by code using the WindowManager class.&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:7477c7ae-e02d-45c4-813a-39324e2ed970" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#F4F4F4;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;partial&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; Page : UserControl
    {
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Page()
        {
            InitializeComponent();
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.Loaded &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(Page_Loaded);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; Page_Loaded(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, RoutedEventArgs e)
        {
            wm &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; WindowsManager(LayoutRoot);
            
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;this&lt;/span&gt;&lt;span style="color: #000000;"&gt;.btn.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(btn_Click);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;int&lt;/span&gt;&lt;span style="color: #000000;"&gt; i &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; btn_Click(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, RoutedEventArgs e)
        {
            i&lt;/span&gt;&lt;span style="color: #000000;"&gt;++&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
            wm.ShowWindow(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; WindowContent(), &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Windows &lt;/span&gt;&lt;span style="color: #800000;"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; i.ToString(), &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Point(&lt;/span&gt;&lt;span style="color: #800080;"&gt;100&lt;/span&gt;&lt;span style="color: #000000;"&gt;, &lt;/span&gt;&lt;span style="color: #800080;"&gt;100&lt;/span&gt;&lt;span style="color: #000000;"&gt;));
        }
        
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; WindowsManager wm &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
    }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;That's all for this part, see you for the next ones.&lt;/p&gt;

&lt;p&gt;The complete sample solution: &lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:72b9f7a9-a028-448b-a600-45ca007595c2" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/08/simulatingwindows1.zip" target="_self"&gt;SimulatingWindows.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:cd91a3e8-ac32-4a34-89dd-b36d53ff9e70" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tag: &lt;a href="http://technorati.com/tags/SIlverlight" rel="tag"&gt;SIlverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Window" rel="tag"&gt;Window&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-power-of-canvas"&gt;Silverlight: The Power of &lt;Canvas&gt;&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control"&gt;Silverlight: Dropdown Menu Control&lt;/a&gt; (10/07/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control"&gt;Silverlight: how to build a simple Menu Control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/silverlight-simulate-a-windows-desktop-application-part-1"&gt;&lt;strong&gt;More related document (42)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1</guid><pubDate>Wed, 20 Aug 2008 20:01:28 GMT</pubDate><category>Control</category><category>Silverlight</category><category>Window</category><category>Xaml</category></item><item><title>Silverlight: How to Add a Context Menù to a FrameworkElement</title><description>&lt;p&gt;I want to be able to display a context men&amp;#249; or something else when my mouse is over a series of specified framework element on a given Silverlight Application; keep in mind we do not have support for mouse right click event due to a series of reasons that goes from difficulty of implementation on a cross browser platform to the fact that Mac users generally do not have it.&lt;/p&gt;  &lt;p&gt;So we need to think of a little different approach and think of a UI element that can be used to display the men&amp;#249; or whatever we want. The idea I had was to Highlight the control (or framework element) that is under the mouse and display a clickable anchor on the top-right corner of the bounding box surrounding the control.&lt;/p&gt;  &lt;p&gt;The anchor can then be clicked to display the men&amp;#249;. The effect I want to obtain is diplayed in the following picture, a blue bounding box surrounding the element and a button to use as anchor.&lt;/p&gt;  &lt;p&gt;&lt;a href="/UserFiles/Guardian/2008/08/extender2.jpg"&gt;&lt;img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="192" alt="Extender2" src="/UserFiles/Guardian/2008/08/extender2-thumb.jpg" width="323" border="0" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;The idea is quite simple, we need an external Canvas that will contain our main page and controls, we will dynamically create a Border and a Button that will be used for the Highlight and for the Anchor, these controls will be added to the canvas and will be resized and repositioned at runtime to fit over the control we have under the mouse. Also we will set the Z-Index of the controls to be greater of the control we want to 'extend', this way they will be displayed on top.&lt;/p&gt;  &lt;p&gt;To diplay and remove the highlight we subscribe to the MouseEnter event of the control we want to extend and to the MouseLeave event of the bounding box (Border) used to Highlight the control.&lt;/p&gt;  &lt;p&gt;All these function will be wrapped in an Helper class that will be instantiated on the main page, it will also have an AddContextMenu function that will be called for any FrameworkElement we want to extend with a context menu. The class is quite straightforward to implement and doesn't need too many comments, so here it is:&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:677255da-6cd2-42ca-9a0b-78549932ab03" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#E9E9E9;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; ContextMenuExtender
    {
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; Canvas _canvas &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; Dictionary&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;FrameworkElement, ContextMenuAnchor&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; _anchors &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; 
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Dictionary&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;FrameworkElement, ContextMenuAnchor&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;();
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; FrameworkElement _current &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;;

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; the external canvas that will be used to hold the controls
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;param name=&amp;quot;canvas&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; ContextMenuExtender(Canvas canvas)
        {
            _canvas &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; canvas;
        }

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; extends the framework element
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;param name=&amp;quot;ctrl&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;param name=&amp;quot;click&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; AddContextMenu(FrameworkElement ctrl, RoutedEventHandler click)
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (&lt;/span&gt;&lt;span style="color: #000000;"&gt;!&lt;/span&gt;&lt;span style="color: #000000;"&gt;_anchors.ContainsKey(ctrl))
            {
                ctrl.MouseEnter &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; MouseEventHandler(_ctrl_MouseEnter);
                ContextMenuAnchor anchor &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; ContextMenuAnchor();
                _anchors.Add(ctrl, anchor);
                anchor.button.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; click;
                anchor.button.Click &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; RoutedEventHandler(button_Click);
                anchor.border.MouseLeave &lt;/span&gt;&lt;span style="color: #000000;"&gt;+=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; MouseEventHandler(b_MouseLeave);
            }
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; button_Click(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, RoutedEventArgs e)
        {
            RemoveHighlight(sender &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; _ctrl_MouseEnter(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, MouseEventArgs e)
        {
            HighlightControl(sender &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; FrameworkElement);
        }

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; reposition the border and the anchor over the control
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;param name=&amp;quot;ctrl&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; HighlightControl(FrameworkElement ctrl)
        {
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;this is a patch to have only 1 element highlited at a time,
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; sometimes if you move the mouse
            &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt;too fast, silverlight misses to raise the MouseLeave event.&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; ((_current &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;) &lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style="color: #000000;"&gt; (_current &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl))
                RemoveHighlight(_current);

            _current &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl;

            ContextMenuAnchor anchor &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; _anchors[ctrl];
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (anchor &lt;/span&gt;&lt;span style="color: #000000;"&gt;!=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
            {
                Button btn &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; anchor.button;
                Border b &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; anchor.border;

                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (&lt;/span&gt;&lt;span style="color: #000000;"&gt;!&lt;/span&gt;&lt;span style="color: #000000;"&gt;_canvas.Children.Contains(b))
                {
                    GeneralTransform gt &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl.TransformToVisual(_canvas);
                    Point p &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; gt.Transform(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Point(&lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;, &lt;/span&gt;&lt;span style="color: #800080;"&gt;0&lt;/span&gt;&lt;span style="color: #000000;"&gt;));

                    b.Width &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl.ActualWidth;
                    b.Height &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl.ActualHeight;
                    b.SetValue(Canvas.TopProperty, p.Y);
                    b.SetValue(Canvas.LeftProperty, p.X);
                    _canvas.Children.Add(b);
                    Canvas.SetZIndex(b, Canvas.GetZIndex(ctrl) &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;1&lt;/span&gt;&lt;span style="color: #000000;"&gt;);

                    btn.SetValue(Canvas.TopProperty, p.Y);
                    btn.SetValue(Canvas.LeftProperty, p.X &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl.ActualWidth &lt;/span&gt;&lt;span style="color: #000000;"&gt;-&lt;/span&gt;&lt;span style="color: #000000;"&gt; btn.Width);
                    _canvas.Children.Add(btn);
                    Canvas.SetZIndex(btn, Canvas.GetZIndex(ctrl) &lt;/span&gt;&lt;span style="color: #000000;"&gt;+&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;1&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
                }
            }
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; b_MouseLeave(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;object&lt;/span&gt;&lt;span style="color: #000000;"&gt; sender, MouseEventArgs e)
        {
            RemoveHighlight(sender &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;as&lt;/span&gt;&lt;span style="color: #000000;"&gt; Border);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;#region&lt;/span&gt;&lt;span style="color: #000000;"&gt; RemoveHighlight functions&lt;/span&gt;&lt;span style="color: #000000;"&gt;

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; RemoveHighlight(Border ctrl)
        {
            ContextMenuAnchor anchor &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; (from r &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;in&lt;/span&gt;&lt;span style="color: #000000;"&gt; _anchors &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;where&lt;/span&gt;&lt;span style="color: #000000;"&gt; r.Value.border &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl select r.Value).Single();
            RemoveHighlight(anchor);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; RemoveHighlight(Button ctrl)
        {
            ContextMenuAnchor anchor &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; (from r &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;in&lt;/span&gt;&lt;span style="color: #000000;"&gt; _anchors &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;where&lt;/span&gt;&lt;span style="color: #000000;"&gt; r.Value.button &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; ctrl select r.Value).Single();
            RemoveHighlight(anchor);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; RemoveHighlight(FrameworkElement ctrl)
        {
            RemoveHighlight(_anchors[ctrl]);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; RemoveHighlight(ContextMenuAnchor anchor)
        {
            _canvas.Children.Remove(anchor.border);
            _canvas.Children.Remove(anchor.button);
        }

        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;#endregion&lt;/span&gt;&lt;span style="color: #000000;"&gt;

        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span style="color: #008000;"&gt;
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; this class will contain out anchor and highlight controls
        &lt;/span&gt;&lt;span style="color: #808080;"&gt;///&lt;/span&gt;&lt;span style="color: #008000;"&gt; &lt;/span&gt;&lt;span style="color: #808080;"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;span style="color: #808080;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; ContextMenuAnchor
        {
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Border border &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Border();
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button button &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Button();

            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; ContextMenuAnchor()
            {
                button.Width &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
                button.Height &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #800080;"&gt;10&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
                border.BorderBrush &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SolidColorBrush(Colors.Blue);
                border.BorderThickness &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Thickness(&lt;/span&gt;&lt;span style="color: #800080;"&gt;1&lt;/span&gt;&lt;span style="color: #000000;"&gt;);
            }
        }

    }&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;The class can be used like follows:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:c82b4050-e4b2-440a-9d94-23fd3e862356" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#E9E9E9;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;UserControl &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;x:Class&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;ContextMenuExtender.Page&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt;
    xmlns&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; 
    xmlns:x&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; 
   &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Canvas &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;x:Name&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;surface&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;StackPanel &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;x:Name&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;LayoutRoot&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; Background&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;White&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; Margin&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;StackPanel &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;Orientation&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;Horizontal&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
                &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;TextBlock &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;Margin&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;0,0,10,0&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;TEST&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;TextBlock&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:6686fe11-93d5-4358-af07-11192de43ef2" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#E9E9E9;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;partial&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;class&lt;/span&gt;&lt;span style="color: #000000;"&gt; Page : UserControl
    {
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;public&lt;/span&gt;&lt;span style="color: #000000;"&gt; Page()
        {
            InitializeComponent();

            ContextMenuExtender cm &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; ContextMenuExtender(surface);
            cm.AddContextMenu(txt, btn_Click);
            cm.AddContextMenu(ell, btn_Click);
            cm.AddContextMenu(txt2, btn_Click);
            cm.AddContextMenu(ell2, btn_Click);
        }
...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;The example is far to be a complete reusable control (it misses skinning and customization options for the highlight and the anchor button), but can be used as a stating point for your ContextMenuExtender.&lt;/p&gt;

&lt;p&gt;Attached to this article there's a complete working example: &lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:99f13b04-ec05-4957-92fb-4ef1a358a310" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;p&gt;&lt;div&gt;&lt;a href="/UserFiles/Guardian/2008/08/contextmenuextender.zip" target="_self"&gt;ContextMenuExtender.zip&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:31e46b9a-fe1f-42fd-8a08-4dedcc545e1c" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tag: &lt;a href="http://technorati.com/tags/silverlight" rel="tag"&gt;silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/context%20menu" rel="tag"&gt;context menu&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control"&gt;Silverlight: Dropdown Menu Control&lt;/a&gt; (10/07/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control"&gt;Silverlight: how to build a simple Menu Control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/the-power-of-canvas"&gt;Silverlight: The Power of &lt;Canvas&gt;&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/how-to-add-a-context-men-to-a-frameworkelement"&gt;&lt;strong&gt;More related document (42)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement</guid><pubDate>Thu, 14 Aug 2008 22:15:18 GMT</pubDate><category>Control</category><category>Menu</category><category>Silverlight</category><category>Window</category><category>Xaml</category><category>Context menu</category></item><item><title>Silverlight: The Power of &lt;Canvas&gt;</title><description>&lt;p&gt;The Canvas is usually an underestimated layout control in Silverlight, instead it's really useful and flexible; one the most usefull things I have discovered while playing with Silverlight is to build pages using a Canvas as the most external container and place any other layout control inside it.&lt;/p&gt;  &lt;p&gt;Why? it has a very nice and easy support for Z-Indexing and if you diplay some controls/forms/whatever on top of each other is a very simple task to realize. You can easily build a window-like desktop application in this way.&lt;/p&gt;  &lt;p&gt;So here's the way in which I usually define my silverlight pages/applications.&lt;/p&gt;  &lt;p&gt;   &lt;div class="wlWriterSmartContent" id="scid:57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:5219a1e0-1da5-4070-8da8-e3840182c912" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;&lt;pre style="background-color:#E0E0E0;;overflow: auto;"&gt;&lt;div&gt;&lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;UserControl &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;x:Class&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;ContextMenuExtender.Page&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt;
    xmlns&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; 
    xmlns:x&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; 
   &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;Canvas &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;x:Name&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;surface&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #800000;"&gt;StackPanel &lt;/span&gt;&lt;span style="color: #FF0000;"&gt;x:Name&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;LayoutRoot&amp;quot;&lt;/span&gt;&lt;span style="color: #FF0000;"&gt; Background&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;=&amp;quot;White&amp;quot;&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
            ...
        &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;StackPanel&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
    &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;Canvas&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;
&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #800000;"&gt;UserControl&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:a3327807-ae52-4342-9b11-ea4f8fdb8660" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tag: &lt;a href="http://technorati.com/tags/silverlight" rel="tag"&gt;silverlight&lt;/a&gt;,&lt;a href="http://technorati.com/tags/canvas" rel="tag"&gt;canvas&lt;/a&gt;,&lt;a href="http://technorati.com/tags/tip" rel="tag"&gt;tip&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-simulate-a-windows-desktop-application-part-1"&gt;Silverlight: simulate a 'Windows' desktop application - part 1&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-custom-buttons-with-templates"&gt;Silverlight: Custom Buttons with Templates&lt;/a&gt; (09/01/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/how-to-add-a-context-men-to-a-frameworkelement"&gt;Silverlight: How to Add a Context Menù to a FrameworkElement&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-dropdown-menu-control"&gt;Silverlight: Dropdown Menu Control&lt;/a&gt; (10/07/2008)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/silverlight-how-to-build-a-simple-menu-control"&gt;Silverlight: how to build a simple Menu Control&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/the-power-of-canvas"&gt;&lt;strong&gt;More related document (43)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/the-power-of-canvas</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/the-power-of-canvas#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/the-power-of-canvas</guid><pubDate>Thu, 14 Aug 2008 21:16:09 GMT</pubDate><category>Control</category><category>Silverlight</category><category>Window</category><category>Xaml</category><category>Canvas</category><category>Tip</category></item><item><title>Back to Action!</title><description>From time to time I really think that I should start to blog things seriously, but I have to admitt I'm just to lazy to do things properly.&lt;br /&gt;&lt;br /&gt;This will be a new start for me and I really hope to carry the whole thing on, so from now on less playing with World of Warcraft and more software developing (maybe).&lt;br /&gt;&lt;br /&gt;Due to my 'not so good' english many articles and posts will be subject to continous revisions...cause I really dislike to make mistakes :D.</description><link>http://www.primordialcode.com/blog/post/back-to-action</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/back-to-action#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/back-to-action</guid><pubDate>Wed, 06 Aug 2008 21:12:05 GMT</pubDate></item><item><title>How to start the debugger for a website in VS2003 after installing IE7</title><description>If you get an error trying to start the debugger for a website in VS2003 after the installazion of IE7 caused by the new security settings in the browser, try the following steps maybe they can resolve your problem:
&lt;ol&gt;
	&lt;li&gt;Check that the site is using the 'Integrated Windows Authentication' (in IIS, site properties, Directory Security, Anonymous Access and authentication control).&lt;/li&gt;
	&lt;li&gt;The user under which runs the site is a member of the 'Debugger Users' group.&lt;/li&gt;
	&lt;li&gt;Verify that the same user has Full Control access right on the directory in the file system.&lt;/li&gt;
	&lt;li&gt;Check the we.config to see if the debug flag is setted to true.&lt;/li&gt;
	&lt;li&gt;In IE7, internet options, Security Tab, under Local Intranet add the site address (usually &lt;a href="http://localhost/"&gt;http://localhost/&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;(optional) In IE7, internet options, Security Tab, under Local Intranet, press the Custom Level button and set 'Automatic Logon with current username and password' for the 'User Authentication\Logon' setting.&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Related Content&lt;/h2&gt;&lt;ul&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/build-windows-8"&gt;Build: Windows 8&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/sharepoint-services-setting-website-forms-authentication"&gt;SharePoint Services - Setting up a Website with Forms Authentication&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/winforms-improving-rendering-performances-backgroundimage-backgroundimagelayout"&gt;Winforms: improving rendering performances with BackgroundImage and BackgroundImageLayout&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out.hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...hot to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="http://www.primordialcode.com/blog/post/a-windows-live-essentials-suite-beta-is-out-hot-to-workaround-the-no-internet-connection-setup-problem"&gt;A Windows Live Essentials Suite Beta is out...how to workaround the ‘no internet connection’ setup problem&lt;/a&gt; (26/08/2015)&lt;/li&gt;&lt;li style="list-style-type: none"&gt;&lt;a href="/Blog/Related/how-to-start-the-debugger-for-a-website-in-vs2003-after-installing-ie7"&gt;&lt;strong&gt;More related document (7)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</description><link>http://www.primordialcode.com/blog/post/how-to-start-the-debugger-for-a-website-in-vs2003-after-installing-ie7</link><author>Guardian</author><comments>http://www.primordialcode.com/blog/post/how-to-start-the-debugger-for-a-website-in-vs2003-after-installing-ie7#feedback</comments><guid isPermaLink="true">http://www.primordialcode.com/blog/post/how-to-start-the-debugger-for-a-website-in-vs2003-after-installing-ie7</guid><pubDate>Tue, 31 Jul 2007 22:02:13 GMT</pubDate><category>Iis</category><category>Integrated windows authentication</category><category>Security settings</category></item></channel></rss>